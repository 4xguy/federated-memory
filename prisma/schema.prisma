// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// ============= Core Models =============

model User {
  id              String   @id @default(uuid())
  token           String   @unique @default(uuid()) // UUID token for authentication
  email           String?  @unique // Optional for BigMemory pattern
  emailVerified   Boolean  @default(false)
  emailVerificationToken String? @unique // For email verification
  emailVerificationExpires DateTime? // Token expiration
  passwordHash    String?  // For email/password auth
  oauthProvider   String?  // Keep for Google/GitHub login
  oauthId         String?  // Keep for Google/GitHub login
  name            String?
  avatarUrl       String?
  isActive        Boolean  @default(true)
  lastLogin       DateTime?
  metadata        Json     @default("{}") // Flexible JSON storage
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  memoryIndices   MemoryIndex[]
  relationships   MemoryRelationship[]
  apiKeys         ApiKey[] // To be deprecated
  refreshTokens   RefreshToken[] // Keep for OAuth functionality
  sessions        Session[] // For SSE connection tracking

  @@index([token]) // Critical for performance
  @@index([oauthProvider, oauthId])
  @@map("users")
}

// ============= CMI Models =============

model MemoryIndex {
  id              String   @id @default(uuid())
  userId          String
  moduleId        String
  remoteMemoryId  String
  
  // Lightweight embedding for routing
  embedding       Unsupported("vector(512)")?
  
  // Essential metadata
  title           String?
  summary         String?
  keywords        String[]
  categories      String[]
  
  // Scoring and access
  importanceScore Float    @default(0.5)
  accessCount     Int      @default(0)
  lastAccessed    DateTime @default(now())
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([moduleId, remoteMemoryId])
  @@index([userId, moduleId])
  @@index([userId, lastAccessed])
  @@map("memory_index")
}

model MemoryRelationship {
  id                String   @id @default(uuid())
  userId            String
  sourceModule      String
  sourceMemoryId    String
  targetModule      String
  targetMemoryId    String
  relationshipType  String
  strength          Float    @default(0.5)
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([sourceModule, sourceMemoryId, targetModule, targetMemoryId, relationshipType])
  @@index([userId, sourceModule, sourceMemoryId])
  @@index([userId, targetModule, targetMemoryId])
  @@map("memory_relationships")
}

model MemoryModule {
  moduleId      String   @id
  moduleName    String
  description   String?
  moduleType    String   @default("standard")
  configuration Json     @default("{}")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  
  @@map("memory_modules")
}

// ============= Module Storage Models =============
// Each module will have its own table following this pattern

model ProjectManagementMemory {
  id            String   @id @default(uuid())
  userId        String
  
  // Content and embeddings
  content       String
  embedding     Unsupported("vector(1536)")?
  
  // Flexible metadata - stores project/task data
  metadata      Json     @default("{}")
  
  // Access tracking
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("project_management_memories")
}

model TechnicalMemory {
  id            String   @id @default(uuid())
  userId        String
  
  // Content and embeddings
  content       String
  embedding     Unsupported("vector(1536)")?
  
  // Flexible metadata
  metadata      Json     @default("{}")
  
  // Access tracking
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@map("technical_memories")
}

model PersonalMemory {
  id            String   @id @default(uuid())
  userId        String
  
  // Content and embeddings
  content       String
  embedding     Unsupported("vector(1536)")?
  
  // Flexible metadata
  metadata      Json     @default("{}")
  
  // Access tracking
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@map("personal_memories")
}

model WorkMemory {
  id            String   @id @default(uuid())
  userId        String
  
  // Content and embeddings
  content       String
  embedding     Unsupported("vector(1536)")?
  
  // Flexible metadata
  metadata      Json     @default("{}")
  
  // Access tracking
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@map("work_memories")
}

model LearningMemory {
  id            String   @id @default(uuid())
  userId        String
  
  // Content and embeddings
  content       String
  embedding     Unsupported("vector(1536)")?
  
  // Flexible metadata
  metadata      Json     @default("{}")
  
  // Access tracking
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@map("learning_memories")
}

model CommunicationMemory {
  id            String   @id @default(uuid())
  userId        String
  
  // Content and embeddings
  content       String
  embedding     Unsupported("vector(1536)")?
  
  // Flexible metadata
  metadata      Json     @default("{}")
  
  // Access tracking
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@map("communication_memories")
}

model CreativeMemory {
  id            String   @id @default(uuid())
  userId        String
  
  // Content and embeddings
  content       String
  embedding     Unsupported("vector(1536)")?
  
  // Flexible metadata
  metadata      Json     @default("{}")
  
  // Access tracking
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@map("creative_memories")
}

// ============= Analytics Models =============

model QueryLog {
  id            String   @id @default(uuid())
  userId        String
  query         String
  modulesSearched String[]
  resultCount   Int
  latencyMs     Int
  createdAt     DateTime @default(now())
  
  @@index([userId, createdAt])
  @@map("query_logs")
}

model ModuleStats {
  id            String   @id @default(uuid())
  moduleId      String
  date          DateTime @db.Date
  totalQueries  Int      @default(0)
  totalStores   Int      @default(0)
  avgLatencyMs  Float    @default(0)
  activeUsers   Int      @default(0)
  
  @@unique([moduleId, date])
  @@index([date])
  @@map("module_stats")
}

// ============= BigMemory Category & Project Management Models =============

model Category {
  id            String   @id @default(uuid())
  userId        String
  name          String
  description   String?
  icon          String?
  parentId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Self-relation for hierarchy
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  
  // Relations
  memories      CategoryMemory[]
  
  @@unique([userId, name])
  @@index([userId])
  @@map("categories")
}

model CategoryMemory {
  id            String   @id @default(uuid())
  categoryId    String
  memoryId      String
  moduleId      String
  createdAt     DateTime @default(now())
  
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, memoryId, moduleId])
  @@index([categoryId])
  @@map("category_memories")
}

model Project {
  id            String   @id @default(uuid())
  userId        String
  name          String
  description   String?
  status        String   @default("planning") // planning, active, on_hold, completed, cancelled
  startDate     DateTime?
  dueDate       DateTime?
  owner         String?
  team          String[]
  ministry      String?  // For BigMemory compatibility
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  tasks         Task[]
  
  @@index([userId])
  @@index([status])
  @@map("projects")
}

model Task {
  id               String   @id @default(uuid())
  userId           String
  projectId        String?
  title            String
  description      String?
  status           String   @default("todo") // todo, in_progress, in_review, blocked, done, cancelled
  priority         String   @default("medium") // low, medium, high, urgent
  assignee         String?
  estimatedHours   Float?
  dueDate          DateTime?
  completedAt      DateTime?
  ministry         String?  // For BigMemory compatibility
  recurringTaskId  String?
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  project          Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  recurringTask    RecurringTask? @relation(fields: [recurringTaskId], references: [id])
  dependencies     TaskDependency[] @relation("TaskDependencies")
  dependents       TaskDependency[] @relation("DependentTasks")
  
  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([assignee])
  @@map("tasks")
}

model TaskDependency {
  id               String   @id @default(uuid())
  taskId           String
  dependsOnTaskId  String
  dependencyType   String   @default("depends_on") // blocks, depends_on, related
  createdAt        DateTime @default(now())
  
  task             Task     @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask    Task     @relation("DependentTasks", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, dependsOnTaskId])
  @@index([taskId])
  @@index([dependsOnTaskId])
  @@map("task_dependencies")
}

model RecurringTask {
  id            String   @id @default(uuid())
  userId        String
  title         String
  description   String?
  recurrence    Json     // { pattern: 'daily'|'weekly'|'monthly', interval: number, daysOfWeek?: string[], dayOfMonth?: number, endDate?: Date }
  assignee      String?
  projectId     String?
  priority      String   @default("medium")
  ministry      String?  // For BigMemory compatibility
  nextDue       DateTime?
  isActive      Boolean  @default(true)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  tasks         Task[]
  
  @@index([userId])
  @@index([nextDue])
  @@map("recurring_tasks")
}

// ============= Auth Models =============

model Session {
  id            String   @id @default(uuid())
  userId        String
  connectionId  String   @unique
  connectionType String  // 'sse' or 'websocket'
  lastActivity  DateTime @default(now())
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([connectionId])
  @@map("sessions")
}

model ApiKey {
  id        String    @id @default(uuid())
  userId    String
  name      String
  keyHash   String    @unique
  keyPrefix String
  lastUsed  DateTime?
  expiresAt DateTime?
  scopes    String[]
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([keyPrefix])
  @@map("api_keys")
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  clientId  String
  scope     String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}