Directory structure:
└── railwayapp-docs/
    ├── README.md
    ├── contentlayer.config.ts
    ├── flake.lock
    ├── flake.nix
    ├── LICENSE
    ├── meilisearch-docs-scraper.config.json
    ├── next-env.d.ts
    ├── next-sitemap.config.js
    ├── next.config.js
    ├── package.json
    ├── postcss.config.js
    ├── railway.toml
    ├── redirects.js
    ├── shell.nix
    ├── tailwind.config.js
    ├── tsconfig.json
    ├── .babelrc.js
    ├── .env.example
    ├── .nvmrc
    ├── .prettierrc
    ├── meilisearch/
    │   └── Dockerfile
    ├── prisma/
    │   ├── schema.prisma
    │   └── migrations/
    │       ├── migration_lock.toml
    │       ├── 20210915164107_feedback/
    │       │   └── migration.sql
    │       └── 20240219221656_community/
    │           └── migration.sql
    ├── public/
    │   ├── site.webmanifest
    │   ├── fonts/
    │   │   ├── FireMono-latin.woff2
    │   │   └── Inter-latin.woff2
    │   └── static/
    │       └── faq.json
    ├── src/
    │   ├── middleware.ts
    │   ├── types.ts
    │   ├── clients/
    │   │   └── prisma.ts
    │   ├── components/
    │   │   ├── Anchor.tsx
    │   │   ├── Arrow.tsx
    │   │   ├── Banner.tsx
    │   │   ├── Collapse.tsx
    │   │   ├── Feedback.tsx
    │   │   ├── Footer.tsx
    │   │   ├── GlobalBanner.tsx
    │   │   ├── Header.tsx
    │   │   ├── Icon.tsx
    │   │   ├── Icons.tsx
    │   │   ├── Image.tsx
    │   │   ├── InlineCode.tsx
    │   │   ├── Link.tsx
    │   │   ├── LoadingIndicator.tsx
    │   │   ├── Logo.tsx
    │   │   ├── Modal.tsx
    │   │   ├── Nav.tsx
    │   │   ├── PageNav.tsx
    │   │   ├── ScrollArea.tsx
    │   │   ├── SEO.tsx
    │   │   ├── Sidebar.tsx
    │   │   ├── SidebarItem.tsx
    │   │   ├── TallyButton.tsx
    │   │   ├── ThemeSwitcher.tsx
    │   │   ├── CodeBlock/
    │   │   │   ├── index.tsx
    │   │   │   └── normalize.ts
    │   │   └── Search/
    │   │       ├── index.tsx
    │   │       ├── Modal.tsx
    │   │       ├── NoResults.tsx
    │   │       ├── OpenModalButton.tsx
    │   │       ├── QueryInput.tsx
    │   │       └── Results.tsx
    │   ├── config/
    │   │   └── index.ts
    │   ├── data/
    │   │   └── sidebar.ts
    │   ├── docs/
    │   │   ├── quick-start.md
    │   │   ├── railway-metal.md
    │   │   ├── community/
    │   │   │   ├── affiliate-program.md
    │   │   │   └── the-conductor-program.md
    │   │   ├── guides/
    │   │   │   ├── angular.md
    │   │   │   ├── astro.md
    │   │   │   ├── axum.md
    │   │   │   ├── beego.md
    │   │   │   ├── build-a-database-service.md
    │   │   │   ├── build-configuration.md
    │   │   │   ├── builds.md
    │   │   │   ├── cli.md
    │   │   │   ├── config-as-code.md
    │   │   │   ├── create.md
    │   │   │   ├── cron-jobs.md
    │   │   │   ├── database-view.md
    │   │   │   ├── databases.md
    │   │   │   ├── deploy.md
    │   │   │   ├── deployment-actions.md
    │   │   │   ├── deployment-teardown.md
    │   │   │   ├── deployments.md
    │   │   │   ├── django.md
    │   │   │   ├── dockerfiles.md
    │   │   │   ├── environments.md
    │   │   │   ├── express.md
    │   │   │   ├── fastapi.md
    │   │   │   ├── fastify.md
    │   │   │   ├── flask.md
    │   │   │   ├── foundations.md
    │   │   │   ├── gin.md
    │   │   │   ├── github-autodeploys.md
    │   │   │   ├── healthchecks-and-restarts.md
    │   │   │   ├── healthchecks.md
    │   │   │   ├── join-priority-boarding.md
    │   │   │   ├── languages-frameworks.md
    │   │   │   ├── laravel.md
    │   │   │   ├── logs.md
    │   │   │   ├── luminus.md
    │   │   │   ├── manage-deployments.md
    │   │   │   ├── manage-projects.md
    │   │   │   ├── manage-services.md
    │   │   │   ├── manage-variables.md
    │   │   │   ├── metrics.md
    │   │   │   ├── mongodb.md
    │   │   │   ├── monitoring.md
    │   │   │   ├── monorepo.md
    │   │   │   ├── mysql.md
    │   │   │   ├── nest.md
    │   │   │   ├── networking.md
    │   │   │   ├── nuxt.md
    │   │   │   ├── observability.md
    │   │   │   ├── optimize-performance.md
    │   │   │   ├── optimize-usage.md
    │   │   │   ├── phoenix-distillery.md
    │   │   │   ├── phoenix.md
    │   │   │   ├── play.md
    │   │   │   ├── postgresql.md
    │   │   │   ├── pre-deploy-command.md
    │   │   │   ├── private-networking.md
    │   │   │   ├── projects.md
    │   │   │   ├── public-api.md
    │   │   │   ├── public-networking.md
    │   │   │   ├── publish-and-share.md
    │   │   │   ├── rails.md
    │   │   │   ├── react.md
    │   │   │   ├── redis.md
    │   │   │   ├── remix.md
    │   │   │   ├── restart-policy.md
    │   │   │   ├── rocket.md
    │   │   │   ├── sails.md
    │   │   │   ├── services.md
    │   │   │   ├── solid.md
    │   │   │   ├── spring-boot.md
    │   │   │   ├── staged-changes.md
    │   │   │   ├── start-command.md
    │   │   │   ├── sveltekit.md
    │   │   │   ├── symfony.md
    │   │   │   ├── templates-best-practices.md
    │   │   │   ├── templates.md
    │   │   │   ├── variables.md
    │   │   │   ├── volumes.md
    │   │   │   ├── vue.md
    │   │   │   └── webhooks.md
    │   │   ├── maturity/
    │   │   │   ├── compare-to-digitalocean.md
    │   │   │   ├── compare-to-fly.md
    │   │   │   ├── compare-to-heroku.md
    │   │   │   ├── compare-to-render.md
    │   │   │   ├── compare-to-vercel.md
    │   │   │   ├── compliance.md
    │   │   │   ├── incident-management.md
    │   │   │   ├── philosophy.md
    │   │   │   └── use-cases.md
    │   │   ├── migration/
    │   │   │   ├── migrate-from-digitalocean.md
    │   │   │   ├── migrate-from-fly.md
    │   │   │   ├── migrate-from-heroku.md
    │   │   │   ├── migrate-from-render.md
    │   │   │   └── migrate-from-vercel.md
    │   │   ├── overview/
    │   │   │   ├── about-railway.md
    │   │   │   ├── advanced-concepts.md
    │   │   │   ├── best-practices.md
    │   │   │   └── the-basics.md
    │   │   ├── reference/
    │   │   │   ├── accounts.md
    │   │   │   ├── app-sleeping.md
    │   │   │   ├── backups.md
    │   │   │   ├── build-and-start-commands.md
    │   │   │   ├── cli-api.md
    │   │   │   ├── config-as-code.md
    │   │   │   ├── cron-jobs.md
    │   │   │   ├── databases.md
    │   │   │   ├── deployment-regions.md
    │   │   │   ├── deployments.md
    │   │   │   ├── dockerfiles.md
    │   │   │   ├── environments.md
    │   │   │   ├── errors.md
    │   │   │   ├── functions.md
    │   │   │   ├── healthchecks.md
    │   │   │   ├── integrations.md
    │   │   │   ├── logging.md
    │   │   │   ├── metal-upgrade.md
    │   │   │   ├── metrics.md
    │   │   │   ├── migrate-to-railway-metal.md
    │   │   │   ├── nixpacks.md
    │   │   │   ├── priority-boarding.md
    │   │   │   ├── private-networking.md
    │   │   │   ├── production-readiness-checklist.md
    │   │   │   ├── project-members.md
    │   │   │   ├── project-usage.md
    │   │   │   ├── projects.md
    │   │   │   ├── public-api.md
    │   │   │   ├── public-domains.md
    │   │   │   ├── public-networking.md
    │   │   │   ├── regions.md
    │   │   │   ├── scaling.md
    │   │   │   ├── services.md
    │   │   │   ├── static-outbound-ips.md
    │   │   │   ├── support.md
    │   │   │   ├── tcp-proxy.md
    │   │   │   ├── teams.md
    │   │   │   ├── templates.md
    │   │   │   ├── usage-limits.md
    │   │   │   ├── variables.md
    │   │   │   ├── volumes.md
    │   │   │   ├── webhooks.md
    │   │   │   ├── errors/
    │   │   │   │   ├── 405-method-not-allowed.md
    │   │   │   │   ├── application-failed-to-respond.md
    │   │   │   │   ├── enotfound-redis-railway-internal.md
    │   │   │   │   ├── nixpacks-was-unable-to-generate-a-build-plan.md
    │   │   │   │   └── no-start-command-could-be-found.md
    │   │   │   └── pricing/
    │   │   │       ├── aws-marketplace.md
    │   │   │       ├── faqs.md
    │   │   │       ├── free-trial.md
    │   │   │       ├── plans.md
    │   │   │       └── refunds.md
    │   │   └── tutorials/
    │   │       ├── add-a-cdn-using-cloudfront.md
    │   │       ├── bridge-railway-to-rds-with-tailscale.md
    │   │       ├── deploy-an-otel-collector-stack.md
    │   │       ├── deploy-and-monitor-mongo.md
    │   │       ├── deploying-a-monorepo.md
    │   │       ├── getting-started.md
    │   │       ├── github-actions-post-deploy.md
    │   │       ├── github-actions-pr-environment.md
    │   │       ├── github-actions-runners.md
    │   │       ├── proximity-steering.md
    │   │       ├── set-up-a-datadog-agent.md
    │   │       └── set-up-a-tailscale-subnet-router.md
    │   ├── hooks/
    │   │   ├── useCopy.ts
    │   │   ├── useDebouncedSearch.ts
    │   │   ├── useFathom.ts
    │   │   ├── useGlobalBanners.tsx
    │   │   ├── useHashRedirect.ts
    │   │   ├── useIsMounted.ts
    │   │   ├── useMediaQuery.ts
    │   │   ├── usePostHog.ts
    │   │   ├── usePrefersDarkMode.ts
    │   │   └── useScrollToOpenCollapse.ts
    │   ├── layouts/
    │   │   ├── DocsLayout.tsx
    │   │   └── Page.tsx
    │   ├── mdxLayouts/
    │   │   └── index.tsx
    │   ├── pages/
    │   │   ├── 404.tsx
    │   │   ├── [...slug].tsx
    │   │   ├── _app.tsx
    │   │   ├── _document.tsx
    │   │   ├── index.tsx
    │   │   ├── api/
    │   │   │   ├── export.ts
    │   │   │   ├── feedback.ts
    │   │   │   └── llms-docs.md.ts
    │   │   └── dynamic/
    │   │       └── [...slug].tsx
    │   ├── scripts/
    │   │   └── toml-reference.mjs
    │   ├── store/
    │   │   └── index.ts
    │   ├── styles/
    │   │   ├── codeThemes.ts
    │   │   ├── colors.ts
    │   │   ├── fonts.css
    │   │   ├── GlobalStyles.ts
    │   │   └── theme.tsx
    │   └── utils/
    │       ├── icon.ts
    │       ├── mdxUtils.ts
    │       ├── scroll.ts
    │       └── slugify.ts
    ├── typings/
    │   └── twin.d.ts
    └── .github/
        └── workflows/
            ├── build-search-index.yml
            └── ci.yml

================================================
FILE: README.md
================================================
# 📚 Railway Documentation

Visit [docs.railway.com](https://docs.railway.com)

![og](https://railway.com/og.png)

## 💡 About

This is the place where all the documentation about Railway is hosted. Contributions are welcome! Change the markdown, make a pull request, and we'll merge it! Deploys will happen automagically cause the docs are hosted on Railway

## 🧑‍🔬 Contributing

This is a [NextJS](https://nextjs.org) project. Install Node 18, or install [nvm](https://github.com/nvm-sh/nvm) and run `nvm install` and `nvm use`.

Develop with:

```bash
npm i
npm run dev
# or
yarn
yarn dev
```

Open [localhost:3001](http://localhost:3001) to see the result



================================================
FILE: contentlayer.config.ts
================================================
import { defineDocumentType, makeSource } from "contentlayer/source-files";
import remarkAutoLinkHeadings from "remark-autolink-headings";
import remarkGfm from "remark-gfm";
import remarkSlug from "remark-slug";

const Page = defineDocumentType(() => ({
  name: "Page",
  filePathPattern: `**/*.md`,
  contentType: "mdx",
  fields: {
    title: {
      type: "string",
      description: "The title of the page",
      required: true,
    },
    description: {
      type: "string",
      description: "The description of the page",
      required: true,
    },
  },
  computedFields: {
    url: {
      type: "string",
      resolve: doc => `/${doc._raw.flattenedPath}`,
    },
  },
}));

export default makeSource({
  contentDirPath: "src/docs",
  documentTypes: [Page],
  mdx: { remarkPlugins: [remarkSlug, remarkAutoLinkHeadings, remarkGfm] },
});



================================================
FILE: flake.lock
================================================
{
  "nodes": {
    "flake-utils": {
      "locked": {
        "lastModified": 1676283394,
        "narHash": "sha256-XX2f9c3iySLCw54rJ/CZs+ZK6IQy7GXNY4nSOyu2QG4=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "3db36a8b464d0c4532ba1c7dda728f4576d6d073",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1677432345,
        "narHash": "sha256-LPtwO8ko+19DN15J6kI1QTxRBFEb2fpuvUwi92xRrS4=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "afdcf78bf9115bddc3cb3793e3cfb78ed399fce9",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "afdcf78bf9115bddc3cb3793e3cfb78ed399fce9",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}



================================================
FILE: flake.nix
================================================
{
  description = "Railway Documentation";
  inputs.nixpkgs.url = github:NixOS/nixpkgs/afdcf78bf9115bddc3cb3793e3cfb78ed399fce9;
  inputs.flake-utils.url = "github:numtide/flake-utils";

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem
      (system:
        let
          pkgs = import nixpkgs {
            inherit system;
          };
        in
        {
          devShells.default =
            import ./shell.nix { inherit pkgs; };
        }
      );
}



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2021 Railway Corp.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: meilisearch-docs-scraper.config.json
================================================
{
  "index_uid": "docs_railway_app_production",
  "start_urls": [
    {
      "url": "https://docs.railway.com/"
    }
  ],
  "js_render": false,
  "scrape_start_urls": false,
  "selectors": {
    "lvl0": {
      "selector": ".sidebar .current-section",
      "global": true,
      "default": "Railway Documentation"
    },
    "lvl1": ".docs-content h1",
    "lvl2": ".docs-content h2",
    "lvl3": ".docs-content h3",
    "lvl4": ".docs-content h4",
    "text": ".docs-content p, .docs-content li, .docs-content a, .docs-content code, .docs-content td, .docs-content pre"
  },
  "strip_chars": " .,;:#",
  "custom_settings": {
    "synonyms": {
      "postgres": ["postgresql"],
      "postgresql": ["postgres"],
      "api": ["graphql", "gql"],
      "graphql": ["gql", "api"],
      "gql": ["graphql", "api"]
    }
  }
}



================================================
FILE: next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.



================================================
FILE: next-sitemap.config.js
================================================
module.exports = {
  siteUrl: process.env.NEXT_PUBLIC_RAILWAY_DOCS_URL || "https://docs.railway.com",
  generateRobotsTxt: true,
};



================================================
FILE: next.config.js
================================================
const { withContentlayer } = require("next-contentlayer");
const { redirects } = require("./redirects");

/** @type {import('next').NextConfig} */
const nextConfig = withContentlayer({
  reactStrictMode: true,
  images: {
    remotePatterns: [
      { protocol: 'https', hostname: 'user-images.githubusercontent.com' },
      { protocol: 'https', hostname: 'railway.com' },
      { protocol: 'https', hostname: 'res.cloudinary.com' },
      { protocol: 'https', hostname: 'devicons.railway.com' },
    ],
  },
  async redirects() {
    return redirects;
  },
});

module.exports = nextConfig;



================================================
FILE: package.json
================================================
{
  "name": "railway-docs",
  "version": "0.1.0",
  "private": false,
  "license": "MIT",
  "scripts": {
    "dev": "next dev --port ${PORT-3001}",
    "build": "contentlayer build && next build",
    "postbuild": "next-sitemap",
    "start": "next start --port ${PORT-3001}",
    "clean": "rm -rf .next",
    "tsc": "tsc -p .",
    "generate": "prisma generate",
    "migrate:dev": "prisma migrate dev",
    "migrate:deploy": "prisma migrate deploy",
    "migrate:status": "prisma migrate status",
    "toml-reference": "node src/scripts/toml-reference.mjs"
  },
  "dependencies": {
    "@nanostores/react": "^0.4.1",
    "@prisma/client": "4.10.1",
    "@radix-ui/react-scroll-area": "^1.0.2",
    "@tailwindcss/typography": "^0.5.9",
    "classnames": "^2.3.2",
    "contentlayer": "^0.3.4",
    "cookies-next": "^4.2.1",
    "copy-to-clipboard": "^3.3.1",
    "dayjs": "^1.10.4",
    "fathom-client": "^3.1.0",
    "interweave": "^13.1.0",
    "meilisearch": "^0.32.3",
    "nanostores": "^0.7.4",
    "next": "^14.2.5",
    "next-contentlayer": "^0.3.4",
    "next-seo": "^5.15.0",
    "next-themes": "^0.2.1",
    "posthog-js": "^1.242.0",
    "prismjs": "^1.29.0",
    "react": "18.2.0",
    "react-aria": "^3.5.0",
    "react-dom": "18.2.0",
    "react-feather": "^2.0.9",
    "react-is": "18.2.0",
    "react-syntax-highlighter": "^15.5.0",
    "remark-gfm": "^3.0.1",
    "sharp": "^0.32.6",
    "styled-components": "5.3.6",
    "theme-custom-properties": "^1.0.0",
    "tinykeys": "1.4.0",
    "twin.macro": "^3.1.0",
    "use-local-storage-state": "^19.1.0",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "@types/node": "^18.14.2",
    "@types/react": "^18.0.28",
    "@types/react-syntax-highlighter": "^15.5.6",
    "@types/styled-components": "^5.1.9",
    "autoprefixer": "^10.2.5",
    "babel-plugin-macros": "^3.1.0",
    "next-sitemap": "^3.1.54",
    "postcss": "^8.2.10",
    "prettier": "^2.2.1",
    "prisma": "4.10.1",
    "remark-autolink-headings": "^7.0.1",
    "remark-slug": "^7.0.1",
    "tailwindcss": "^3.2.7",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^4.2.4"
  },
  "engines": {
    "node": "18"
  },
  "babelMacros": {
    "twin": {
      "preset": "styled-components"
    }
  }
}



================================================
FILE: postcss.config.js
================================================
module.exports = {
  plugins: ["tailwindcss", "autoprefixer"],
};



================================================
FILE: railway.toml
================================================
[deploy]
numReplicas = 2
sleepApplication = false
restartPolicyType = "ALWAYS"
restartPolicyMaxRetries = 10



================================================
FILE: redirects.js
================================================
const redirects = [
  {
    source: "/reference/s",
    destination: "/reference/templates",
    permanent: true,
  },
  {
    source: "/getting-started",
    destination: "/quick-start",
    permanent: true,
  },
  {
    source: "/develop/:slug*",
    destination: "/guides/:slug*",
    permanent: true,
  },
  {
    source: "/deploy/exposing-your-app",
    destination: "/guides/public-networking",
    permanent: true,
  },
  {
    source: "/deploy/logging",
    destination: "/guides/logs",
    permanent: true,
  },
  {
    source: "/deploy/deploy-on-railway-button",
    destination: "/guides/templates",
    permanent: true,
  },
  {
    source: "/deploy/healthchecks",
    destination: "/reference/healthchecks",
    permanent: true,
  },
  {
    source: "/deploy/integrations",
    destination: "/reference/integrations",
    permanent: true,
  },
  {
    source: "/deploy/railway-up",
    destination: "/guides/services",
    permanent: true,
  },
  {
    source: "/deploy/:slug*",
    destination: "/guides/:slug*",
    permanent: true,
  },
  {
    source: "/databases/bring-your-own-database",
    destination: "/guides/build-a-database-service",
    permanent: true,
  },
  {
    source: "/databases/:slug*",
    destination: "/guides/:slug*",
    permanent: true,
  },
  {
    source: "/diagnose/project-usage",
    destination: "/reference/project-usage",
    permanent: true,
  },
  {
    source: "/diagnose/:slug*",
    destination: "/guides/:slug*",
    permanent: true,
  },
  {
    source: "/guides/migrate-from-heroku",
    destination: "/tutorials/migrate-from-heroku",
    permanent: true,
  },
  {
    source: "/reference/compare-to-heroku",
    destination: "/maturity/compare-to-heroku",
    permanent: true,
  },
  {
    source: "/troubleshoot/fixing-common-errors",
    destination: "/guides/fixing-common-errors",
    permanent: true,
  },
  {
    source: "/reference/guides",
    destination: "/tutorials/getting-started",
    permanent: true,
  },
  {
    source: "/reference/pricing",
    destination: "/reference/pricing/plans",
    permanent: true,
  },
  {
    source: "/guides/fixing-common-errors",
    destination: "/reference/errors",
    permanent: true,
  },
];

const hashRedirects = [
  {
    source: "#application-failed-to-respond",
    destination: "/reference/errors/application-failed-to-respond",
    permanent: true,
  },
  {
    source: "#post-requests-turn-into-get-requests",
    destination: "/reference/errors/405-method-not-allowed",
    permanent: true,
  },
  {
    source: "/guides/healthchecks-and-restarts#restart-policy",
    destination: "/guides/restart-policy",
    permanent: true,
  },
  {
    source: "/guides/healthchecks-and-restarts#configure-healthcheck-path",
    destination: "/guides/healthchecks#configure-the-healthcheck-path",
    permanent: true,
  },
  {
    source: "/guides/healthchecks-and-restarts#configure-healthcheck-port",
    destination: "/guides/healthchecks#configure-the-healthcheck-port",
    permanent: true,
  },
  {
    source: "/guides/healthchecks-and-restarts#healthcheck-timeout",
    destination: "/guides/healthchecks#healthcheck-timeout",
    permanent: true,
  },
  {
    source: "/guides/healthchecks-and-restarts#services-with-attached-volumes",
    destination: "/guides/healthchecks#services-with-attached-volumes",
    permanent: true,
  },
  {
    source: "/guides/healthchecks-and-restarts#healthcheck-hostname",
    destination: "/guides/healthchecks#healthcheck-hostname",
    permanent: true,
  },
  {
    source: "/guides/healthchecks-and-restarts#continuous-healthchecks",
    destination: "/guides/healthchecks#continuous-healthchecks",
    permanent: true,
  },
];

module.exports = {
  redirects,
  hashRedirects,
};



================================================
FILE: shell.nix
================================================
{ pkgs ? import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/afdcf78bf9115bddc3cb3793e3cfb78ed399fce9.tar.gz") { } }:

let
  inputs = with pkgs;
    [
      nodejs-18_x
      yarn
    ];
in
pkgs.mkShell
{
  buildInputs = inputs;
}



================================================
FILE: tailwind.config.js
================================================
const colors = require("tailwindcss/colors");

const prefix = "colors";
const generateColorShades = name =>
  Array.from({ length: 9 })
    .map((_, i) => (i + 1) * 100)
    .reduce(
      (acc, k) => ({
        ...acc,
        [k]: `var(--${prefix}-${name}-${k})`,
      }),
      {},
    );

const customColors = {
  foreground: `var(--${prefix}-foreground)`,
  background: `var(--${prefix}-background)`,
  secondaryBg: `var(--${prefix}-secondaryBg)`,
  gray: generateColorShades("gray"),
  pink: generateColorShades("pink"),
  blue: generateColorShades("blue"),
  yellow: generateColorShades("yellow"),
  green: generateColorShades("green"),
  red: generateColorShades("red"),
};

const fontStack = [
  "Inter",
  "BlinkMacSystemFont",
  "Segoe UI",
  "Roboto",
  "Oxygen-Sans",
  "Ubuntu",
  "Cantarell",
  "Helvetica Neue",
  "sans-serif",
  "Apple Color Emoji",
  "Segoe UI Emoji",
  "Segoe UI Symbol",
].join(",");

module.exports = {
  content: ["./src/**/*.{js,ts,jsx,tsx}"],
  darkMode: "class", // 'media' or 'class'
  theme: {
    fontFamily: {
      sans: fontStack,
      mono: "'Fira Mono', 'Courier New', Courier, monospace",
    },
    colors: {
      transparent: "transparent",
      current: "currentColor",
      black: colors.black,
      white: colors.white,
      ...customColors,
    },
    extend: {
      minWidth: {
        sidebar: "290px",
        pageNav: "200px",
        "70vw": "70vw",
        "80vw": "80vw",
        "90vw": "90vw",
        "100vw": "100vw",
      },
      minHeight: {
        "70vh": "70vh",
        "80vh": "80vh",
        "90vh": "90vh",
      },
      typography: theme => ({
        DEFAULT: {
          css: {
            color: theme("colors.foreground"),

            a: {
              color: "currentColor",
              textDecoration: "underline",

              "&:hover": {
                color: theme("colors.pink.500"),
              },
            },

            h1: {
              color: theme("colors.foreground"),
              fontWeight: theme("fontWeight.bold"),
            },
            h2: {
              color: theme("colors.foreground"),
              fontWeight: theme("fontWeight.bold"),
            },
            h3: {
              color: theme("colors.foreground"),
            },
            h4: {
              color: theme("colors.foreground"),
            },
            img: {
              borderRadius: "10px",
            },
            code: {
              background: "transparent",
              color: theme("colors.pink.500"),
              fontWeight: theme("fontWeight.normal"),
            },
            pre: {
              code: {
                "&::after": {
                  display: "none",
                },
              },
            },
          },
        },
      }),
    },
  },
  variants: {
    extend: {},
  },
  plugins: [require("@tailwindcss/typography")],
};



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "contentlayer/generated": ["./.contentlayer/generated"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}



================================================
FILE: .babelrc.js
================================================
module.exports = {
  presets: [["next/babel", { "preset-react": { runtime: "automatic" } }]],
  plugins: ["babel-plugin-macros", ["styled-components", { ssr: true }]],
};



================================================
FILE: .env.example
================================================
NEXT_PUBLIC_RAILWAY_DOCS_URL = 
EXPORT_ENDPOINT_PASSWORD = 'password'
NEXT_PUBLIC_POSTHOG_API_KEY=
NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com



================================================
FILE: .nvmrc
================================================
v18.17.0


================================================
FILE: .prettierrc
================================================
{
  "bracketSpacing": true,
  "singleQuote": false,
  "trailingComma": "all",
  "arrowParens": "avoid",
  "tabWidth": 2
}


================================================
FILE: meilisearch/Dockerfile
================================================
FROM getmeili/meilisearch:v1.2



================================================
FILE: prisma/schema.prisma
================================================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Sentiment {
  POSITIVE
  NEGATIVE
}

model Feedback {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  topic     String
  sentiment Sentiment
  message   String?
}

model CommunityThread {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  section   String
  topic     String
  communityThreadSlug String
}


================================================
FILE: prisma/migrations/migration_lock.toml
================================================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"


================================================
FILE: prisma/migrations/20210915164107_feedback/migration.sql
================================================
-- CreateEnum
CREATE TYPE "Sentiment" AS ENUM ('POSITIVE', 'NEGATIVE');

-- CreateTable
CREATE TABLE "Feedback" (
    "id" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "topic" TEXT NOT NULL,
    "sentiment" "Sentiment" NOT NULL,
    "message" TEXT,

    PRIMARY KEY ("id")
);



================================================
FILE: prisma/migrations/20240219221656_community/migration.sql
================================================
-- CreateTable
CREATE TABLE "CommunityThread" (
    "id" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "section" TEXT NOT NULL,
    "topic" TEXT NOT NULL,
    "communityThreadSlug" TEXT NOT NULL,

    CONSTRAINT "CommunityThread_pkey" PRIMARY KEY ("id")
);



================================================
FILE: public/site.webmanifest
================================================
{
  "name": "Railway",
  "short_name": "Railway",
  "icons": [
    {
      "src": "/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#100F13",
  "background_color": "#100F13",
  "display": "standalone"
}



================================================
FILE: public/fonts/FireMono-latin.woff2
================================================
[Binary file]


================================================
FILE: public/fonts/Inter-latin.woff2
================================================
[Binary file]


================================================
FILE: public/static/faq.json
================================================
{
  "bad-gateway": {
    "category": "general",
    "questions": [
      "My app works locally but says `Bad Gateway` when I deploy?",
      "Why am I seeing Bad Gateway?",
      "Why did my app root didn't return a 200?"
    ],
    "answer": "Your application needs to have a PORT variable configured to tell Railway to expose the right port to the internet. You can configure a PORT variable under the variables pane in your project.",
    "link": "https://docs.railway.com/deploy/exposing-your-app"
  },
  "account-verification": {
    "category": "security",
    "questions": [
      "Why do I see that my account needs to be verified?",
      "How do I verify my account?",
      "Why do I need to verify?"
    ],
    "answer": "Your account requires additional information to use the Trial plan. Make sure to link a GitHub account and a Credit Card to pass the verification check.",
    "link": ""
  },
  "region": {
    "category": "general",
    "questions": [
      "What regions does Railway support?",
      "Does Railway support the EU region?",
      "Where are the Railway servers located?"
    ],
    "answer": "Railway's infrastructure spans multiple regions across the globe. This allows you to deploy your applications closer to your users no matter where they are located. This feature is only available to Pro plan workspaces.",
    "link": "https://docs.railway.com/deploy/deployments#regions"
  },
  "db-backups": {
    "category": "general",
    "questions": [
      "Are databases backed up?",
      "Can I download database backups?"
    ],
    "answer": "We backup databases every 24 hours. Currently, we only restore databases for disaster scenarios.",
    "link": ""
  },
  "custom-domains": {
    "category": "general",
    "questions": [
      "Does Railway support custom domains?",
      "Can I use custom domains?"
    ],
    "answer": "Yes, you can set up multiple custom domains per project and environment!",
    "link": "https://docs.railway.com/deploy/exposing-your-app"
  },
  "ssh": {
    "category": "general",
    "questions": [
      "How do I SSH into my application?",
      "Can I SSH into the server?"
    ],
    "answer": "That's going to be a no from me, chief. We don't support nor encourage SSH-ing into the server.",
    "link": ""
  },
  "monorepo": {
    "category": "general",
    "questions": [
      "Does Railway support monorepos?",
      "Is there support for monorepos?"
    ],
    "answer": "Yes! See how in our documentation.",
    "link": "https://docs.railway.com/deploy/monorepo"
  },
  "docker": {
    "category": "general",
    "questions": [
      "Can I use Docker?",
      "Does Railway support Docker?",
      "Is docker compose supported?",
      "Can I use docker compose on Railway?"
    ],
    "answer": "You can use a Dockerfile with Railway but we do not support using docker-compose at this moment.",
    "link": "https://docs.railway.com/deploy/dockerfiles"
  },
  "plugin-connection": {
    "category": "general",
    "questions": [
      "Why can't I connect to my plugin?",
      "I can't seem to connect to Postgres?"
    ],
    "answer": "Ensure that you are using the correct connection URL. If you can't load the data panel on your plugin's dashboard - it could be an issue on our end, be sure to reach out to the team on Discord if that is the case.",
    "link": ""
  },
  "feature-requests": {
    "category": "general",
    "questions": ["Where do I submit a feature request?"],
    "answer": "Feature requests are greatly appreciated! You can submit a feature request on our feedback page.",
    "link": "https://station.railway.com/feedback"
  },
  "fair-use": {
    "category": "security",
    "questions": [
      "What am I allowed to host on Railway?",
      "How do I know what content is DMCA?",
      "What can I host?",
      "What repos are banned?"
    ],
    "answer": "You can see our Fair Use policy to determine what you can host",
    "link": "https://railway.com/legal/fair-use"
  },
  "server-restart": {
    "category": "security",
    "questions": [
      "Does Railway restart their servers?",
      "Will Railway restart my application?"
    ],
    "answer": "No, we don't restart your servers on your behalf without ample warning.",
    "link": ""
  },

  "un-ban": {
    "category": "security",
    "questions": [
      "Can you un-ban my account?",
      "I was banned, unban me.",
      "Help I was banned.",
      "Why does it say 'end of the line'?"
    ],
    "answer": "If you feel that your ban was a mistake, please email verify (at) railway (dot) app. We do not review disciplinary actions on our Discord.",
    "link": ""
  },
  "two-factor": {
    "category": "security",
    "questions": [
      "How do I configure Two-Factor Authentication?",
      "Do you have Two-Factor auth?",
      "Where can I set up 2FA?"
    ],
    "answer": "You can set up an TOTP (Time Based One Time Password) app under your Account Security page to enable Two-Factor Authentication.",
    "link": "https://railway.com/account/security"
  },
  "free-plan-limits": {
    "category": "pricing",
    "questions": [
      "I am reaching my free plan limits. How do I upgrade my account?",
      "How do I subscribe to the paid tier?",
      "Where do I upgrade my account?",
      "How can I upgrade from Hobby to Pro?"
    ],
    "answer": "You can upgrade your account from within the 'Plans' page.",
    "link": "https://railway.com/workspace/plans"
  },
  "usage-calc": {
    "category": "pricing",
    "questions": ["How does Railway calculate usage?"],
    "answer": "We calculate RAM and CPU usage to the minute. Our rates are $0.000231 / GB / minute for RAM and $0.000463 / vCPU / minute for compute.",
    "link": "https://railway.com/pricing"
  },
  "free-plan": {
    "category": "pricing",
    "questions": [
      "What are the usage limits for the free plan?",
      "Free plan limits?"
    ],
    "answer": "Deploys on the Trial plan get 512 MB memory and 1GB of disk, with up to $5 of usage per month.",
    "link": "https://railway.com/pricing"
  },
  "no-credits": {
    "category": "pricing",
    "questions": ["What happens when I run out of credits?"],
    "answer": "If you are on the Trial plan, your projects are put to rest until next month's credits. You must redeploy your projects after you get next month's credits. If you are on the Developer plan, you are charged for any usage above $5 for the month.",
    "link": ""
  },
  "see-usage": {
    "category": "pricing",
    "questions": ["How do I see my project's usage?"],
    "answer": "In the project settings, click on the 'Usage' tab.",
    "link": ""
  },
  "bug-reporting": {
    "category": "misc",
    "questions": [
      "I found a bug. Where can I report it?",
      "Where do I report a bug?"
    ],
    "answer": "You can report a bug in our Central Station. Bug reports are happily accepted!",
    "link": "https://station.railway.com/feedback"
  },
  "hiring": {
    "category": "misc",
    "questions": ["Is Railway hiring?", "Do you have any jobs?"],
    "answer": "Yes!",
    "link": "https://www.notion.so/railwayapp/Jobs-bdc641c4b72947f2ab1e09bea5362363"
  },
  "intro": {
    "category": "misc",
    "questions": [
      "Who is Percy?",
      "What does Percy do?",
      "Why does Percy exist?"
    ],
    "answer": "Percy is Railway's helpful Discord bot!",
    "link": ""
  }
}



================================================
FILE: src/middleware.ts
================================================
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { allPages, Page } from "contentlayer/generated";

// This middleware is used to rewrite the pathname to the SSR path during runtime as middleware is not ran during build
export function middleware(request: NextRequest) {
  const page = allPages.find(p => p.url === request.nextUrl.pathname);

  if (!page) {
    return NextResponse.next();
  }

  const url = request.nextUrl.clone();
  url.pathname = "/dynamic" + url.pathname;
  return NextResponse.rewrite(url);
}

export const config = {
  matcher: "/:path*",
};



================================================
FILE: src/types.ts
================================================
export interface FrontMatter {
  title: string;
  description?: string;
  url: string;
}

export type ISidebarContent = ISidebarSection[];

export interface IPage {
  title: string;
  slug: string;
  description?: string;
  category?: string;
}

export interface IExternalLink {
  title: string;
  url: string;
}

export interface ISidebarSection {
  title?: string;
  content: (IPage | ISubSection | IExternalLink)[];
}

export interface ISubSection {
  subTitle: string | IPage;
  pages: (IPage | IExternalLink)[];
}

export namespace Search {
  interface ResultItem {
    hierarchies: string[];
    slug: string;
    text: string;
  }
  export type Result = Record<string, ResultItem[]>;
  export interface Document {
    hierarchy_lvl0: string;
    hierarchy_lvl1: string;
    hierarchy_lvl2: string;
    hierarchy_lvl3: string;
    hierarchy_lvl4: string;
    url: string;
    content: string;
  }
}



================================================
FILE: src/clients/prisma.ts
================================================
import { PrismaClient } from "@prisma/client";

export const prisma = new PrismaClient();



================================================
FILE: src/components/Anchor.tsx
================================================
import { scrollToID } from "@/utils/scroll";
import React, { useCallback, useEffect, useState } from "react";

interface AnchorProps {
  href: string;
  children: React.ReactNode;
  className?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
  rel?: string;
}

export const Anchor: React.FC<AnchorProps> = ({
  href,
  children,
  className = "",
  target = "_self",
  rel = target === "_blank" ? "noopener noreferrer" : undefined,
}) => {
  return (
    <a
      href={href}
      className={className}
      target={target}
      rel={rel}
      onClick={scrollToID(href)}
    >
      {children}
    </a>
  );
};



================================================
FILE: src/components/Arrow.tsx
================================================
import React from "react";
import tw from "twin.macro";

interface ArrowProps {
  isExpanded: boolean;
}

export const Arrow: React.FC<ArrowProps> = ({ isExpanded }) => {
  return (
    <svg
      css={[
        tw`h-4 w-4 transition-transform duration-200`,
        { transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)' }
      ]}
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
    >
      <path
        fillRule="evenodd"
        d="M7.293 14.707a1 1 0 001.414 0L13.414 10l-4.707-4.707a1 1 0 00-1.414 1.414L10.586 10l-3.293 3.293a1 1 0 000 1.414z"
        clipRule="evenodd"
      />
    </svg>
  );
};



================================================
FILE: src/components/Banner.tsx
================================================
import React, { PropsWithChildren } from "react";
import { iconFromName } from "@/utils/icon";
import {
  AlertTriangle,
  CheckCircle,
  Info,
  Star,
  XOctagon,
} from "react-feather";
import tw, { TwStyle } from "twin.macro";
import { Icon } from "./Icon";
import { Link } from "./Link";

export type BannerVariant =
  | "primary"
  | "secondary"
  | "info"
  | "danger"
  | "success"
  | "warning";

const defaultVariant: BannerVariant = "primary";

export interface Props {
  variant?: BannerVariant;
  icon?: React.ComponentType;
  iconName?: string;
  hideIcon?: boolean;
  className?: string;
  textContainerStyles?: TwStyle;
}

const containerStyles: Record<BannerVariant, TwStyle> = {
  primary: tw`text-pink-800 bg-pink-100 border border-pink-200`,
  secondary: tw`text-gray-800 bg-gray-100 border border-gray-200`,
  info: tw`text-blue-800 bg-blue-100 border border-blue-200`,
  danger: tw`text-red-800 bg-red-100 border border-red-200`,
  success: tw`text-green-800 bg-green-100 border border-green-200`,
  warning: tw`text-yellow-800 bg-yellow-100 border border-yellow-200`,
};

const iconStyles: Record<BannerVariant, TwStyle> = {
  primary: tw`text-pink-500`,
  secondary: tw`text-gray-500`,
  info: tw`text-blue-500`,
  danger: tw`text-red-500`,
  success: tw`text-green-500`,
  warning: tw`text-yellow-500`,
};

const defaultIcons: Record<BannerVariant, React.ComponentType | null> = {
  primary: null,
  secondary: null,
  info: Info,
  danger: XOctagon,
  success: CheckCircle,
  warning: AlertTriangle,
};

export const Banner: React.FC<PropsWithChildren<Props>> = ({
  children,
  hideIcon,
  textContainerStyles,
  ...props
}) => {
  const variant = props.variant ?? defaultVariant;
  const icon = props.iconName
    ? iconFromName(props.iconName)
    : props.icon ?? defaultIcons[variant];

  return (
    <div
      css={[
        tw`flex items-center py-3 px-4 border rounded-md space-x-3`,
        containerStyles[variant],
      ]}
      className="banner"
      {...props}
    >
      {!hideIcon && icon != null && (
        <Icon tw="mx-1" icon={icon} css={[iconStyles[variant]]} />
      )}
      <div
        css={[
          {
            "> p": tw`my-2`,
          },
          textContainerStyles,
        ]}
      >
        {children}
      </div>
    </div>
  );
};

export const PriorityBoardingBanner: React.FC = () => {
  return (
    <Banner variant="primary" icon={Star}>
      This feature is in beta.
    </Banner>
  );
};



================================================
FILE: src/components/Collapse.tsx
================================================
import React, {
  PropsWithChildren,
  useEffect,
  useState,
  useCallback,
} from "react";
import tw, { TwStyle } from "twin.macro";
import { slugify } from "@/utils/slugify";
import { Arrow } from "@/components/Arrow";

interface Props {
  title: string;
  slug?: string;
}

const openElements = new Set<string>();

export const Collapse: React.FC<PropsWithChildren<Props>> = ({
  children,
  title,
  slug,
}) => {
  const newSlug = slug ?? slugify(title);
  const [isExpanded, setIsExpanded] = useState(false);

  const updateHash = useCallback((newSlug: string) => {
    window.history.pushState(
      null,
      "",
      newSlug
        ? `#${newSlug}`
        : window.location.pathname + window.location.search,
    );
  }, []);

  const handleOpenState = useCallback(
    (shouldExpand: boolean) => {
      if (shouldExpand) {
        openElements.add(newSlug);
        updateHash(newSlug);
        return;
      }

      openElements.delete(newSlug);
      updateHash(Array.from(openElements).pop() || "");
    },
    [newSlug, updateHash],
  );

  const handleClick = useCallback(
    (event: React.MouseEvent) => {
      event.preventDefault();
      setIsExpanded(prevIsOpen => {
        const newIsExpanded = !prevIsOpen;
        handleOpenState(newIsExpanded);
        return newIsExpanded;
      });
    },
    [handleOpenState],
  );

  useEffect(() => {
    const currentHash = window.location.hash.slice(1);

    if (currentHash == newSlug) {
      setIsExpanded(true);
      handleOpenState(true);
    }
  }, [newSlug, handleOpenState]);

  return (
    <details css={tw`my-4 mx-2 cursor-pointer`} id={newSlug} open={isExpanded}>
      <summary css={tw`font-medium flex items-center`} onClick={handleClick}>
        <span css={tw`mr-2`}>
          <Arrow isExpanded={isExpanded} />
        </span>
        {title}
      </summary>
      <div css={tw`cursor-default pl-6`}>{children}</div>
    </details>
  );
};



================================================
FILE: src/components/Feedback.tsx
================================================
import React, { FormEvent, useState } from "react";
import { ThumbsDown, ThumbsUp } from "react-feather";
import "twin.macro";
import { Banner } from "./Banner";

export const Feedback: React.FC<{ topic: string }> = ({ topic }) => {
  const [helpful, setHelpful] = useState(true);
  const [success, setSuccess] = useState(false);

  const sendFeedback = async (event: React.MouseEvent | FormEvent) => {
    event.preventDefault();
    const feedback =
      event.target instanceof HTMLFormElement
        ? event.target?.feedback?.value ?? ""
        : "";

    await fetch("/api/feedback", {
      body: JSON.stringify({
        topic,
        feedback,
        helpful,
      }),
      method: "POST",
    });

    setSuccess(true);
  };

  return (
    <>
      {success && (
        <Banner tw="mt-32" variant="info">
          Thank you for your feedback!
        </Banner>
      )}

      {!success && (
        <>
          {helpful && (
            <div tw="flex flex-row [align-items:center] mt-32">
              <div tw="font-semibold text-lg mr-4">Was this page helpful?</div>
              <button
                onClick={e => sendFeedback(e)}
                tw="mr-2 flex [align-items:center] border border-blue-200 rounded-md px-4 py-2 hover:bg-blue-100"
              >
                <ThumbsUp tw="mr-2 text-blue-700" />
                <div tw="font-semibold text-blue-900">Yes</div>
              </button>
              <button
                onClick={e => setHelpful(false)}
                tw="flex [align-items:center] border border-red-200 rounded-md px-4 py-2 hover:[background-color:#FBEAEA]"
              >
                <ThumbsDown tw="mr-2 text-red-500" />
                <div tw="font-semibold text-red-700">No</div>
              </button>
            </div>
          )}

          {!helpful && (
            <form tw="mt-16" onSubmit={sendFeedback}>
              <textarea
                tw="border rounded-md w-full p-2 my-6"
                id="feedback"
                name="feedback"
                rows={3}
                required
                placeholder="What was missing or inaccurate?"
              />
              <button
                type="submit"
                tw="border border-gray-200 p-2 rounded-md font-semibold text-gray-400 bg-gray-100 mr-8 hover:text-gray-700"
              >
                Submit Feedback
              </button>
              <button onClick={e => setHelpful(true)}>Cancel</button>
            </form>
          )}
        </>
      )}
    </>
  );
};



================================================
FILE: src/components/Footer.tsx
================================================
import React from "react";
import "twin.macro";

export const Footer: React.FC = () => (
  <footer tw="text-center py-8">
    Copyright © {new Date().getFullYear()} Railway Corp. All rights reserved
  </footer>
);



================================================
FILE: src/components/GlobalBanner.tsx
================================================
import { useGlobalBanners } from "@/hooks/useGlobalBanners";
import { Banner } from "./Banner";
import { X } from "react-feather";
import tw from "twin.macro";

export const GlobalBanners = () => {
  const { currentBanner, dismissGlobalBanner } = useGlobalBanners();

  if (currentBanner == null) return null;

  return (
    <Banner
      variant={currentBanner.variant}
      tw="rounded-none"
      textContainerStyles={tw`relative w-full flex justify-center`}
    >
      <p>{currentBanner.message}</p>

      <button
        type="button"
        title="Dismiss"
        css={[
          tw`absolute top-3 right-0`,
          tw`focus:outline-none text-gray-500 hover:text-gray-700`,
        ]}
        onClick={() => dismissGlobalBanner(currentBanner.id)}
      >
        <X tw="h-5 w-5" />
      </button>
    </Banner>
  );
};



================================================
FILE: src/components/Header.tsx
================================================
import { scrollToID } from "@/utils/scroll";
import React from "react";
import { Link as FeatherLinkIcon } from "react-feather";
import styled from "styled-components";
import tw from "twin.macro";

const StyledLinkIcon = styled.a`
  text-decoration: none;
  position: absolute;
  width: 3rem;
  height: 2rem;
  display: none;
  align-items: center;
  left: -2rem;
  &:hover {
    text-decoration: underline;
  }
`;

const StyledLinkHeading = styled.a`
  text-decoration: none;
  position: absolute;
  font-weight: bold;
  &:hover {
    text-decoration: underline;
  }
`;

const BaseStyledHeading = styled.div`
  display: flex;
  align-items: center;
  position: relative;
  padding: 1.5rem 0 0;
  margin-bottom: 2rem;

  &:hover {
    ${StyledLinkIcon} {
      display: flex;
    }
    @media (max-width: 1300px) {
      ${StyledLinkIcon} {
        display: none;
      }
    }
  }
`;

const StyledHeadingH2 = styled(BaseStyledHeading).attrs({ as: "h2" })``;
const StyledHeadingH3 = styled(BaseStyledHeading).attrs({ as: "h3" })``;

export const H2: React.FC<{ id: string; children: React.ReactNode[] }> = ({
  id,
  children,
}) => {
  return (
    <StyledHeadingH2 id={id}>
      <StyledLinkIcon>
        <FeatherLinkIcon className="icon" size={20} />
      </StyledLinkIcon>
      <StyledLinkHeading onClick={scrollToID(id)} style={{ cursor: "pointer" }}>
        {children[1]}
      </StyledLinkHeading>
    </StyledHeadingH2>
  );
};

export const H3: React.FC<{ id: string; children: React.ReactNode[] }> = ({
  id,
  children,
}) => {
  return (
    <StyledHeadingH3 id={id}>
      <StyledLinkIcon>
        <FeatherLinkIcon className="icon" size={20} />
      </StyledLinkIcon>
      <StyledLinkHeading onClick={scrollToID(id)} style={{ cursor: "pointer" }}>
        {children[1]}
      </StyledLinkHeading>
    </StyledHeadingH3>
  );
};

export const H4: React.FC<{ id: string; children: React.ReactNode[] }> = ({
  id,
  children,
}) => {
  return (
    <h4 id={id} onClick={scrollToID(id, true)} style={{ cursor: "pointer" }} css={tw`mb-[1.5em]`}>
      {children[1]}
    </h4>
  );
};



================================================
FILE: src/components/Icon.tsx
================================================
import React from "react";
import tw, { styled } from "twin.macro";

export type IconSize = "xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "none";

export interface Props {
  icon: React.ComponentType;
  size?: IconSize;
}

const sizes: Record<IconSize, string | undefined> = {
  xxs: "12px",
  xs: "14px",
  sm: "18px",
  md: "26px",
  lg: "48px",
  xl: "96px",
  none: undefined,
};

export const Icon = React.forwardRef<HTMLDivElement, Props>(
  ({ icon, ...props }, ref) => {
    const Comp = icon;

    return (
      <Container ref={ref} {...props} aria-hidden="true">
        <Comp />
      </Container>
    );
  },
);

const getSize = (s: IconSize): string | undefined =>
  s === "none" ? undefined : sizes[s] ?? s;

const Container = styled.div<Omit<Props, "icon">>`
  ${tw`text-current`}
  width: ${({ size }) => getSize(size ?? "sm")};
  height: ${({ size }) => getSize(size ?? "sm")};
  min-width: ${({ size }) => getSize(size ?? "sm")};
  min-height: ${({ size }) => getSize(size ?? "sm")};

  /* Center icon vertically */
  display: flex;
  align-items: center;

  svg {
    width: 100%;
    height: 100%;
  }
`;



================================================
FILE: src/components/Icons.tsx
================================================
import tw, { styled } from "twin.macro";
import { useTheme } from "../styles/theme";
import { useIsMounted } from "@/hooks/useIsMounted";

export const XIcon: React.FC<any> = (props) => {
  const { colorMode } = useTheme();

  const isMounted = useIsMounted();

  return (
    <svg
      viewBox="0 0 300 301"
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      xmlSpace="preserve"
      style={{
        fillRule: "evenodd",
        clipRule: "evenodd",
        strokeLinejoin: "round",
        strokeMiterlimit: 2,
      }}
      key={isMounted ? "mounted" : "unmounted"}
      {...props}
    >
      <path
        d="M178.57,127.15L290.27,0L263.81,0L166.78,110.38L89.34,0L0,0L117.13,166.93L0,300.25L26.46,300.25L128.86,183.66L210.66,300.25L300,300.25M36.01,19.54L76.66,19.54L263.79,281.67L223.13,281.67"
        style={{
          fillRule: "nonzero",
          fill: colorMode == "dark" ? "white" : "black",
        }}
      />
    </svg>
  );
};

export const DiscordIcon: React.FC<any> = (props) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 127.14 96.36"
    {...props}
  >
    <g data-name="\\u56FE\\u5C42 2">
      <g data-name="Discord Logo">
        <path
          d="M107.7 8.07A105.15 105.15 0 0 0 81.47 0a72.06 72.06 0 0 0-3.36 6.83 97.68 97.68 0 0 0-29.11 0A72.37 72.37 0 0 0 45.64 0a105.89 105.89 0 0 0-26.25 8.09C2.79 32.65-1.71 56.6.54 80.21a105.73 105.73 0 0 0 32.17 16.15 77.7 77.7 0 0 0 6.89-11.11 68.42 68.42 0 0 1-10.85-5.18c.91-.66 1.8-1.34 2.66-2a75.57 75.57 0 0 0 64.32 0c.87.71 1.76 1.39 2.66 2a68.68 68.68 0 0 1-10.87 5.19 77 77 0 0 0 6.89 11.1 105.25 105.25 0 0 0 32.19-16.14c2.64-27.38-4.51-51.11-18.9-72.15ZM42.45 65.69C36.18 65.69 31 60 31 53s5-12.74 11.43-12.74S54 46 53.89 53s-5.05 12.69-11.44 12.69Zm42.24 0C78.41 65.69 73.25 60 73.25 53s5-12.74 11.44-12.74S96.23 46 96.12 53s-5.04 12.69-11.43 12.69Z"
          style={{
            fill: "#5865f2",
          }}
          data-name="Discord Logo"
        />
      </g>
    </g>
  </svg>
);

export const RailwayIcon = () => (
  <svg
    fill="currentColor"
    data-v-423bf9ae=""
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 65.99939578809374 66.0"
    aria-hidden="true"
  >
    <g
      data-v-423bf9ae=""
      id="6f639fe5-02e1-4640-a1fb-f4b22b64e5ef"
      transform="matrix(0.5999641134746578,0,0,0.5999641134746578,-437.5538206497148,-266.68705118956507)"
      stroke="none"
    >
      <path d="M729.872 487.327a50.86 50.86 0 0 0-.464 5.033h75.879c-.265-.518-.621-.985-.98-1.442-12.972-16.769-19.95-15.315-29.932-15.741-3.328-.137-5.585-.192-18.832-.192-7.09 0-14.798.018-22.304.038.737-1.746 1.6-3.419 2.525-5.061-2.885 5.106-4.865 10.771-5.805 16.789l.891-4.397c.007-.031.018-.063.024-.094h38.883v5.067h-39.885zM805.885 497.432h-76.438c.08 1.352.206 2.686.388 4.002h70.571c3.146 0 4.907-1.786 5.479-4.002zM733.851 515.257a52.226 52.226 0 0 1-1.98-4.997c6.608 19.89 25.328 34.251 47.433 34.251 20.205 0 37.566-12.007 45.452-29.254h-90.905zM729.38 492.915c-.018.531-.08 1.055-.08 1.589 0 .538.063 1.059.08 1.59v-3.179zM824.77 515.229z"></path>
      <path d="M779.303 444.505c-18.682 0-34.939 10.265-43.524 25.439 6.709-.014 19.775-.022 19.775-.022h.003v-.005c15.444 0 16.018.069 19.035.195l1.868.069c6.507.217 14.505.916 20.798 5.68 3.416 2.584 8.348 8.287 11.288 12.35 2.718 3.758 3.5 8.078 1.652 12.217-1.701 3.804-5.361 6.073-9.793 6.073H730.85l-.884-4.201c.426 2.707 1.037 5.344 1.879 7.886h94.914a49.863 49.863 0 0 0 2.546-15.682c.001-27.611-22.386-49.999-50.002-49.999z"></path>
    </g>
  </svg>
);

export const RssIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke="#853BCE"
    tw="w-8 h-8"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M6 5c7.18 0 13 5.82 13 13M6 11a7 7 0 017 7m-6 0a1 1 0 11-2 0 1 1 0 012 0z"
    />
  </svg>
);



================================================
FILE: src/components/Image.tsx
================================================
import React from "react";
import { default as NextImage, ImageProps } from "next/legacy/image";

interface ExtImageProps extends ImageProps {
  title?: string;
  href?: string;
}

export const Image: React.FC<ExtImageProps> = ({ title, ...props }) => {
  return (
      <a
        tw="block xl:-mx-8"
        href={props.href ?? props.src as string} 
        target="_blank"
        rel="noopener"
      >
      <NextImage {...props} title={title} />
    </a>
  );
};


================================================
FILE: src/components/InlineCode.tsx
================================================
import React, { PropsWithChildren } from "react";
import tw from "twin.macro";
import { useTheme } from "../styles/theme";
import { darkCodeTheme, lightCodeTheme } from "../styles/codeThemes";
import { useIsMounted } from "@/hooks/useIsMounted";

type CodeTheme = {
  'pre[class*="language-"]': {
    background: string;
  };
  'code[class*="language-"]': {
    color: string;
  };
};

export interface Props {
  children?: any;
  colorModeSSR?: string | null;
}

export const InlineCode: React.FC<Props> = ({ children, colorModeSSR }) => {
  const isMounted = useIsMounted();

  const colorMode = !isMounted ? colorModeSSR || "light" : useTheme().colorMode;

  const theme = colorMode === "light" ? lightCodeTheme : darkCodeTheme;

  return (
    <code
      css={tw`rounded font-mono whitespace-nowrap inline-block before:content-[''] after:content-['']`}
      style={{
        backgroundColor: String(theme['pre[class*="language-"]'].background),
        color: theme['code[class*="language-"]'].color,
        padding: "0.15rem 0.50rem 0px 0.50rem",
      }}
      data-colormode={colorMode}
    >
      {children}
    </code>
  );
};



================================================
FILE: src/components/Link.tsx
================================================
import NLink from "next/link";
import React, { PropsWithChildren, useMemo, forwardRef } from "react";

export interface Props {
  href: string;
  external?: boolean;
  className?: string;
  onClick?: (e: React.MouseEvent) => void;
}

const isExternalLink = (href: string) =>
  href == null || href.startsWith("http://") || href.startsWith("https://");

const useIsExternalLink = (href: string) =>
  useMemo(() => isExternalLink(href), [href]);

export const Link = forwardRef<HTMLAnchorElement, PropsWithChildren<Props>>(
  ({ href, external, children, ...props }, ref) => {
    const isExternal = (useIsExternalLink(href) || external) ?? false;

    if (isExternal) {
      return (
        <a href={href} target="_blank" rel="noopener" ref={ref} {...props}>
          {children}
        </a>
      );
    }

    return (
      <NLink href={href} passHref legacyBehavior>
        <a ref={ref} {...props}>{children}</a>
      </NLink>
    );
  }
);



================================================
FILE: src/components/LoadingIndicator.tsx
================================================
import tw from "twin.macro";

const LoadingIcon = tw.svg`
inline w-10 h-10 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-pink-600
`;

export const LoadingIndicator = () => {
  return (
    <div role="status">
      <LoadingIcon
        aria-hidden="true"
        viewBox="0 0 100 101"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
          fill="currentColor"
        />
        <path
          d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
          fill="currentFill"
        />
      </LoadingIcon>
    </div>
  );
};



================================================
FILE: src/components/Logo.tsx
================================================
import React from "react";
import "twin.macro";

export const Logo: React.FC = props => (
  <svg
    data-v-423bf9ae=""
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 60 60"
    className="logo"
    tw="w-10 fill-current"
    {...props}
  >
    <g
      data-v-423bf9ae=""
      id="6f639fe5-02e1-4640-a1fb-f4b22b64e5ef"
      transform="matrix(0.5999641134746578,0,0,0.5999641134746578,-437.5538206497148,-266.68705118956507)"
      stroke="none"
    >
      <path d="M729.872 487.327a50.86 50.86 0 0 0-.464 5.033h75.879c-.265-.518-.621-.985-.98-1.442-12.972-16.769-19.95-15.315-29.932-15.741-3.328-.137-5.585-.192-18.832-.192-7.09 0-14.798.018-22.304.038.737-1.746 1.6-3.419 2.525-5.061-2.885 5.106-4.865 10.771-5.805 16.789l.891-4.397c.007-.031.018-.063.024-.094h38.883v5.067h-39.885zM805.885 497.432h-76.438c.08 1.352.206 2.686.388 4.002h70.571c3.146 0 4.907-1.786 5.479-4.002zM733.851 515.257a52.226 52.226 0 0 1-1.98-4.997c6.608 19.89 25.328 34.251 47.433 34.251 20.205 0 37.566-12.007 45.452-29.254h-90.905zM729.38 492.915c-.018.531-.08 1.055-.08 1.589 0 .538.063 1.059.08 1.59v-3.179zM824.77 515.229z"></path>
      <path d="M779.303 444.505c-18.682 0-34.939 10.265-43.524 25.439 6.709-.014 19.775-.022 19.775-.022h.003v-.005c15.444 0 16.018.069 19.035.195l1.868.069c6.507.217 14.505.916 20.798 5.68 3.416 2.584 8.348 8.287 11.288 12.35 2.718 3.758 3.5 8.078 1.652 12.217-1.701 3.804-5.361 6.073-9.793 6.073H730.85l-.884-4.201c.426 2.707 1.037 5.344 1.879 7.886h94.914a49.863 49.863 0 0 0 2.546-15.682c.001-27.611-22.386-49.999-50.002-49.999z"></path>
    </g>
  </svg>
);



================================================
FILE: src/components/Modal.tsx
================================================
import { useDialog } from "@react-aria/dialog";
import { FocusScope } from "@react-aria/focus";
import {
  OverlayContainer,
  useModal,
  useOverlay,
  usePreventScroll,
} from "@react-aria/overlays";
import React, { PropsWithChildren, useRef } from "react";
import { VisuallyHidden } from "react-aria";
import tw from "twin.macro";

export interface Props {
  title: string;
  isOpen: boolean;
  onClose: () => void;
}

const ModalDialog: React.FC<PropsWithChildren<Props>> = ({
  title,
  isOpen,
  onClose,
  children,
}) => {
  // Handle interacting outside the dialog and pressing
  // the Escape key to close the modal.
  const ref = useRef<HTMLDivElement | null>(null);
  const { overlayProps } = useOverlay(
    {
      isOpen,
      onClose,
      isDismissable: true,
    },
    ref,
  );

  // Prevent scrolling while the modal is open, and hide content
  // outside the modal from screen readers.
  usePreventScroll();
  const { modalProps } = useModal();

  // Get props for the dialog and its title
  const { dialogProps, titleProps } = useDialog({}, ref);

  return (
    <div
      css={[
        tw`fixed top-0 right-0 bottom-0 left-0 select-none z-50`,
        tw`bg-black bg-opacity-50`,
        tw`overflow-scroll`,
      ]}
    >
      <FocusScope contain restoreFocus autoFocus>
        <div
          {...overlayProps}
          {...dialogProps}
          {...modalProps}
          ref={ref}
          tw="focus:outline-none"
        >
          <VisuallyHidden>
            <h3 {...titleProps} style={{ marginTop: 0 }}>
              {title}
            </h3>
          </VisuallyHidden>

          {children}
        </div>
      </FocusScope>
    </div>
  );
};

export const Modal: React.FC<PropsWithChildren<Props>> = props => {
  if (!props.isOpen) {
    return null;
  }

  return (
    <OverlayContainer>
      <ModalDialog {...props} />
    </OverlayContainer>
  );
};



================================================
FILE: src/components/Nav.tsx
================================================
import React, { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import { Home, Menu, X } from "react-feather";
import tw from "twin.macro";
import { Link } from "./Link";
import { Logo } from "./Logo";
import { OpenSearchModalButton } from "@/components/Search";
import { MobileSidebar } from "./Sidebar";
import { ThemeSwitcher } from "./ThemeSwitcher";

export const Nav: React.FC = () => {
  return (
    <header
      css={[tw`hidden md:flex`, tw`items-center justify-end`, tw`px-8 py-6`]}
    >
      <ul>
        <li>
          <Link
            href="https://railway.com/login"
            tw="flex items-center space-x-2 text-gray-400 text-sm hover:text-pink-500"
          >
            <Home tw="w-4 h-4" />
            <span>Go to Railway</span>
          </Link>
        </li>
      </ul>
    </header>
  );
};

export const MobileNav: React.FC = () => {
  const router = useRouter();
  const [isNavOpen, setIsNavOpen] = useState(false);

  const hide = useCallback(() => {
    setIsNavOpen(false);
  }, [setIsNavOpen]);

  useEffect(() => {
    // subscribe
    router.events.on("routeChangeStart", hide);

    // unsubscribe
    return () => router.events.off("routeChangeStart", hide);
  }, [hide, router.events]);

  return (
    <>
      <header
        css={[
          tw`flex items-center justify-between space-x-6 md:hidden`,
          tw`px-4 md:px-8 py-4 text-center`,
        ]}
      >
        <Link href="/">
          <Logo tw="w-10 h-10" />
        </Link>

        <div tw="w-full block">
          <OpenSearchModalButton />
        </div>

        <div tw="flex items-center space-x-4 md:space-x-4">
          <button
            tw=" w-6 h-6 md:w-4 md:h-4 cursor-pointer focus:outline-none"
            onClick={() => setIsNavOpen(!isNavOpen)}
          >
            {isNavOpen ? (
              <X width="100%" height="100%" />
            ) : (
              <Menu width="100%" height="100%" />
            )}
          </button>

          <div tw="flex items-center">
            <ThemeSwitcher />
          </div>
        </div>
      </header>

      <MobileSidebar isOpen={isNavOpen} />
    </>
  );
};



================================================
FILE: src/components/PageNav.tsx
================================================
import React, { useEffect, useState, useRef } from "react";
import tw, { TwStyle } from "twin.macro";
import { Link } from "./Link";
import { scrollToID } from "@/utils/scroll";

export interface Props {
  title: string;
}

interface IHeader {
  level: number;
  title: string;
  id: string;
  subHeaders: IHeader[];
}

const nodeNameToLevel: Record<string, number> = { H1: 1, H2: 2, H3: 3, H4: 4 };

const nodeToHeader = (node: HTMLHeadingElement): IHeader => ({
  level: nodeNameToLevel[node.nodeName],
  title: node.innerText,
  id: node.id,
  subHeaders: [],
});

const buildHeaderTreeRec = (
  nodes: HTMLHeadingElement[],
  elm: IHeader,
  level: number,
): IHeader[] => {
  const headers: IHeader[] = [];
  while (nodes.length > 0) {
    const h = nodeToHeader(nodes[0]);

    if (h.level === level) {
      headers.push(h);
      nodes.shift();
      elm = h;
    } else if (h.level > level) {
      elm.subHeaders = buildHeaderTreeRec(nodes, elm, h.level);
    } else {
      break;
    }
  }

  return headers;
};

const buildHeaderTree = (nodes: HTMLHeadingElement[]): IHeader[] => {
  if (nodes.length === 0) {
    return [];
  }

  const n = nodes[0];
  const h = nodeToHeader(n);

  return buildHeaderTreeRec(nodes, h, h.level);
};

export const PageNav: React.FC<Props> = ({ title }) => {
  const [headers, setHeaders] = useState<IHeader[]>([]);
  const [activeId, setActiveId] = useState<string>("");
  const [flatIds, setFlatIds] = useState<string[]>([]);
  const linkRefs = useRef<{ [id: string]: HTMLAnchorElement | null }>({});

  useEffect(() => {
    const documentHeaders = Array.from(
      document.querySelectorAll(".docs-content h2, h3, h4"),
    ) as HTMLHeadingElement[];
    setHeaders(buildHeaderTree(documentHeaders));
    setFlatIds(documentHeaders.map(h => h.id));
  }, [title]);

  useEffect(() => {
    const handleScroll = () => {
      const headings = Array.from(
        document.querySelectorAll(".docs-content h2, h3, h4")
      ) as HTMLHeadingElement[];
      const scrollPosition = window.scrollY + 100;
      let currentId = headings.length > 0 ? headings[0].id : "";
      for (const heading of headings) {
        if (heading.offsetTop <= scrollPosition) {
          currentId = heading.id;
        } else {
          break;
        }
      }
      setActiveId(currentId);
    };
    window.addEventListener("scroll", handleScroll, { passive: true });
    handleScroll();
    return () => window.removeEventListener("scroll", handleScroll);
  }, [title]);

  useEffect(() => {
    if (activeId && linkRefs.current[activeId]) {
      linkRefs.current[activeId]?.scrollIntoView({ block: "nearest", behavior: "smooth" });
    }
  }, [activeId]);

  return (
    <div tw="flex-col w-[300px] pt-4 pl-12 xl:pl-16 pr-0 pb-6 min-w-pageNav hidden lg:flex">
      {headers.length !== 0 && (
        <aside tw="sticky top-12 h-[100vh] relative">
          <div tw="overflow-y-auto h-full">
            <h5 tw="text-sm text-gray-900 font-medium mb-3">On This Page</h5>
            <ul tw="space-y-3">
              <HeaderList headers={headers} nesting={0} activeId={activeId} linkRefs={linkRefs.current} />
            </ul>
          </div>
        </aside>
      )}
    </div>
  );
};

const nestingTw: Record<number, TwStyle> = {
  0: tw`ml-0`,
  1: tw`ml-6`,
  2: tw`ml-10`,
};

const HeaderList: React.FC<{ headers: IHeader[]; nesting: number; activeId?: string; linkRefs?: { [id: string]: HTMLAnchorElement | null } }> = ({
  headers,
  nesting,
  activeId = "",
  linkRefs = {},
}) => {
  return (
    <>
      {headers.map((h, i) => {
        const isActive = h.id === activeId;
        return (
          <React.Fragment key={`${h.id}-${i}`}>
            <li key={h.id} css={[nestingTw[nesting]]}>
              <Link
                ref={el => { linkRefs[h.id] = el; }}
                css={[
                  tw`inline-block text-gray-600 text-sm`,
                  tw`hover:text-pink-500`,
                  isActive && tw`font-medium text-pink-500`,
                ]}
                href={`#${h.id}`}
                onClick={scrollToID(h.id)}
              >
                {h.title}
              </Link>
            </li>
            {h.subHeaders.length > 0 && (
              <HeaderList headers={h.subHeaders} nesting={nesting + 1} activeId={activeId} linkRefs={linkRefs} />
            )}
          </React.Fragment>
        );
      })}
    </>
  );
};



================================================
FILE: src/components/ScrollArea.tsx
================================================
import * as RadixScrollArea from "@radix-ui/react-scroll-area";
import React, { PropsWithChildren } from "react";
import tw, { styled } from "twin.macro";

export const ScrollArea: React.FC<PropsWithChildren> = ({ children }) => {
  return (
    <StyledScrollArea>
      <StyledViewport>{children}</StyledViewport>
      <StyledScrollbarY orientation="vertical">
        <StyledScrollThumb />
      </StyledScrollbarY>
    </StyledScrollArea>
  );
};

const StyledScrollArea = styled(RadixScrollArea.Root)`
  ${tw`relative w-full h-full`}
  z-index: 0;

  & [data-radix-scroll-area-position]::-webkit-scrollbar {
    display: none;
  }
`;

const StyledViewport = styled(RadixScrollArea.Viewport)`
  ${tw`relative max-w-full max-h-full`}
  z-index: 1;
`;

const StyledScrollbarY = styled(RadixScrollArea.Scrollbar)`
  ${tw`absolute select-none transition-opacity w-1 right-0 top-0 bottom-0`}
  z-index: 1;
`;

const StyledScrollThumb = styled(RadixScrollArea.Thumb)`
  ${tw`rounded-full select-none relative left-0 top-0 bg-gray-300`}
`;



================================================
FILE: src/components/SEO.tsx
================================================
import * as React from "react";
import { DefaultSeo, NextSeo, NextSeoProps } from "next-seo";
import Head from "next/head";
import { DefaultSeoProps } from "next-seo";

export interface Props extends NextSeoProps {
  title?: string;
  twitterTitle?: string;
  description?: string;
  image?: string;
  url?: string;
}

const title = "Railway Docs";
export const url = "https://docs.railway.com";
const description = "Documentation for Railway";
const image = "https://docs.railway.com/og.png";

const config: DefaultSeoProps = {
  title,
  description,
  openGraph: {
    type: "website",
    url,
    site_name: title,
    images: [{ url: image }],
  },
  twitter: {
    site: "@Railway",
    handle: "@Railway",
    cardType: "summary_large_image",
  },
};

export const SEO: React.FC<Props> = ({ image, ...props }) => {
  const title = props.title ?? config.title;
  const twitterTitle = props.twitterTitle;
  const description = props.description;
  const url = props.url || config.openGraph?.url;

  return (
    <>
      <DefaultSeo {...config} />

      <NextSeo
        {...props}
        {...(image == null
          ? {}
          : {
              openGraph: {
                url,
                description,
                site_name: title,
                images: [{ url: image }],
              },
            })}
      />

      <Head>
        <title>{title}</title>
        <meta name="twitter:title" content={twitterTitle} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:image" content={image} />
        <meta name="twitter:image:alt" content={twitterTitle} />
      </Head>
    </>
  );
};



================================================
FILE: src/components/Sidebar.tsx
================================================
import classNames from "classnames";
import { useRouter } from "next/router";
import React, { useMemo, useState, useEffect } from "react";
import tw from "twin.macro";
import { sidebarContent } from "../data/sidebar";
import { Link } from "./Link";
import { Logo } from "./Logo";
import { ScrollArea } from "./ScrollArea";
import { OpenSearchModalButton } from "@/components/Search";
import { ThemeSwitcher } from "./ThemeSwitcher";
import { IPage, ISubSection, IExternalLink, ISidebarSection } from "../types";
import SidebarItem from "./SidebarItem";

export const Sidebar: React.FC = ({ ...props }) => {
  return (
    <div
      css={[
        tw`hidden`,
        tw`md:h-screen md:sticky md:top-0 md:overflow-hidden md:block md:min-w-sidebar`,
        tw`md:border-r md:border-gray-200 bg-background`,
      ]}
      className="sidebar"
      {...props}
    >
      <ScrollArea>
        <div tw="pt-6 pb-6 px-4 sticky top-0 bg-background z-10">
          <div tw="flex items-center justify-between">
            <Link tw="w-full flex items-center" href="/">
              <div tw="flex items-center">
                <Logo tw="w-8 h-8 mr-4" /> <span tw="font-bold">Docs</span>
              </div>
            </Link>

            <ThemeSwitcher />
          </div>
        </div>

        <div tw="mx-4 mb-6">
          <OpenSearchModalButton />
        </div>

        <SidebarContent />
      </ScrollArea>
    </div>
  );
};

const SidebarContent: React.FC = () => {
  const {
    query: { slug },
    pathname,
  } = useRouter();

  const prefixedSlug = useMemo(
    () => (slug ? `/${(slug as string[] | undefined)?.join("/")}` : undefined),
    [slug],
  );

  const [expandedSubSections, setExpandedSubSections] = useState<string[]>([]); 
  const activeLinkRef = React.useRef<HTMLAnchorElement | null>(null);

  useEffect(() => {
    const newExpandedSubSections = findContainingSubSectionSlugs(sidebarContent, prefixedSlug ?? pathname);
    setExpandedSubSections(prevExpandedSubSections => Array.from(new Set([...prevExpandedSubSections, ...newExpandedSubSections])));
  }, [prefixedSlug]);
  
  useEffect(() => {
    if (activeLinkRef.current) {
      activeLinkRef.current.scrollIntoView({ block: "nearest", behavior: "smooth" });
    }
  }, [prefixedSlug]);
  

  const findContainingSubSectionSlugs = (sections: ISidebarSection[], currentPageSlug: string): string[] => {
    let slugs: string[] = [];
    for (const section of sections) {
      for (const item of section.content) {
        if ('subTitle' in item) {
          const subTitleSlug = typeof item.subTitle === 'string' ? item.subTitle : item.subTitle.slug;
          const hasMatchingChild = item.pages.some(p => 'slug' in p && p.slug === currentPageSlug);
          console.log('Checking subTitleSlug:', subTitleSlug, 'currentPageSlug:', currentPageSlug, 'childSlugs:', item.pages.filter(p => 'slug' in p).map(p => (p as IPage).slug));
          if (hasMatchingChild || subTitleSlug === currentPageSlug) {
            slugs.push(subTitleSlug);
          }
        }
      }
    }
    return slugs;
  }; 
  
  const isCurrentPage = (pageSlug: string) =>
    (prefixedSlug ?? pathname) === pageSlug;

  const isCurrentSection = (section: ISidebarSection ) => {
    const isDirectPageCurrent = section.content.some(item => 'slug' in item && isCurrentPage(item.slug));

    const isSubTitlePageCurrent = section.content.some(item => {
      if ('subTitle' in item) {
        const subTitleSlug = typeof item.subTitle === 'string' ? item.subTitle : item.subTitle.slug;
        return isCurrentPage(subTitleSlug);
      }
      return false;
    });

    const isSubSectionPageCurrent = section.content.some(item => 
      'subTitle' in item && item.pages.some(page => 'slug' in page && isCurrentPage(page.slug))
    );

    return isDirectPageCurrent || isSubTitlePageCurrent || isSubSectionPageCurrent;
  };
    
  const toggleSubSection = (subTitleSlug: string) => {
    setExpandedSubSections(prevState =>
      prevState.includes(subTitleSlug)
        ? prevState.filter(slug => slug !== subTitleSlug)
        : [...prevState, subTitleSlug]
    );
  };
  
  const renderContentItem = (item: IPage | ISubSection | IExternalLink) => {
    let itemSlug = '';

    if ('slug' in item) {
      itemSlug = item.slug;
     } else if ('subTitle' in item) {
      itemSlug = typeof item.subTitle === 'string' ? item.subTitle : item.subTitle.slug;
     } else if ('url' in item) {
      itemSlug = item.url;
     };
    
    const isActive = isCurrentPage(itemSlug);
    return (
      <SidebarItem
        key={itemSlug}
        item={item}
        isCurrentPage={isCurrentPage}
        isExpanded={expandedSubSections.includes(itemSlug)}
        onToggleSubSection={() => toggleSubSection(itemSlug)}
        activeLinkRef={isActive ? activeLinkRef : undefined}
      />
    );
  };

  return (
    <>
      {sidebarContent.map((section, i) => (
        <React.Fragment key={i}>
          {section.title != null && (
            <h5
              tw="px-4 my-2 text-foreground text-sm font-bold"
              className={classNames(
                isCurrentSection(section) && "current-section",
              )}
            >
              {section.title}
            </h5>
          )}

          <ul tw="mb-8">
            {section.content.map(renderContentItem)}
          </ul>
        </React.Fragment>
      ))}
    </>
  );
};

export const MobileSidebar: React.FC<{ isOpen: boolean }> = ({ isOpen }) => {
  return (
    <div css={[isOpen ? tw`block` : tw`hidden`, tw`w-full`, tw`md:hidden`]}>
      <SidebarContent />
    </div>
  );
};



================================================
FILE: src/components/SidebarItem.tsx
================================================
// SidebarLink.tsx
import React from 'react';
import classNames from 'classnames';
import { Link } from './Link';
import tw from 'twin.macro';
import { IPage, ISubSection, IExternalLink } from "../types";
import { Arrow } from '@/components/Arrow'

interface SidebarItemProps {
    item: IPage | ISubSection | IExternalLink;
    isCurrentPage: (pageSlug: string) => boolean;
    isExpanded: boolean;
    onToggleSubSection: () => void;
    activeLinkRef?: React.MutableRefObject<HTMLAnchorElement | null>;
  }

const SidebarItem: React.FC<SidebarItemProps> = ({ item, isCurrentPage, isExpanded, onToggleSubSection, activeLinkRef }) => {
  const externalLinkSvg = 
    <svg css={[tw`w-3 h-3 text-gray-700`]} aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 23 23">
        <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M15 11v4.833A1.166 1.166 0 0 1 13.833 17H2.167A1.167 1.167 0 0 1 1 15.833V4.167A1.166 1.166 0 0 1 2.167 3h4.618m4.447-2H17v5.768M9.111 8.889l7.778-7.778"/>
    </svg>;

  const renderExternalLink = (item: IExternalLink, isSubSectionItem=false) => {
    return (
      <li key={item.url} 
        css={[
          tw`flex items-center`, 
          tw`ml-2 pl-2`,
          tw`hover:bg-gray-100`,
          isSubSectionItem &&
            tw`ml-6`,
          ]}>
        <Link
          href={item.url}
          css={[
            tw`text-gray-700 text-sm flex-grow`, 
            tw`w-full py-2 hover:text-foreground`, 
            tw`flex justify-between items-center`
            ]}>
            <span>{item.title}</span>
            <span css={tw`mr-4 hover:svg:text-foreground`}>
              {externalLinkSvg}
            </span>
        </Link>
      </li>
    );
  };

  const renderPageLink = (item: IPage, isSubSectionItem=false) => {
    const isActive = isCurrentPage(item.slug);
    return (
      <li key={item.slug}>
        <Link
          href={item.slug}
          className={classNames(isActive && `current`)}
          ref={isActive ? activeLinkRef : undefined}
          css={[
            tw`text-gray-700 text-sm`,
            tw`block px-4 py-2`,
            tw`hover:bg-gray-100 hover:text-foreground`,
            tw`focus:outline-none focus:bg-pink-100`,
            isActive &&
              tw`bg-pink-100 text-pink-900 hover:bg-pink-100 border-r-2 border-pink-500`,
            isSubSectionItem &&
              tw`py-2 ml-6 pl-2`,
            ]}>
              {item.title}
        </Link>
      </li>
    );
  };

  const renderSubSection = (item: ISubSection) => {
    const renderSubtitle = (subTitle: string | IPage) => {
      const hasLanding = typeof subTitle != 'string';

      const subTitleContents = typeof subTitle === 'string' ? (
        <span
          onClick={onToggleSubSection}
          css={[
            tw`text-gray-700 flex-grow`,
            tw`hover:cursor-pointer`,
            tw`text-sm`,
            tw`pl-4 py-2`]}
        >
          {subTitle}
        </span>
      ) : (
        <Link
          className={classNames(isCurrentPage(subTitle.slug) && `current`)}
          href={subTitle.slug}
          onClick={onToggleSubSection}
          ref={isCurrentPage(subTitle.slug) ? activeLinkRef : undefined}
          css={[
            tw`text-gray-700 flex-grow text-sm hover:text-foreground`,
            tw`pl-4 py-2`,
            isCurrentPage(subTitle.slug) &&
              tw`bg-pink-100 text-pink-900 hover:bg-pink-100 border-pink-500`,
          ]}
        >
          {subTitle.title}
        </Link>
      );

      return ( 
        <div 
          css={[
            tw`flex justify-between items-center`,
            tw`hover:bg-gray-100`,
            tw`focus:outline-none focus:bg-pink-100`,
            tw`border-r-2 border-transparent`,
            hasLanding && isCurrentPage(subTitle.slug) &&
              tw`bg-pink-100 text-pink-900 hover:bg-pink-100 border-r-2 border-pink-500`,
            ]}
        >
          {subTitleContents}
          <button
            onClick={(e) => {
              e.stopPropagation();
              onToggleSubSection();
            }}
            css={[
              tw`pr-3 pl-2 py-2`,
              tw`hover:bg-gray-200 hover:border-y-2 hover:border-l-4 hover:border-gray-200`,
              tw`hover:svg:text-foreground text-gray-700`,
              hasLanding && isCurrentPage(subTitle.slug) &&
                tw`hover:bg-pink-200 hover:border-y-2 hover:border-l-4 hover:border-pink-200`,
            ]}
          >
            <Arrow isExpanded={isExpanded} />
          </button>
        </div>
        )
    };
    
    return (
      <li key={typeof item.subTitle === 'string' ? item.subTitle : item.subTitle.title}>
        {renderSubtitle(item.subTitle)}
        {isExpanded && (
          <ul>
            {item.pages.map(page => {
              if ('url' in page) {
                return renderExternalLink(page, true)
              } else {
                return renderPageLink(page, true)
              }
            })}
          </ul>
        )}
      </li>
    );
  };

  if ('url' in item) {
    return renderExternalLink(item);
  } else if ('subTitle' in item) {
    return renderSubSection(item);
  } else {
    return renderPageLink(item);
  };
  
 };

export default SidebarItem;



================================================
FILE: src/components/TallyButton.tsx
================================================
import React from "react";
import "twin.macro";
import { ArrowRight } from "react-feather";

interface ButtonProps {
  children: React.ReactNode;
}

export const TallyButton: React.FC<ButtonProps> = ({ children, ...props }) => (
  <button
    {...props}
    tw="block font-medium rounded shadow px-3 py-2 focus:outline-none bg-gray-100 border-gray-100 text-gray-800 hover:bg-gray-200"
  >
    <div tw="flex flex-row justify-center items-center font-semibold">
      <ArrowRight tw="mr-1" />
      {children}
    </div>
  </button>
);



================================================
FILE: src/components/ThemeSwitcher.tsx
================================================
import React from "react";
import { Moon, Sun } from "react-feather";
import "twin.macro";
import { useIsMounted } from "../hooks/useIsMounted";
import { useTheme } from "../styles/theme";

export const ThemeSwitcher: React.FC = () => {
  const { colorMode, setColorMode } = useTheme();
  const toggleColorMode = () =>
    setColorMode(colorMode === "dark" ? "light" : "dark");

  const isMounted = useIsMounted();

  return (
    <>
      {isMounted && (
        <button
          tw="w-5 h-5 md:w-4 md:h-4 cursor-pointer focus:outline-none"
          onClick={toggleColorMode}
        >
          {colorMode === "dark" ? (
            <Sun width="100%" height="100%" />
          ) : (
            <Moon width="100%" height="100%" />
          )}
        </button>
      )}
    </>
  );
};



================================================
FILE: src/components/CodeBlock/index.tsx
================================================
import React, { useMemo } from "react";
import { CheckCircle, Copy } from "react-feather";
import { PrismLight as SyntaxHighlighter } from "react-syntax-highlighter";
import bash from "react-syntax-highlighter/dist/cjs/languages/prism/bash";
import graphql from "react-syntax-highlighter/dist/cjs/languages/prism/graphql";
import javascript from "react-syntax-highlighter/dist/cjs/languages/prism/javascript";
import json from "react-syntax-highlighter/dist/cjs/languages/prism/json";
import toml from "react-syntax-highlighter/dist/cjs/languages/prism/toml";
import typescript from "react-syntax-highlighter/dist/cjs/languages/prism/typescript";
import go from "react-syntax-highlighter/dist/cjs/languages/prism/go";
import ruby from "react-syntax-highlighter/dist/cjs/languages/prism/ruby";
import php from "react-syntax-highlighter/dist/cjs/languages/prism/php";
import java from "react-syntax-highlighter/dist/cjs/languages/prism/java";
import elixir from "react-syntax-highlighter/dist/cjs/languages/prism/elixir";
import python from "react-syntax-highlighter/dist/cjs/languages/prism/python";
import rust from "react-syntax-highlighter/dist/cjs/languages/prism/rust";
import clojure from "react-syntax-highlighter/dist/cjs/languages/prism/clojure";
import scala from "react-syntax-highlighter/dist/cjs/languages/prism/scala";
import css from "react-syntax-highlighter/dist/cjs/languages/prism/css";
import docker from "react-syntax-highlighter/dist/cjs/languages/prism/docker";


import "twin.macro";
import { useCopy } from "../../hooks/useCopy";
import { darkCodeTheme, lightCodeTheme } from "../../styles/codeThemes";
import { useTheme } from "../../styles/theme";
import { Icon } from "../Icon";
import { normalize } from "./normalize";
import { useIsMounted } from "@/hooks/useIsMounted";

SyntaxHighlighter.registerLanguage("js", javascript);
SyntaxHighlighter.registerLanguage("javascript", javascript);
SyntaxHighlighter.registerLanguage("bash", bash);
SyntaxHighlighter.registerLanguage("toml", toml);
SyntaxHighlighter.registerLanguage("json", json);
SyntaxHighlighter.registerLanguage("graphql", graphql);
SyntaxHighlighter.registerLanguage("typescript", typescript);
SyntaxHighlighter.registerLanguage("go", go);
SyntaxHighlighter.registerLanguage("ruby", ruby);
SyntaxHighlighter.registerLanguage("php", php);
SyntaxHighlighter.registerLanguage("java", java);
SyntaxHighlighter.registerLanguage("elixir", elixir);
SyntaxHighlighter.registerLanguage("python", python);
SyntaxHighlighter.registerLanguage("rust", rust);
SyntaxHighlighter.registerLanguage("clojure", clojure);
SyntaxHighlighter.registerLanguage("scala", scala);
SyntaxHighlighter.registerLanguage("css", css);
SyntaxHighlighter.registerLanguage("docker", docker);


export type SupportedLanguage =
  | "javascript"
  | "bash"
  | "json"
  | "toml"
  | "graphql"
  | "typescript"
  | "go"
  | "ruby"
  | "php"
  | "java"
  | "elixir"
  | "python"
  | "rust"
  | "clojure"
  | "scala"
  | "css"
  | "docker";

export interface Props {
  language?: string;
  className?: string;
  children?: any;
  colorModeSSR?: string | null;
}

const getParams = (
  className = "",
): {
  language?: string;
  for?: string;
  always?: boolean;
} => {
  const [language, params = ""] = className.split(":");

  const splitParams = params
    .split("&")
    .reduce<Record<string, string>>((merged, param) => {
      const [key, value] = param.split("=");
      if (key !== "") {
        merged[key] = value ?? true;
      }

      return merged;
    }, {});

  return {
    language: language.split("language-")[1],
    ...splitParams,
  };
};

export const CodeBlock: React.FC<Props> = ({
  children,
  className = children.props ? children.props.className : "",
  language,
  colorModeSSR,
}) => {
  const [copied, copy] = useCopy();

  const params = useMemo(() => getParams(className), [className]);

  const lang = useMemo(
    () => language ?? params.language ?? "bash",
    [language, params],
  );

  const { content } = useMemo(
    () =>
      normalize(
        children != null &&
          typeof children !== "string" &&
          children.props &&
          children.props.children
          ? children.props.children
          : children ?? "",
        className,
      ),
    [children],
  );

  const isMounted = useIsMounted();

  const colorMode = !isMounted ? colorModeSSR || "light" : useTheme().colorMode;

  const theme = colorMode === "light" ? lightCodeTheme : darkCodeTheme;

  return (
    <div tw="relative" className="group">
      <SyntaxHighlighter
        language={lang}
        style={theme}
        data-colormode={colorMode}
      >
        {content}
      </SyntaxHighlighter>
      <div tw="absolute top-0 right-0 mr-1 mt-1 text-gray-300 hover:text-gray-400 hidden group-hover:flex">
        {copied ? (
          <div tw="p-1">
            <Icon icon={CheckCircle} size="sm" />
          </div>
        ) : (
          <button
            tw="focus:ring-0 hover:bg-gray-200 p-1 rounded-md"
            type="button"
            onClick={() => copy(content)}
          >
            <Icon icon={Copy} size="sm" />
          </button>
        )}
      </div>
    </div>
  );
};



================================================
FILE: src/components/CodeBlock/normalize.ts
================================================
// https://github.com/gatsbyjs/gatsby/blob/561d33e2e491d3971cb2a404eec9705a5a493602/www/src/components/code-block/normalize.js

const COMMENT_START = new RegExp(`(#|\\/\\/|\\{\\/\\*|\\/\\*+|<!--)`);

const createDirectiveRegExp = (featureSelector: string) =>
  new RegExp(`${featureSelector}-(next-line|line|start|end|range)({([^}]+)})?`);

const COMMENT_END = new RegExp(`(-->|\\*\\/\\}|\\*\\/)?`);
const DIRECTIVE = createDirectiveRegExp(`(highlight|hide)`);
const HIGHLIGHT_DIRECTIVE = createDirectiveRegExp(`highlight`);
const HIDE_DIRECTIVE = createDirectiveRegExp(`hide`);

const END_DIRECTIVE: Record<string, RegExp> = {
  highlight: /highlight-end/,
  hide: /hide-end/,
};

const stripComment = (line: string) =>
  /**
   * This regexp does the following:
   * 1. Match a comment start, along with the accompanying PrismJS opening comment span tag;
   * 2. Match one of the directives;
   * 3. Match a comment end, along with the accompanying PrismJS closing span tag.
   */
  line.replace(
    new RegExp(
      `\\s*(${COMMENT_START.source})\\s*${DIRECTIVE.source}\\s*(${COMMENT_END.source})`,
    ),
    ``,
  );

const containsDirective = (line: string) =>
  [HIDE_DIRECTIVE, HIGHLIGHT_DIRECTIVE].some(expr => expr.test(line));

/*
 * This parses the {1-3} syntax range that is sometimes used
 */
const getInitialFilter = (className: string, split: string[]) => {
  const lineNumberExpr = /{([^}]+)/;
  const [, match] = className.match(lineNumberExpr) || [];
  if (match) {
    const lookup = match
      .split(/,\s*/)
      .reduce<Record<number, boolean>>((merged, range) => {
        const [start, end = start]: number[] = range
          .split(`-`)
          .map(num => parseInt(num, 10));

        for (let i = start; i <= end; i++) {
          merged[i - 1] = true;
        }
        return merged;
      }, {});
    return split.map((line, index) => {
      return {
        code: line,
        highlighted: !!lookup[index],
      };
    });
  }
  return [];
};

interface NormalizeResult {
  content: string;
  filteredLines: Record<number, boolean>;
}

/*
 * This function will output the normalized content (stripped of comment directives)
 * alongside a lookup of filtered lines
 * https://github.com/gatsbyjs/gatsby/blob/dad0628f274f1c61853f3177573bb17a79e4a540/packages/gatsby-remark-prismjs/src/directives.js
 */
export const normalize = (content: string, className = ``): NormalizeResult => {
  const split = content.split(`\n`);
  let filtered = getInitialFilter(className, split);

  if (filtered.length === 0) {
    for (let i = 0; i < split.length; i++) {
      const line = split[i];
      if (containsDirective(line)) {
        const [, keyword, directive] = line.match(DIRECTIVE)!;
        switch (directive) {
          case `start`: {
            const endIndex = split
              .slice(i + 1)
              .findIndex(line => END_DIRECTIVE[keyword].test(line));

            const end = endIndex === -1 ? split.length : endIndex + i;

            if (keyword === `highlight`) {
              filtered = filtered.concat(
                split
                  .slice(i, end + 1)
                  .reduce<{ code: string; highlighted: boolean }[]>(
                    (merged, line) => {
                      const code = stripComment(line);
                      if (code) {
                        merged.push({
                          code,
                          highlighted: true,
                        });
                      }
                      return merged;
                    },
                    [],
                  ),
              );
            }

            i = end;
            break;
          }
          case `line`: {
            const code = stripComment(line);
            if (keyword === `highlight` && code) {
              filtered.push({
                code,
                highlighted: true,
              });
            }
            break;
          }
          case `next-line`: {
            const code = stripComment(line);
            if (keyword === `highlight`) {
              filtered = filtered.concat(
                [
                  {
                    code,
                    highlighted: false,
                  },
                  {
                    code: stripComment(split[i + 1]),
                    highlighted: true,
                  },
                ].filter(line => line.code),
              );
            } else if (keyword === `hide` && code) {
              filtered.push({
                code,
                highlighted: false,
              });
            }
            i += 1;
            break;
          }
          default: {
            break;
          }
        }
      } else {
        filtered.push({
          code: line,
          highlighted: false,
        });
      }
    }
  }

  return {
    content: filtered
      .map(({ code }) => code)
      .join(`\n`)
      .trim(),
    filteredLines: filtered.reduce<Record<number, boolean>>(
      (lookup, { highlighted }, index) => {
        if (highlighted) {
          lookup[index] = true;
        }
        return lookup;
      },
      {},
    ),
  };
};



================================================
FILE: src/components/Search/index.tsx
================================================
import SearchModal from "./Modal";
import OpenSearchModalButton from "./OpenModalButton";

export { SearchModal, OpenSearchModalButton };



================================================
FILE: src/components/Search/Modal.tsx
================================================
import { useDebouncedSearch } from "@/hooks/useDebouncedSearch";
import { LoadingIndicator } from "@/components/LoadingIndicator";
import { Search } from "@/types";
import React from "react";
import tw from "twin.macro";
import NoResults from "./NoResults";
import QueryInput from "./QueryInput";
import Results from "./Results";

interface Props {
  closeModal: () => void;
}

const Modal: React.FC<Props> = ({ closeModal }) => {
  const searchParams = {
    limit: 10,
    attributesToHighlight: ["*"],
    highlightPreTag: "<span>",
    highlightPostTag: "</span>",
  };
  const { clearResponse, isSearching, query, setQuery, results } =
    useDebouncedSearch<Search.Document, Search.Result>(
      process.env.NEXT_PUBLIC_MEILISEARCH_HOST ?? "",
      process.env.NEXT_PUBLIC_MEILISEARCH_READ_API_KEY ?? "",
      process.env.NEXT_PUBLIC_MEILISEARCH_INDEX_NAME ?? "",
      searchParams,
      200,
    );

  return (
    <div
      css={[tw`px-2 mt-12 mb-12`, `sm:px-4`, `md:px-0 md:mt-28 md:mb-28`]}
      onPointerDown={() => {
        closeModal();
      }}
    >
      <div
        onPointerDown={e => e.stopPropagation()}
        css={[tw`bg-background border rounded-lg w-full md:w-1/2 mx-auto`]}
      >
        <div className="search-input">
          <QueryInput
            clearResponse={clearResponse}
            query={query}
            setQuery={setQuery}
          />
        </div>
        <div className="search-results">
          {isSearching ? (
            <span tw="p-10 flex items-center justify-center">
              <LoadingIndicator />
            </span>
          ) : results ? (
            Object.keys(results).length === 0 ? (
              <NoResults />
            ) : (
              <Results closeModal={closeModal} results={results} />
            )
          ) : (
            <></>
          )}
        </div>
      </div>
    </div>
  );
};

export default Modal;



================================================
FILE: src/components/Search/NoResults.tsx
================================================
import { RailwayIcon } from "@/components/Icons";
import { Link } from "@/components/Link";
import React from "react";
import { HelpCircle, Mail } from "react-feather";
import tw, { styled } from "twin.macro";

const ContactButton = styled(Link)`
  ${[
    tw`flex flex-row items-center gap-2 p-2`,
    tw`border border-solid rounded-lg`,
    tw`hover:bg-pink-100`,
    tw`[&>svg]:w-8`,
    tw`[&>svg]:h-8`,
  ]}
`;

const NoResults: React.FC = () => {
  return (
    <div css={[tw`flex flex-col items-center justify-center mb-4`]}>
      <HelpCircle size={64} css={tw`mt-8 mb-4`} />
      <div css={tw`flex flex-col items-center justify-center p-4`}>
        <p css={tw`font-bold mb-4 text-center`}>
          We couldn't find what you're searching for.
        </p>
        <div>
          <p css={tw`mb-4 text-center`}>Reach out to us if you need help:</p>
          <div css={tw`flex flex-row gap-4 items-center justify-center`}>
            <ContactButton href="https://station.railway.com/">
              <RailwayIcon />
              Railway Central Station
            </ContactButton>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NoResults;



================================================
FILE: src/components/Search/OpenModalButton.tsx
================================================
import { searchStore } from "@/store";
import React from "react";
import { Search as SearchIcon } from "react-feather";
import tw from "twin.macro";

const OpenModalButton: React.FC = () => {
  return (
    <>
      <button
        onClick={() => searchStore.set(true)}
        css={[
          tw`flex items-center justify-between space-x-4 w-full`,
          tw`rounded border border-gray-200 cursor-pointer`,
          tw`px-2 py-2 md:py-1 text-gray-300 text-left`,
          tw`focus:outline-none md:hover:border-pink-300`,
        ]}
      >
        <div tw="flex items-center space-x-2">
          <SearchIcon tw="w-4 h-4" />
          <span tw="text-sm">Search</span>
        </div>
        <div tw="text-gray-300 text-sm hidden md:block">⌘K</div>
      </button>
    </>
  );
};

export default OpenModalButton;



================================================
FILE: src/components/Search/QueryInput.tsx
================================================
import React from "react";
import { Search as SearchIcon } from "react-feather";
import tw from "twin.macro";
import { Icon } from "../Icon";

interface Props {
  clearResponse: () => void;
  query: string;
  setQuery: (q: string) => void;
}

const QueryInput: React.FC<Props> = ({ clearResponse, query, setQuery }) => {
  return (
    <div css={tw`flex flex-col`}>
      <form css={tw`flex flex-row`}>
        <span css={tw`flex items-center px-3`}>
          <SearchIcon css={tw`w-4 text-gray-300`} />
        </span>
        <input
          autoFocus
          css={tw`w-full focus:outline-none bg-transparent`}
          type="text"
          placeholder="Search"
          value={query}
          onChange={e => setQuery(e.target.value)}
        />
        <span css={tw`flex items-center py-2 pr-4`}>
          <button
            css={[
              tw`flex items-center justify-center w-14 h-8 `,
              tw`rounded border border-solid rounded-lg`,
              tw`text-black text-sm dark:text-white`,
              tw`hover:bg-gray-100`,
            ]}
            onClick={e => {
              e.preventDefault();
              clearResponse();
            }}
          >
            <span css={tw`text-gray-500`}>Clear</span>
          </button>
        </span>
      </form>
    </div>
  );
};

export default QueryInput;



================================================
FILE: src/components/Search/Results.tsx
================================================
import { Link } from "@/components/Link";
import { Search } from "@/types";
import { Markup } from "interweave";
import { useRouter } from "next/router";
import React, { useCallback, useEffect, useState } from "react";
import tinykeys from "tinykeys";
import tw from "twin.macro";

interface Props {
  closeModal: () => void;
  results: Search.Result;
}

type SelectedResult = { idx: number; slug: string };

const withoutBaseUri = (slug: string) => {
  const url = new URL(slug);
  const { hash, pathname } = url;
  return `${pathname}${hash}`;
};

// @FIXME: Indexer is grabbing #__next from anchor hrefs. This should be
// fixed upstream, but no harm in just hacking it in place for now.
const cleanSlug = (slug: string) => withoutBaseUri(slug.replace("#__next", ""));

const Results: React.FC<Props> = ({ closeModal, results }) => {
  const router = useRouter();

  // A result is selected when navigated to using arrow keys, or on mouse
  // hover.
  const [selectedResult, setSelectedResult] = useState<SelectedResult | null>(
    null,
  );

  const resultsFlat: SelectedResult[] = Object.values(results)
    .flat()
    .map((r, idx) => ({ idx, slug: cleanSlug(r.slug) }));

  const onArrowKeyDown = useCallback(() => {
    if (selectedResult && selectedResult.idx + 1 >= resultsFlat.length) {
      // End of results; nothing to go down from.
      return;
    }

    setSelectedResult(prev => {
      // On key down, go to the next item.
      const next = prev ? resultsFlat[prev.idx + 1] : resultsFlat[0];
      return { ...next };
    });
  }, [resultsFlat, selectedResult, setSelectedResult]);

  const onArrowKeyUp = useCallback(() => {
    setSelectedResult(prev => {
      if (prev === null || prev.idx === 0) {
        // Start of results. Going up from here is the search input, so it's
        // a no-op.
        return null;
      }
      // On key up, go to the previous item.
      const next = prev ? resultsFlat[prev.idx - 1] : resultsFlat[0];
      return { ...next };
    });
  }, [resultsFlat, setSelectedResult]);

  const onEnter = useCallback(() => {
    if (selectedResult === null) {
      return;
    }
    closeModal();
    router.push(selectedResult.slug);
  }, [closeModal, router, selectedResult]);

  useEffect(() => {
    const unsubscribe = tinykeys(window, {
      ArrowDown: () => onArrowKeyDown(),
      ArrowUp: () => onArrowKeyUp(),
      Enter: () => onEnter(),
    });
    return () => unsubscribe();
  }, [onArrowKeyDown, onArrowKeyUp, onEnter]);

  return (
    <div css={tw`border-t pt-4`}>
      {Object.entries(results).map(([chapter, hits]) => {
        return (
          <div
            key={chapter}
            css={[tw`flex flex-col`, tw`rounded-lg pb-4 px-4`]}
          >
            <h4 css={[tw`font-medium text-[16px] mb-3 text-gray-500`]}>
              {/* // some chapters are null, display the first hierarchy as a fallback instead of the literal word "null" */}
              {chapter == "null" ? hits[0]?.hierarchies[0] : chapter}
            </h4>
            <ul>
              {hits.map(h => {
                const slug = cleanSlug(h.slug);
                const isSelected = selectedResult?.slug === slug;
                return (
                  <li
                    key={slug}
                    css={tw`flex flex-col mb-2`}
                    onMouseEnter={() => {
                      if (isSelected) {
                        return;
                      }
                      const result = resultsFlat.find(r => r.slug === slug);
                      if (!result) {
                        return;
                      }
                      setSelectedResult(result);
                    }}
                  >
                    <Link
                      href={slug}
                      onClick={closeModal}
                      css={[
                        tw`flex flex-col font-medium px-4 py-3 rounded rounded-lg bg-gray-100 transition ease-out`,
                        isSelected && tw`bg-gray-200`,
                      ]}
                    >
                      <div
                        css={[
                          tw`flex flex-col justify-center h-8`,
                          tw`font-semibold text-[16px] truncate text-ellipsis`,
                        ]}
                      >
                        {h.hierarchies.join(" -> ")}
                      </div>
                      {h.text !== "" && (
                        <span
                          css={[
                            tw`leading-[1.6] text-gray-500 dark:text-gray-600 font-light mt-1`,
                            tw`[&>.rendered span]:bg-yellow-200`,
                            tw`[&>.rendered span]:text-black`,
                            tw`[&>.rendered span]:dark:text-white`,
                            isSelected && tw`text-gray-800 dark:text-gray-700`,
                          ]}
                        >
                          <Markup className="rendered" content={h.text} />
                        </span>
                      )}
                    </Link>
                  </li>
                );
              })}
            </ul>
          </div>
        );
      })}
    </div>
  );
};

export default Results;



================================================
FILE: src/config/index.ts
================================================
export const RAILWAY_DOCS_URL = process.env.NEXT_PUBLIC_RAILWAY_DOCS_URL;


================================================
FILE: src/data/sidebar.ts
================================================
import { IPage, ISidebarContent } from "../types";
import { slugify } from "@/utils/slugify";

const makePage = (title: string, category?: string, slug?: string): IPage => ({
  title,
  category,
  slug: (() => {
    if (slug) {
      return slug.startsWith('/') ? slug : '/' + slug;
    }

    return '/' + (category ? category + '/' : '') + slugify(title);
  })(),
});

export const sidebarContent: ISidebarContent = [
  // The goal is to have the docs be in a narrative structure
  {
    title: "",
    content: [
      makePage("Home", undefined, "/"),
      makePage("Quick Start", undefined),
      makePage("Railway Metal", undefined),
    ],
  },
  {
    title: "Overview",
    content: [
      makePage("About Railway", "overview"),
      makePage("The Basics", "overview"),
      makePage("Best Practices", "overview"),
      makePage("Advanced Concepts", "overview"),
    ],
  },
  {
    title: "Guides",
    content: [
      {
        subTitle: makePage("Foundations", "guides"),
        pages: [
          makePage("Projects", "guides"),
          makePage("Staged Changes", "guides"),
          makePage("Services", "guides"),
          makePage("Variables", "guides"),
          makePage("Volumes", "guides"),
          makePage("Environments", "guides"),
          makePage("CLI", "guides"),
          makePage("Join Priority Boarding!", "guides"),
        ],
      },
      {
        subTitle: makePage("Languages & Frameworks", "guides"),
        pages: [
          makePage("Express", "guides"),
          makePage("Nest", "guides"),
          makePage("Fastify", "guides"),
          makePage("FastAPI", "guides"),
          makePage("Flask", "guides"),
          makePage("Beego", "guides"),
          makePage("Gin", "guides"),
          makePage("Rails", "guides"),
          makePage("Axum", "guides"),
          makePage("Rocket", "guides"),
          makePage("Laravel", "guides"),
          makePage("Symfony", "guides"),
          makePage("Luminus", "guides"),
          makePage("Play", "guides"),
          makePage("Sails", "guides"),
          makePage("Django", "guides"),
          makePage("Angular", "guides"),
          makePage("React", "guides"),
          makePage("Remix", "guides"),
          makePage("Vue", "guides"),
          makePage("Nuxt", "guides"),
          makePage("Spring Boot", "guides"),
          makePage("Astro", "guides"),
          makePage("SvelteKit", "guides"),
          makePage("Solid", "guides"),
          makePage("Phoenix", "guides"),
          makePage("Phoenix Distillery", "guides"),
        ],
      },
      {
        subTitle: makePage("Networking", "guides"),
        pages: [
          makePage("Public Networking", "guides"),
          makePage("Private Networking", "guides"),
        ],
      },
      {
        subTitle: makePage("Builds", "guides"),
        pages: [
          makePage("Build Configuration", "guides"),
          makePage("Dockerfiles", "guides"),
        ],
      },
      {
        subTitle: makePage("Deployments", "guides"),
        pages: [
          makePage("Pre-Deploy Command", "guides"),
          makePage("Start Command", "guides"),
          makePage("Deployment Actions", "guides"),
          makePage("GitHub Autodeploys", "guides"),
          makePage("Optimize Performance", "guides"),
          makePage("Healthchecks", "guides"),
          makePage("Restart Policy", "guides"),
          makePage("Deployment Teardown", "guides"),
          makePage("Monorepo", "guides"),
          makePage("Cron Jobs", "guides"),
          makePage("Optimize Usage", "guides"),
        ],
      },
      {
        subTitle: makePage("Databases", "guides"),
        pages: [
          makePage("Build a Database Service", "guides"),
          makePage("PostgreSQL", "guides"),
          makePage("MySQL", "guides"),
          makePage("Redis", "guides"),
          makePage("MongoDB", "guides"),
          makePage("Database View", "guides"),
        ],
      },
      {
        subTitle: makePage("Monitoring", "guides"),
        pages: [
          makePage("Logs", "guides"),
          makePage("Observability", "guides"),
          makePage("Metrics", "guides"),
          makePage("Webhooks", "guides"),
        ],
      },
      {
        subTitle: makePage("Templates", "guides"),
        pages: [
          makePage("Create", "guides"),
          makePage("Best Practices", "guides", "/guides/templates-best-practices"),
          makePage("Publish and Share", "guides"),
          makePage("Deploy", "guides"),
        ],
      },
      {
        subTitle: makePage("Public API", "guides"),
        pages: [
          makePage("Manage Projects", "guides"),
          makePage("Manage Services", "guides"),
          makePage("Manage Deployments", "guides"),
          makePage("Manage Variables", "guides"),
        ],
      },
      makePage("Config as Code", "guides"),
    ],
  },
  {
    title: "Tutorials",
    content: [
      makePage("Getting Started", "tutorials"),
      {
        subTitle: "Self Hosted Applications",
        pages: [
          {
            title: "Deploy Offen",
            url: "https://blog.railway.com/p/offen-web-analytics",
          },
        ],
      },
      {
        subTitle: "Technical Tutorials",
        pages: [
          {
            title: "Queues on Railway",
            url: "https://blog.railway.com/p/queues",
          },
          makePage("Set Up a Datadog Agent", "tutorials"),
          makePage("Deploy an Otel Collector Stack", "tutorials"),
          makePage("Deploy and Monitor Mongo", "tutorials"),
          makePage("Add a CDN using CloudFront", "tutorials"),
          makePage("Deploying a Monorepo", "tutorials"),
          makePage("Proximity Steering", "tutorials"),
          makePage("Set up a Tailscale Subnet Router", "tutorials"),
          makePage("Bridge Railway to RDS with Tailscale", "tutorials"),
        ],
      },
      {
        subTitle: "Database Backup Tutorials",
        pages: [
          {
            title: "Backing Up Redis",
            url: "https://blog.railway.com/p/redis-backup",
          },
          {
            title: "Backing Up Postgres",
            url: "https://blog.railway.com/p/postgre-backup",
          },
        ],
      },
      {
        subTitle: "GitHub Actions",
        pages: [
          {
            title: "Deploy with Railway",
            url: "https://blog.railway.com/p/github-actions",
          },
          makePage("Post-Deploy", "tutorials", "tutorials/github-actions-post-deploy"),
          makePage("PR Environment", "tutorials", "tutorials/github-actions-pr-environment"),
          makePage("Self Hosted Runners", "tutorials", "tutorials/github-actions-runners"),
          {
            title: "Implementing a Testing Suite",
            url: "https://blog.railway.com/p/implementing-gh-actions-testing",
          },
        ],
      },
      {
        subTitle: "Gitlab",
        pages: [
          {
            title: "Gitlab CI/CD with Railway",
            url: "https://blog.railway.com/p/gitlab-ci-cd",
          }
        ],
      },
    ],
  },
  {
    title: "Reference",
    content: [
      {
        subTitle: makePage("Errors", "/reference/errors", "/reference/errors"),
        pages: [
          makePage("Application Failed to Respond", "reference/errors"),
          makePage("No Start Command Could Be Found", "reference/errors"),
          makePage("405 Method Not Allowed", "reference/errors"),
          makePage(
            "Unable to Generate a Build Plan",
            "reference/errors",
            "reference/errors/nixpacks-was-unable-to-generate-a-build-plan",
          ),
          makePage(
            "ENOTFOUND redis.railway.internal",
            "reference/errors",
            "reference/errors/enotfound-redis-railway-internal",
          ),
        ],
      },
      {
        subTitle: "Develop",
        pages: [
          makePage("Databases", "reference"),
          makePage("Environments", "reference"),
          makePage("Projects", "reference"),
          makePage("Services", "reference"),
          makePage("Variables", "reference"),
          makePage("Volumes", "reference"),
          makePage("Functions", "reference"),
        ],
      },
      {
        subTitle: "Deploy",
        pages: [
          makePage("App Sleeping", "reference"),
          makePage("Build and Start Commands", "reference"),
          makePage("Config as Code", "reference"),
          makePage("Cron Jobs", "reference"),
          makePage("Deployments", "reference"),
          makePage("Deployment Regions", "reference"),
          makePage("Dockerfiles", "reference"),
          makePage("Healthchecks", "reference"),
          makePage("Backups", "reference"),
          makePage("Integrations", "reference"),
          makePage("Nixpacks", "reference"),
          makePage("Private Networking", "reference"),
          makePage("Public Networking", "reference"),
          makePage("Static Outbound IPs", "reference"),
          makePage("Scaling", "reference"),
          makePage("TCP Proxy", "reference"),
        ],
      },
      {
        subTitle: "Monitoring",
        pages: [
          makePage("Logging", "reference"),
          makePage("Metrics", "reference"),
          makePage("Webhooks", "reference"),
        ],
      },
      {
        subTitle: "Operations",
        pages: [
          makePage("Accounts", "reference"),
          makePage("Priority Boarding", "reference"),
          makePage("Project Members", "reference"),
          makePage("Project Usage", "reference"),
          makePage("Support", "reference"),
          makePage("Teams", "reference"),
          makePage("Usage Limits", "reference"),
        ],
      },
      makePage("CLI API", "reference"),
      makePage("Public API", "reference"),
      makePage("Templates", "reference"),
      {
        subTitle: "Pricing",
        pages: [
          makePage("Plans", "reference/pricing"),
          makePage("Free Trial", "reference/pricing"),
          makePage("FAQs", "reference/pricing"),
          makePage("Refunds", "reference/pricing"),
          makePage("AWS Marketplace", "reference/pricing"),
        ],
      },
      makePage("Migrate to Railway Metal", "reference"),
      makePage("Production Readiness Checklist", "reference"),
    ],
  },
  {
    title: "Maturity",
    content: [
      makePage("Philosophy", "maturity"),
      makePage("Use Cases", "maturity"),
      makePage("Compliance", "maturity"),
      makePage("Incident Management", "maturity"),
      makePage("Compare to Heroku", "maturity"),
      makePage("Compare to Render", "maturity"),
      makePage("Compare to Fly", "maturity"),
      makePage("Compare to Vercel", "maturity"),
      makePage("Compare to DigitalOcean", "maturity"),
    ],
  },
  {
    title: "Migration",
    content: [
      makePage("Migrate from Render", "migration"),
      makePage("Migrate from Fly", "migration"),
      makePage("Migrate from Vercel", "migration"),
      makePage("Migrate from DigitalOcean", "migration"),
      makePage("Migrate from Heroku", "migration"),
    ],
  },
  {
    title: "Community",
    content: [
      makePage("The Conductor Program", "community"),
      makePage("Affiliate Program", "community"),
    ],
  },
];



================================================
FILE: src/docs/quick-start.md
================================================
---
title: Quick Start Tutorial
description: Get started with Railway in minutes! This Quick Start tutorial walks you through deploying your first app via GitHub, the CLI, a Docker image, or a template.
---

Railway is a deployment platform that lets you provision infrastructure, develop locally with that infrastructure, and deploy to the cloud or simply run ready-made software from our template marketplace.

**In this guide we will cover two different topics to get you quickly started with the platform -**

1. **Deploying your project** - Bring your code and let Railway handle the rest.

    **[Option 1](/quick-start#deploying-your-project---from-github)**  - Deploying from **GitHub**.

    **[Option 2](/quick-start#deploying-your-project---with-the-cli)** - Deploying with the **[CLI](/guides/cli)**.

    **[Option 3](/quick-start#deploying-your-project---from-a-docker-image)** - Deploying from a **Docker Image**.

3. **Deploying a <a href="reference/templates" target="_blank">template</a>** - Ideal for deploying pre-configured software with minimal effort.

To demonstrate deploying directly from a GitHub repository through Railway's dashboard, we'll be using a basic <a href="https://github.com/railwayapp-templates/nextjs-basic" target="_blank">NextJS app</a> that was prepared for this guide.


For the template deployment, we'll use the <a href="https://railway.com/template/umami-analytics" target="_blank">Umami template</a> from our <a href="https://railway.com/templates" target="_blank">template marketplace</a>.

## Deploying Your Project - From GitHub

If this is your first time deploying code on Railway, we recommend <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo" target="_blank">forking</a> the previously mentioned <a href="https://github.com/railwayapp-templates/nextjs-basic" target="_blank">NextJS app</a>'s repository so that you can follow along.

To get started deploying our NextJS app, we will first make a new <a href="/overview/the-basics#project--project-canvas" target="_blank">project</a>.

- Open up the <a href="/overview/the-basics#dashboard--projects" target="_blank">dashboard</a> → Click **New Project**.

- Choose the **GitHub repo** option.

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752559/docs/quick-start/new_project_uyqqpx.png"
alt="screenshot of new project menu with deploy from github selected"
layout="responsive"
width={836} height={860} quality={100} />

*Railway requires a valid GitHub account to be linked. If your Railway account isn't associated with one, you will be prompted to link it.*

- Search for your GitHub project and click on it.

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752559/docs/quick-start/new_github_project_pzvabz.png"
alt="screenshot of new project menu with nextjs repo selected"
layout="responsive"
width={836} height={596} quality={100} />

- Choose either **Deploy Now** or **Add variables**.

    **Deploy Now** will immediately start to build and deploy your selected repo.

    **Add Variables** will bring you to your service and ask you to add variables, when done you will need to click the **Deploy** button at the top of your canvas to initiate the first deployment.

    *For brevity we will choose **Deploy Now**.*

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752558/docs/quick-start/deploy_now_pmrqow.png"
alt="screenshot of new project menu with deploy now option selected"
layout="responsive"
width={836} height={620} quality={100} />

When you click **Deploy Now**, Railway will create a new project for you and kick off an initial deploy after the project is created.

**Once the project is created you will land on your <a href="/quick-start#the-canvas" target="_blank">Project Canvas</a>**.

## Deploying Your Project - With the CLI

As with the [Deploy from GitHub guide](/quick-start#deploying-your-project---from-github), if you're deploying code with the CLI for the first time, it's recommended to <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo" target="_blank">fork</a> the <a href="https://github.com/railwayapp-templates/nextjs-basic" target="_blank">NextJS app</a>'s repository to follow along. Since we'll be deploying local code, you'll also need to <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository" target="_blank">clone</a> the forked repository.

The CLI can create a new project entirely from the command line, we will use it to scaffold our project.

- Open up a command prompt inside of our local project.

- Run `railway init`

    This will create a new empty project with the name we provided, which will be used for any subsequent commands.

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752558/docs/quick-start/railway_init_rglt5w.png"
alt="screenshot of the command line after railway init was run"
layout="responsive"
width={836} height={233} quality={100} />

Deploying your code is now only a single command away.

- Run `railway up`

    The CLI will now scan our project files, compress them, and upload them to Railway's backend for deployment.

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752558/docs/quick-start/railway_up_vns3u4.png"
alt="screenshot of the command line after railway up was run"
layout="responsive"
width={836} height={214} quality={100} />

**You can now run `railway open` and you will taken to your [Project Canvas](/quick-start#the-canvas)**.

## Deploying Your Project - From a Docker Image

Railway supports deploying pre-built Docker images from the following registries:

- <a href="https://hub.docker.com" target="_blank">Docker Hub</a>
- <a href="https://ghcr.io" target="_blank">GitHub Container Registry</a>
- <a href="https://quay.io" target="_blank">RedHat Container Registry</a>
- <a href="https://docs.gitlab.com/ee/user/packages/container_registry" target="_blank">GitLab Container Registry</a>

To get started deploying a Docker image, we will first make a new <a href="/overview/the-basics#project--project-canvas" target="_blank">project</a>.

- Open up the <a href="/overview/the-basics#dashboard--projects" target="_blank">dashboard</a> → Click **New Project**.

- Choose the **Empty project** option.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727281981/docs/quick-start/emptyproject_q8vqfz.png"
alt="screenshot of new project menu with deploy from github selected"
width={836} height={714} quality={100} />

After the project is created, you will land on the <a href="/quick-start#the-canvas" target="_blank">Project Canvas</a>. A panel will appear prompting you to Add a Service.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727281215/docs/quick-start/add_a_service.png"
alt="screenshot of add a service panel on the canvas"
layout="responsive"
width={1422} height={1284} quality={100} />

- Click **Add a Service** and select the **Docker Image** option from the modal that pops up.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727280789/docs/quick-start/select_docker_image_bdyltc.png"
alt="screenshot of select docker image option selected"
layout="responsive"
width={1693} height={1347} quality={100} />

- In the **Image name** field, enter the name of the Docker image, e.g, `blueriver/nextjs` and press Enter.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727280788/docs/quick-start/blueriver_docker_image_zcn9py.png"
alt="screenshot of example docker image name, blueriver/nextjs in modal"
layout="responsive"
width={1775} height={1157} quality={100} />

If you're using a registry other than Docker Hub (such as GitHub, GitLab, Quay), you need to provide the full Docker image URL from the respective registry.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727280788/docs/quick-start/enter_docker_image_name_rzjbis.png"
alt="screenshot of docker image name entry in modal"
layout="responsive"
width={1987} height={1409} quality={100} />

- Press Enter and click **Deploy**.

Railway will now provision a new service for your project based on the specified Docker image.

And that's it! 🎉 Your project is now ready for use.

**Note:** Deploying from a [private Docker registry is available on the Pro plan](/guides/services#deploying-a-private-docker-image).

## The Canvas

Whether you deploy your project through the dashboard with GitHub or locally using the CLI, you'll ultimately arrive at your project canvas.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1723752560/docs/quick-start/project_canvas_nextjs_c6bjbq.png"
alt="screenshot of the project canvas showing our nextjs deploy"
layout="responsive"
width={1363} height={817} quality={100} />

This is your _mission control_. Your project's infrastructure, <a href="/guides/environments" target="_blank">environments</a>, and <a href="/guides/deployments" target="_blank">deployments</a> are all
controlled from here.

Once the initial deployment is complete, your app is ready to go. If applicable, generate a domain by clicking <a href="/guides/public-networking#railway-provided-domain" target="_blank">Generate Domain</a> within the <a href="/overview/the-basics#service-settings" target="_blank">service settings</a> panel.

**Additional Information -**

If anything fails during this time, you can explore your <a href="/guides/logs#build--deploy-panel" target="_blank">build or deploy logs</a> for clues. A helpful tip is to scroll through the entire log; important details are often missed, and the actual error is rarely at the bottom!

If you're stuck don't hesitate to open a <a href="https://station.railway.com/questions" target="_blank">Help Thread</a>.

## Deploying a Template

Railway's <a href="https://railway.com/templates" target="_blank">template marketplace</a> offers over 650+ unique templates that have been created both by the community and Railway!

Deploying a template is not too dissimilar to deploying a GitHub repo -

- Open up the <a href="/overview/the-basics#dashboard--projects" target="_blank">dashboard</a> → Click **New Project**.

- Choose **Deploy a template**.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1723752559/docs/quick-start/template_new_project_k9kfrh.png"
alt="screenshot of new project menu with deploy a template option selected"
layout="responsive"
width={836} height={860} quality={100} />

- Search for your desired template.

    *Hint: If your desired template isn't found feel free to <a href="https://station.railway.com/questions" target="_blank">reach out to the community</a>.*

- Click on the template you want to deploy.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1723752558/docs/quick-start/template_new_umami_j4la5d.png"
alt="screenshot of new project menu the umami template selected"
layout="responsive"
width={836} height={644} quality={100} />

*Hint: Generally it's best to choose the template with a combined higher deployment and success count.*

- Fill out any needed information that the template may require.

    In the case of our Umami template, we don't need to provide any extra information.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1723752558/docs/quick-start/template_config_options_zaxbko.png"
alt="screenshot of the deploy umami screen with no extra configurations needed"
layout="responsive"
width={932} height={908} quality={100} />

- Click **Deploy**.

Railway will now provision a new project with all services and configurations that were defined in the template.

That's it, deploying a template is as easy as a few clicks!

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1723752560/docs/quick-start/project_canvas_umami_lb759i.png"
alt="screenshot of the project canvas showing umami and postgres"
layout="responsive"
width={1363} height={817} quality={100} />

## Closing

Railway aims to be the simplest way to develop, deploy, and diagnose issues with your application.

As your Project scales, Railway scales with you by supporting multiple Teams, vertical scaling, and horizontal scaling; leaving you to focus on what matters: your code.

Happy Building!

### What to Explore Next

- **[Environments](/guides/environments)** - Railway lets you create parallel, identical environments for PRs/testing.

- **[Observability Dashboard](/guides/observability)** - Railway's built-in observability dashboard offers a customizable view of metrics, logs, and usage in one place.

- **[Project Members](/reference/project-members)** - Adding members to your projects is as easy as sending them an invite link.

- **[Staged Changes](/guides/staged-changes)** - When you make changes to your Railway project, such as adding or removing components and configurations, these updates will be gathered into a changeset for you to review and apply.

### Join the Community

Chat with Railway members, ask questions, and hang out in our <a href="https://discord.gg/railway" target="_blank">Discord community</a> with fellow builders! We'd love to have you!


================================================
FILE: src/docs/railway-metal.md
================================================
---
title: Railway Metal
description: Railway Metal is Railway’s own cloud infrastructure, built for high-performance, scalable, and cost-efficient app deployments. Learn how it works.
---

Railway Metal is the next generation of Railway's underlying infrastructure.
It is built on hardware that we own and operate in datacenters around the world.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736893474/docs/m0_homdt8.png"
alt="Railway Metal Region"
layout="responsive"
width={1184} height={322} quality={80} />

Learn more about how we built it in our blog post [So You Want to Build Your Own Data Center](https://blog.railway.com/p/data-center-build-part-one).

## Why?

We are making this move as part of our commitment to providing best-in-class
infrastructure for our users. This change enables us to improve our platform's
performance, unlock additional features, increase reliability, and make
Railway more cost-effective for all users.

With Railway Metal, you can expect the following benefits:

- **Regions for Trial & Hobby plan users**: Railway Metal will be available to
  all users, including Trial & Hobby Plan users. Trial & Hobby plan users will
  be able to deploy services on all four Railway Metal regions in the US,
  Europe, and Southeast Asia.

- **Cheaper Pricing**: Running our own hardware lets us reduce prices. Once
  Railway Metal is Generally Available, all users can expect to pay up to 50%
  less for Network Egress, and up to 40% less for Disk Usage.

- **Improved Performance**: Services on Railway will run faster. Our new CPUs
  are more powerful with higher core count and better performance per-core.
  Volume read/write performance will also be significantly faster as all
  of our disks are NVMe SSDs, which are faster than the disks we could offer
  before.

- **Enhanced Reliability**: With Railway Metal, we are able to manage the
  hardware, software, and networking stack end-to-end. This allows us to move
  faster and fix problems more quickly. (For instance, before Railway Metal,
  incidents such as [a single host failure](https://status.railway.com/cm44jp6qh00jydhwlyxsix3vl) would often take us ~60 minutes to bring the host back up. With our own
  hardware, we can bring the host back up significantly faster.)

- **Improved Networking**: We connect directly to major internet providers and
  other cloud platforms worldwide, giving you faster connections in and out
  of Railway.

- **Higher Available Resources**: Railway Metal has greater capacity that we
  will be increasing over time, allowing us to offer you more computing
  resources on-demand.

- **Unlocks More Features**: With our own hardware and networking stack, we
  can power more advanced features that were not possible before, such as
  Static Inbound IPs, Anycast Edge Network, High-Availability Volumes, etc.

## Metal Edge Network

Railway routes traffic through its own anycast Metal Edge network.

You can check if its enabled for your service in the Public Network section in the service settings tab.

<Image src="https://res.cloudinary.com/railway/image/upload/v1746495091/edge_enabled_pgferg.png"
alt="screenshot of a service with the metal edge network enabled"
layout="intrinsic"
width={910} height={254} quality={100} />

<span style={{'font-size': "0.9em"}}>Screenshot showing a domain with the Metal Edge Network enabled</span>

Benefits include better routing, less latency, and underlying infrastructure improvements.

## Regions & Availability

Railway Metal is available to all users, including Trial & Hobby Plan users.

Each Railway Metal region is located in a datacenter that was chosen
strategically to provide the best possible performance and reliability.

We are in the process of expanding our Railway Metal regions, and we expect to
have all regions available by the end of Q1'2025 (by 31 March 2025).

| Railway Metal Region       | Status    |
| -------------------------- | --------- |
| US West (California)       | 🟢 Active |
| US East (Virginia)         | 🟢 Active |
| Europe West (Amsterdam)    | 🟢 Active |
| Southeast Asia (Singapore) | 🟢 Active |

## Gradual Upgrade

We will gradually move services without a [volume](/reference/volumes)
to Railway Metal as we increase the pool of our hardware and its capabilities.

When this happens, you may see a new deploy initiated by Railway in your service:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736969764/docs/m1_zw5m4f.png"
alt="Automatic upgrade banner"
layout="responsive"
width={1704} height={434} quality={80} />

Because this is a new deploy of your latest Active deployment, the behaviour
will be the same as if you've manually issued a new deploy. As such, you may
notice that:

- There may be a brief downtime during the upgrade. To prevent this, ensure
  you have [Health Checks](/reference/healthchecks) set up for your service

- All ephemeral storage (such as `/tmp`, etc.) will be wiped. To prevent this,
  use [Volume](/reference/volumes) to store data persistently. All storage is
  considered ephemeral unless they're on a Railway Volume

Note that the above generally applies to deploying a new version of
your service. The upgrade to Railway Metal is irrelevant to the behaviour
you may run into above - they are the same as if you were to manually deploy
a new version of your service.

For services in `US West (Oregon)`, Railway will not move your service to
Railway Metal if your service [references another service](/guides/variables#referencing-another-services-variable-example) with a volume.
This is to prevent any cross-regional networking latency spikes for your
service. Refer to [this FAQ](#im-experiencing-slow-network-performance-after-switching-to-us-west-california-railway-metal-region-what-should-i-do) for more information.

### Rollback

If you encounter any issues with your service after the upgrade, you can
rollback to the previous version by clicking `Rollback` button in the banner
above.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736970652/docs/m4_rtxp2z.png"
alt="Automatic rollback"
layout="responsive"
width={1338} height={608} quality={80} />

### Manual rollback

To rollback manually, modify your service's `Settings -> Deploy -> Regions`
and select regions without the `Metal (New)` tag.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736970930/docs/m3_kvwdgd.png"
alt="Manual rollback"
layout="responsive"
width={1140} height={560} quality={80} />

## Timeline

Our transition to Railway Metal will happen in phases. Here's what you can
expect:

| Date                         | What's Happening                                                                                                                                                          | Status |
| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ |
| Starting December 26th, 2024 | All new deploys on newly-created services without a [volume](/reference/volumes) by Trial & Hobby users will use Railway Metal by default.                                | 🟢     |
| Starting January 1st, 2025   | We will be gradually upgrading services _without a [volume](/reference/volumes)_ to Railway Metal. You can learn more about the gradual upgrade [here](#gradual-upgrade). | 🟢     |
| Starting January 31st, 2025  | All new deploys on all services _without a [volume](/reference/volumes)_ by Trial & Hobby users will use Railway Metal by default.                                        | 🟢     |
| Starting February 14th, 2025 | All new deploys on all services _without a [volume](/reference/volumes)_ by Pro & Enterprise users will use Railway Metal by default.                                     | 🟢     |
| Starting March 14th, 2025    | All new deploys on services _with a [volume](/reference/volumes)_ by Trial & Hobby users will use Railway Metal by default.                                               | 🟢     |
| Starting March 21st, 2025    | We will begin migrating services to Railway metal for Hobby Users                                                                                                         | 🟢     |
| Starting March 28th, 2025    | All new deploys on services _with a [volume](/reference/volumes)_ by Pro & Enterprise users will use Railway Metal by default.                                            | 🟢     |
| Starting May 2nd, 2025       | We will begin migrating services to Railway metal for Pro Users                                                                                                           | 🟢     |
| Starting June 6th, 2025      | We will begin migrating services to Railway metal for Enterprise Users                                                                                                    | 🟠     |

The migration is aimed to be completed by the 4th of July, 2025.

## Pricing Updates

If you migrate 80 percent of your workloads to Railway Metal, you'll benefit from significantly reduced costs:

- **Egress Fees**: Reduced by 50%, from $0.10/GB to $0.05/GB.
- **Disk Storage**: Reduced from $0.25/GB to $0.15/GB.

These pricing updates are automatically applied once 80 percent of your workloads are running on Railway Metal.

## FAQ

### Is this a free upgrade?

Yes.

### How do I receive the upgrade sooner?

Go to your service's `Settings -> Deploy -> Regions`, and select any region
with the `Metal (New)` tag.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736970930/docs/m3_kvwdgd.png"
alt="Manual rollback"
layout="responsive"
width={1140} height={560} quality={80} />

Refer to [Regions & Availability](#regions--availability) to see the regions
available for Railway Metal.

### How do I know if I'm on Railway Metal?

To check if your service is running on Railway Metal, go to your service's
`Settings -> Deploy -> Regions`. If you are on Railway Metal, you will see a
`Metal (New)` tag next to the region.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736970930/docs/m3_kvwdgd.png"
alt="Manual rollback"
layout="responsive"
width={1140} height={560} quality={80} />

### Is Railway Metal stable?

Yes. We have been running a growing amount of deployments on it for the past
several months. As of the time of this writing, there are ~40,000 deployments
on Railway Metal, and we have not seen any significant issues.

### Is there downtime if I upgrade?

Upgrading to Railway Metal re-deploys your service. This may cause a brief
period of downtime as your new deploy is being set up. You can set up
[Health Checks](/reference/healthchecks) to prevent this.

### What is the difference between Railway Metal and regions?

Railway Metal refers to our own hardware and infrastructure. Regions refer to
the physical location of the datacenter where the hardware is located.

### I'm experiencing slow network performance after switching to US West (California) Railway Metal region. What should I do?

You may experience increased latency if your application is communicating with
other services (such as databases) in `US West (Oregon)`. This is caused by the
physical distance between Oregon (our current region) and California
(Railway Metal region).

We recommend switching back to the `US West (Oregon)` region if you are
experiencing increased latency after upgrading to `US West (California)`.
See [Manual rollback](#manual-rollback) for instructions.

### Will Railway stay on GCP?

No. We are migrating completely onto Railway managed hardware. For customers who would like Railway to deploy into their public cloud, you can contact sales via our [AWS Marketplace listing.](https://aws.amazon.com/marketplace/pp/prodview-cnib4vbrfgs5a)

### Help! After migrating, why do I have increased latency?

It's likely that your database, or service with a volume, isn't migrated over to Metal. Stateful Metal is available starting March 2025. Users who migrate to a different region other than their stateful workload will see increased latency due to the additional physical distance from your service's region. Migrate when your desired region has stateful workloads available after March 2025.

### Why did my costs increase when moving to Metal?

Although not intended, Railway Metal, has a different metrics sampler than our legacy hardware. This means that metrics will be quicker to come in, this also meant that legacy was undercounting the amount of resources on the previous hardware. As a result, some metrics like CPU will increase, others, like RAM will usually decrease.

### How do I opt-out?

There is no way to opt-out of Railway Metal. Please [reach out to us](#getting-help)
if you have any concerns.

### How do I get the new Pro plan?

On your invoice close date, if 80 percent of your usage costs come from Railway Metal instances, Railway waives all seat costs on the platform.

## Getting Help

Please reach out to us [on our Central Station](https://station.railway.com/feedback/feedback-railway-metal-a41f03a1) if you run into any issues. You can also reach out to us over [Slack](/reference/support#slack) if you are
a Pro or [Business Class / Enterprise](/reference/support#business-class)
customer.



================================================
FILE: src/docs/community/affiliate-program.md
================================================
---
title: Affiliate Program
description: Show Railway to your network, earn 15% cash commission on referral revenue.
---

Railway's Affiliate Program is meant for creators to share the power of Railway through content and an extended network. For anyone that signs up from your link and becomes a Railway customer, you will receive 15% commission on the first 12 months of invoices from the new customer moving forward.

## How Do I Become an Affiliate?

<Image src="https://res.cloudinary.com/railway/image/upload/v1631917786/docs/referrals_cash_ashj73.png"
alt="Screenshot of Referrals Page"
layout="intrinsic"
width={1784} height={1104} quality={80} />

Follow these steps to start earning:

- Sign up for Railway.

- Click the `Refer` button in the dashboard, or navigate directly to the workspace's <a href="https://railway.com/account/referrals" target="_blank">referrals page</a>.

- Copy the unique link.

- Create content and post about Railway, including the unique link.

To see and withdraw earnings:

- Navigate to the workspace settings and click on `Earnings`, which leads you to the <a href="https://railway.com/account/earnings" target="_blank">earnings page</a>.

- The `Earnings` page displays total earnings

- Follow the instructions here to withdraw to GitHub Sponsors or Buy Me a Coffee. 

- After adding your account details you will request a withdrawal. Our team will receive the request and process it.

## How Do I Maximize Earnings?

Earnings come from signups that are successful and start to scale on Railway. Walk through Railway use cases to give your network an accurate idea of what they can do on Railway.

A few ideas to maximize reach and earnings as an affiliate:

- Create video content on YouTube demoing a use case with a specific template on Railway

- Write a blog post on Medium walking through pros/cons of cloud deployment and hosting on Railway

- Post on LinkedIn (or your social platform of choice) about your experience on Railway



================================================
FILE: src/docs/community/the-conductor-program.md
================================================
---
title: The Conductor Program
description: Learn about Railway’s Conductor Program and how it empowers the developer community.
---

The Conductor Program brings together the amazing people who make Railway's community special. Conductors shepherd the experience for our 45K+ community members. They are the bridge between the Railway team and our thriving community.

This program aims to foster collaboration and help our Conductors grow.

## What Do Conductors Do?

Our Conductors spend time in Discord and the Central Station answering questions, sharing tips, and making sure everyone can use Railway successfully.

Here are a few key ways they contribute -

- Providing community support through [Discord](https://discord.gg/railway) and the [Central Station](https://station.railway.com/).

- Maintaining a healthy and welcoming community atmosphere while moderating our channels and templates.

- Contributing to Railway's open-source projects through improvements and new features.

- Creating a direct feedback loop between users and the Railway team.

Through these activities, Conductors ensure everyone can use Railway successfully while helping to build a collaborative and supportive community environment.

## Ready to Become a Conductor?

Are you passionate about helping others and love being part of Railway's community? We're always excited to welcome new Conductors who share our enthusiasm for community engagement!

Here's what we look for in potential Conductors -

- Have demonstrated experience with Railway's platform and services.

- Show a consistent track record of helping others in our community.

- Maintain professional and friendly communication.

- Are active participants in our Discord and Central Station.

- Demonstrate strong technical problem-solving abilities.

The ideal Conductor combines technical expertise with mentorship skills to help our community thrive!

<TallyButton data-tally-open="nP2qqd" data-tally-width="700" data-tally-emoji-text="👋" data-tally-emoji-animation="wave" data-tally-auto-close="2000">Apply Now</TallyButton>

## Conductor Benefits

Being a Conductor comes with several exciting perks and rewards to recognize your valuable contributions to the community.

As part of the program, conductors will receive -

- 100% off discount for the Hobby plan's subscription and resource costs.

- Cash payouts for solving complex issues for users.

- The opportunity to earn payouts for OSS contributions ([CLI](https://github.com/railwayapp/cli), [Nixpacks](https://github.com/railwayapp/nixpacks), [Docs](https://github.com/railwayapp/docs), etc).

- First access to [template bounties](https://github.com/railwayapp/templates/wiki/Template-Bounties).

- Letters of recommendation for educational institutions and employer references.

- Moderation status on [Discord](https://discord.gg/railway) and the [Central Station](https://station.railway.com/).

- Access to a team workspace shared with other Conductors.

- A direct line to the team via the private Conductor only channel.

- Your choice of [Railway Swag](https://shop.railway.com/).

And to top it all off, each quarter we reward our most outstanding conductor with a pizza party! 🎉

## Conductor Participation

We believe in fostering an active and supportive Conductor program that enables everyone to make meaningful contributions. To help keep our community vibrant, we conduct friendly quarterly check-ins with all Conductors.

As a Conductor, you'll contribute regularly in these key areas -

- Community Engagement

    - Being an active, welcoming presence in community channels.

    - Building connections with fellow community members.

    - Joining community conversations and sharing experiences.

    - Looking out for the community by making sure discussions stay positive and helpful.

- Support Activities

    - Helping others in [Discord](https://discord.gg/railway) and the [Central Station](https://station.railway.com/).

    - Showing consistent engagement by regularly contributing to meaningful solutions across all Railway platforms.

- Open Source Contributions

    - Contributing through either small improvements or substantial feature additions.

    - New features should address community-requested needs with demonstrated user demand.

    - Bug fixes should focus on issues affecting multiple users.

We understand that maintaining consistent participation across these areas requires dedication and time. As part of our commitment to supporting Conductors, we have quarterly check-ins to discuss your experience and ensure you have everything needed to succeed.

While we aim for regular engagement, we recognize that life circumstances and priorities can change. If participation becomes limited, we may need to transition members out of the program during our bi-annual review. However, our door always remains open – former Conductors are welcome to rejoin the program when their schedule better accommodates regular participation!


================================================
FILE: src/docs/guides/angular.md
================================================
---
title: Deploy an Angular App
description: Learn how to deploy an Angular app to Railway with this step-by-step guide. It covers quick setup, caddy server setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Angular](https://angular.dev) is a JavaScript web framework that empowers developers to build fast and reliable applications. It is designed to work at any scale, keep large teams productive and is proven in some of Google's largest web apps such as [Google fonts](https://fonts.google.com) and [Google Cloud](https://console.cloud.google.com).

This guide covers how to deploy an Angular app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template)
2. [From a GitHub repository](#deploy-from-a-github-repo)
3. [Using the CLI](#deploy-from-the-cli)
4. [Using a Dockerfile](#use-a-dockerfile)

Now, let's create an Angular app!

## Create an Angular App

**Note:** If you already have an Angular app locally or on GitHub, you can skip this step and go straight to the [Deploy Angular App on Railway](#deploy-the-angular-app-to-railway).

To create a new Angular app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) and [Angular CLI](https://angular.dev/installation#install-angular-cli) installed on your machine.

Run the following command in your terminal to create a new Angular app:

```bash
ng new gratitudeapp
```

You'll be presented with some config options in the prompts for your project. 
- Select `CSS` 
- Select `Yes` for enabling Server-Side Rendering (SSR) and Static Site Generation (SSG)
- Select `Yes` for enabling Server Routing and App Engine APIs (Developer Preview)

### Run the Angular App locally

Next, `cd` into the directory and run the app.

```bash
npm start
```

Open your browser and go to `http://localhost:4200` to see your app.

## Modify Start Script

Before deploying, we need to update the `package.json` file.

Angular builds the project into the `dist` directory. For server-side rendered apps, the server starts with the command: `node dist/gratitudeapp/server/server.mjs` as defined in the scripts section below:

```js
"scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "serve:ssr:gratitudeapp": "node dist/gratitudeapp/server/server.mjs"
  },
```

- The development server starts with `npm start`.
- The production server runs with `npm run serve:ssr:gratitudeapp`.

Since Railway relies on the `build` and `start` scripts to automatically build and launch applications, we need to update the `start` script to ensure it runs the production server correctly.

Your scripts section should look like this:

```js
...
"scripts": {
    "ng": "ng",
    "dev": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "start": "node dist/gratitudeapp/server/server.mjs"
  },
... 
```
 
Now, we are good to go!

## Deploy the Angular App to Railway

Railway offers multiple ways to deploy your Angular app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/A5t142)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=angular" target="_blank">variety of Angular app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Angular app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/v1741028014/CleanShot_2025-03-03_at_18.49.07_2x_ewelfy.png"
alt="screenshot of the deployed Angular service"
layout="responsive"
width={2644} height={2114} quality={100} />

### Deploy from a GitHub Repo

To deploy an Angular app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `gratitudeapp` or Angular app's root directory.
2. Add the content below to the `Dockerfile`:
    ```dockerfile
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build

    # Serve the app
    CMD ["npm", "run", "start"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Angular apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/astro.md
================================================
---
title: Deploy an Astro App
description: Learn how to deploy an Astro app to Railway with this step-by-step guide. It covers quick setup, server side rendering, one-click deploys, Dockerfile and other deployment strategies.
---

[Astro](https://astro.build) is the web framework for content-driven websites. It's a JavaScript framework optimized for building fast, content-driven websites. It also supports every major UI framework, allowing you to bring in your existing components and benefit from Astro's optimized client build performance.

This guide covers how to deploy an Astro app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create an Astro app!

## Create an Astro App

**Note:** If you already have an Astro app locally or on GitHub, you can skip this step and go straight to the [Deploy Astro Apps on Railway](#deploy-the-astro-app-to-railway).

To create a new Astro app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to create a new Astro app:

```bash
npm create astro@latest
```

Follow the prompts and provide a directory name, such as `blog`, where you'd like to set up your app.

When prompted to choose how you'd like to start your project, select **Use blog template**. For TypeScript, choose **Yes**.

For the remaining options, select the defaults and press Enter. All necessary dependencies will then be installed.

A new Astro app will be provisioned for you in the `blog` directory.

### Run the Astro App Locally

Enter your project directory using `cd blog`.

Start the local dev server by running the following command:

```bash
npm run dev
```

Open your browser and go to `http://localhost:4321` to see your app.

### Enable Server Side Rendering (SSR)

Astro has several [SSR adapters](https://docs.astro.build/en/guides/server-side-rendering/). These adapters are used to run your project on the server and handle SSR requests.

Let's add the Node adapter to enable SSR in our blog project.

Run the command below in your terminal:

```bash
npx astro add node
```

Select **Yes** at the prompt to proceed. The Node adapter will be installed, and our Astro config file will be updated accordingly.

Open up the `astro.config.mjs` file:

```js
// @ts-check
import { defineConfig } from 'astro/config';
import mdx from '@astrojs/mdx';

import sitemap from '@astrojs/sitemap';

import node from '@astrojs/node';

// https://astro.build/config
export default defineConfig({
  site: 'https://example.com',
  integrations: [mdx(), sitemap()],
  output: 'server',

  adapter: node({
    mode: 'standalone',
  }),
});
```

In the config file, `output` is set to `server`, meaning every page in the app is server-rendered by default.

For mostly static sites, set `output` to `hybrid`. This allows you to add `export const prerender = false` to any file that needs to be server-rendered on demand.

### Modify Start Script and Astro Config

Astro builds your project into a `dist` directory. In `standalone` mode, a server starts when the server entry point is executed, which is by default located at `./dist/server/entry.mjs`. 

In this mode, the server handles file serving as well as page and API routes.

Open up the `package.json` file and modify the start script from `astro dev` to `node ./dist/server/entry.mjs`.

```js
{
    "name": "astroblog",
    "type": "module",
    "version": "0.0.1",
    "scripts": {
        "dev": "astro dev",
        "start": "node ./dist/server/entry.mjs",
        "build": "astro check && astro build",
        "preview": "astro preview",
        "astro": "astro"
    },
    "dependencies": {
        "@astrojs/check": "^0.9.4",
        "@astrojs/mdx": "^3.1.8",
        "@astrojs/node": "^8.3.4",
        "@astrojs/rss": "^4.0.9",
        "@astrojs/sitemap": "^3.2.1",
        "astro": "^4.16.6",
        "typescript": "^5.6.3"
    }
}
```

Open the `astro.config.mjs` file and configure the server to run on host `0.0.0.0` by adding the following block inside the `defineConfig` function.

```js
...
server: {
    host: '0.0.0.0'
},
```

Your app needs to listen on either `0.0.0.0` or `::` to accept traffic. If not configured properly, you'll encounter a 502 error.

## Deploy the Astro App to Railway

Railway offers multiple ways to deploy your Astro app, depending on your setup and preference. 

### One-Click Deploy From a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/Ic0JBh)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=astro" target="_blank">variety of Astro app templates</a> created by the community.

### Deploy From the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Vue app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729535599/astro_blog_app.png"
alt="screenshot of the deployed Astro service"
layout="responsive"
width={2556} height={2164} quality={100} />

### Deploy From a GitHub Repo

To deploy an Astro app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `blog` or Astro app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build
    
    # Serve the app
    CMD ["npm", "run", "start"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Astro apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/axum.md
================================================
---
title: Deploy a Rust Axum App
description: Learn how to deploy an Axum app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, GitHub, Dockerfile and other deployment strategies.
---

[Axum](https://docs.rs/axum/latest/axum) is a web framework for Rust that focuses on ergonomics and modularity. It is designed to work with [tokio](https://docs.rs/tokio/1.40.0/x86_64-unknown-linux-gnu/tokio/index.html) and [hyper](https://docs.rs/hyper/1.4.1/x86_64-unknown-linux-gnu/hyper/index.html).

This guide covers how to deploy an Axum app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create an Axum app! 🚀

## Create an Axum App

**Note:** If you already have an Axum app locally or on GitHub, you can skip this step and go straight to the [Deploy Axum App to Railway](#deploy-the-axum-app-to-railway).

To create a new Axum app, ensure that you have [Rust](https://www.rust-lang.org/tools/install) installed on your machine.

Run the following command in your terminal to create a new Axum app:

```bash
cargo new helloworld --bin
```

The command creates a new binary-based Cargo project in a `helloworld` directory.

Next, `cd` into the directory and add `axum` and `tokio` as dependencies by running the following command:

```bash
cargo add axum
cargo add tokio --features full
```

This will add `axum` and `tokio` as dependencies, with `tokio` configured to use the "full" feature, which includes its complete set of capabilities. You’ll find both dependencies listed in your `Cargo.toml` file.

These dependencies are required to create a bare minimum axum application.

### Modify the Application File

Next, open the app in your IDE and navigate to the `src/main.rs` file.

Replace the content with the code below:

```rust
use axum::{
    routing::get,
    Router,
};

#[tokio::main]
async fn main() {
    // build our application with a single route
    let app = Router::new().route("/", get(root));

    // Get the port number from the environment, default to 3000
    let port: u16 = std::env::var("PORT")
        .unwrap_or_else(|_| "3000".to_string()) // Get the port as a string or default to "3000"
        .parse() // Parse the port string into a u16
        .expect("Failed to parse PORT");

    // Create a socket address (IPv6 binding)
    let address = SocketAddr::from(([0, 0, 0, 0, 0, 0, 0, 0], port));
    let listener = tokio::net::TcpListener::bind(&address).await.unwrap();

    // Run the app with hyper, listening on the specified address
    axum::serve(listener, app).await.unwrap();
}

// basic handler that responds with a static string
async fn root() -> &'static str {
    "Hello World, from Axum!"
}
```

The code above sets up a simple web server using the Axum framework and the Tokio async runtime. The server listens on the port gotten from the environment variable, `PORT` and defaults to `3000` if there's none set. 

It defines one route, `/`, which is mapped to a handler function called `root`. When a GET request is made to the root path, the handler responds with the static string "Hello World, from Axum!". 

The Router from Axum is used to configure the route, and `tokio::net::TcpListener` binds the server to listen for connections on all available network interfaces (address `0.0.0.0`).

The asynchronous runtime, provided by the `#[tokio::main]` macro, ensures the server can handle requests efficiently. The `axum::serve` function integrates with the Hyper server to actually process requests.

### Run the Axum App Locally

Run the following command in the `helloworld` directory via the terminal:

```bash
cargo run
```

All the dependencies will be installed and your app will be launched.

Open your browser and go to `http://localhost:3000` to see your app.

## Deploy the Axum App to Railway

Railway offers multiple ways to deploy your Axum app, depending on your setup and preference. 

### One-Click Deploy From a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. 

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/5HAMxu)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=axum" target="_blank">variety of Axum templates</a> created by the community.

### Deploy From the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Axum app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Rust app](https://nixpacks.com/docs/providers/rust).
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729880417/docs/quick-start/axum_app_service.png"
alt="screenshot of the deployed Axum service"
layout="responsive"
width={1982} height={1822} quality={100} />

### Deploy From a GitHub Repo

To deploy an Axum app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Rust app](https://nixpacks.com/docs/providers/rust).
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `helloworld` or Axum app's root directory.
2. Add the content below to the `Dockerfile`:
    ```docker
    FROM lukemathwalker/cargo-chef:latest-rust-1 AS chef

    # Create and change to the app directory.
    WORKDIR /app

    FROM chef AS planner
    COPY . ./
    RUN cargo chef prepare --recipe-path recipe.json

    FROM chef AS builder 
    COPY --from=planner /app/recipe.json recipe.json

    # Build dependencies - this is the caching Docker layer!
    RUN cargo chef cook --release --recipe-path recipe.json

    # Build application
    COPY . ./
    RUN cargo build --release

    CMD ["./target/release/helloworld"]
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Axum apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)



================================================
FILE: src/docs/guides/beego.md
================================================
---
title: Deploy a Beego App
description: Learn how to deploy a Beego app to Railway with this step-by-step guide. It covers quick setup, private networking, database integration, one-click deploys and other deployment strategies.
---

[Beego](https://github.com/beego/beego) is a high-performance, open-source web framework designed for building robust applications in Go (Golang). It is used for rapid development of enterprise apps, including RESTful APIs, web apps and backend services.

This guide covers how to deploy a Beego app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Beego app!

## Create a Beego App

**Note:** If you already have a Beego app locally or on GitHub, you can skip this step and go straight to the [Deploy Beego App to Railway](#deploy-the-beego-app-to-railway).

To create a new Beego app, ensure that you have [Go](https://go.dev/dl) and [Bee tool](https://doc.meoying.com/en-US/beego/developing/#manual-installation) installed on your machine.

Run the following command in your terminal to create a new Beego app and install all dependencies:

```bash
bee new helloworld
cd helloworld
go mod tidy
```

A new Beego app will be provisioned for you in the `helloworld` directory.

### Configure Database

Run `go get github.com/lib/pq` in your terminal to install the Go Postgres driver.

Create a database, `helloworld_dev` in your local Postgres instance.

Open the `main.go` file and modify the content to the code below:

```go
package main

import (
	"fmt"
	_ "helloworld/routers"

	_ "github.com/lib/pq"

	"github.com/beego/beego/v2/client/orm"
	beego "github.com/beego/beego/v2/server/web"
)

// Users -
type Users struct {
	ID        int    `orm:"column(id)"`
	FirstName string `orm:"column(first_name)"`
	LastName  string `orm:"column(last_name)"`
}

func init() {
	// set default database
	orm.RegisterDriver("postgres", orm.DRPostgres)

	// set default database
	orm.RegisterDataBase("default", "postgres", "postgres://unicodeveloper:@localhost/helloworld_dev?sslmode=disable")

	// register model
	orm.RegisterModel(new(Users))

	// create table
	orm.RunSyncdb("default", false, true)
}

func main() {
	o := orm.NewOrm()

	// Create a slice of Users to insert
	users := []Users{
		{FirstName: "John", LastName: "Doe"},
		{FirstName: "Jane", LastName: "Doe"},
		{FirstName: "Railway", LastName: "Deploy Beego"},
	}

	// Iterate over the slice and insert each user
	for _, user := range users {
		id, err := o.Insert(&user)
		if err != nil {
			fmt.Printf("Failed to insert user %s %s: %v\n", user.FirstName, user.LastName, err)
		} else {
			fmt.Printf("Inserted user ID: %d, Name: %s %s\n", id, user.FirstName, user.LastName)
		}
	}

	beego.Run()
}
```

Replace this `postgres://username:@localhost/helloworld_dev?sslmode=disable` with the appropriate URL for your local Postgres database.

**Code Summary**:

- The Users struct defines the schema for the users table in the database.
- The `init()` function registers the Postgres driver, registers the Users model, and automatically creates the users table in the database. If any errors occur while inserting users, they are logged.
- The `main()` function creates an ORM instance, defines sample user data (first name and last name), inserts the data into the users table, and starts the Beego web server to serve your app.

### Run the Beego App Locally

To start your app, run:

```bash
bee run
```

Once the app is running, open your browser and navigate to `http://localhost:8080` to view it in action.

In your terminal, you’ll see logs indicating that the user data is being inserted. Head over to your database, and you should see the users table populated with the seeded data.

### Prepare Beego App for Deployment

1. Open the `conf/app.conf` file and add an environment variable, `DATABASE_URL` to it.

```go
db_url = ${DATABASE_URL}
```

2. Head over to the `main.go` file and make some modifications to the way we retrieve the Postgres database url. The `init()` function should look like this:

```go
func init() {
	// set default database
	orm.RegisterDriver("postgres", orm.DRPostgres)

	// set default database
	dbURL, err := beego.AppConfig.String("db_url")
	if err != nil {
		log.Fatal("Error getting database URL: ", err)
	}

	orm.RegisterDataBase("default", "postgres", dbURL)

	// register model
	orm.RegisterModel(new(Users))

	// create table
	orm.RunSyncdb("default", false, true)
}
```

## Deploy the Beego App to Railway

Railway offers multiple ways to deploy your Beego app, depending on your setup and preference. 

### One-Click Deploy From a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/CPq9Ry)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=beego" target="_blank">variety of Beego app templates</a> created by the community.

### Deploy From the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Beego app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Add a Postgres Database Service**:
    - Run `railway add -d postgres`.
    - Hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
4. **Add a Service and Environment Variable**:
    - Run `railway add`.
    - Select `Empty Service` from the list of options.
    - In the `Enter a service name` prompt, enter `app-service`.
    - In the `Enter a variable` prompt, enter `DATABASE_URL=${{Postgres.DATABASE_URL}}`. 
        - The value, `${{Postgres.DATABASE_URL}}`, references the URL of your new Postgres database. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
    
    **Note:** Explore the [Railway CLI reference](/reference/cli-api#add) for a variety of options.
5. **Deploy the Application**:
    - Run `railway up` to deploy your app.
        - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment is complete, we can proceed to generate a domain for the app service.
6. **Set Up a Public URL**:
    - Run `railway domain` to generate a public URL for your app.
    - Visit the new URL to see your app live in action!

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731331898/docs/quick-start/beego_on_railway.png"
alt="screenshot of the deployed Beego service"
layout="responsive"
width={2420} height={1986} quality={100} />

### Deploy From a GitHub Repo

To deploy a Beego app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. 
        - This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        -  `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Go app](https://nixpacks.com/docs/providers/go).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the Beego app's root directory.
2. Add the content below to the `Dockerfile`:
    ```docker
    # Use the Go 1.22 official image
    # https://hub.docker.com/_/golang
    FROM golang:1.22

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image.
    COPY . ./

    # Install project dependencies
    RUN go mod download

    # Build the app
    RUN go build -o app
   
    # Run the service on container startup.
    ENTRYPOINT ["./app"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Beego apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)



================================================
FILE: src/docs/guides/build-a-database-service.md
================================================
---
title: Build a Database Service
description: Learn how to build a database service on Railway.
---

Railway's platform primitives allow you to build any type of service your system requires, including database services.  This guide aims to guide you through the essential features to build your own database service.

For the purpose of this guide, we will use the official <a href="https://hub.docker.com/_/postgres" target="_blank">Postgres image</a> as an example.

## Service Source

As discussed in the [Services guide](/guides/services), a crucial step in creating a service is [defining a source](/guides/services#defining-a-deployment-source) from which to deploy.

To deploy the official Postgres image, we'll simply enter postgres into the Source Image field:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1701464166/docs/databases/CleanShot_2023-12-01_at_14.54.35_2x_aa5gwt.png"
alt="Screenshot of a Docker image source"
layout="responsive"
width={559} height={168} quality={80} />

## Volumes

Attach a [volume](/guides/volumes) to any service, to keep your data safe between deployments.  For the Postgres image, the default mount path is `/var/lib/postgresql/data`.

Just attach a volume to the service you created, at the mount path:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1701464411/docs/databases/mountpath_lajfam.png"
alt="Screenshot of a mount path"
layout="responsive"
width={519} height={168} quality={80} />

## Environment Variables

Now, all you need to do is configure the appropriate <a href="https://hub.docker.com/_/postgres#environment-variables:~:text=have%20found%20useful.-,Environment%20Variables,-The%20PostgreSQL%20image" target="_blank">environment variables</a> to let the Postgres image know how to run:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1701464670/docs/databases/envvars_aow79p.png"
alt="Screenshot of environment variables"
layout="responsive"
width={460} height={458} quality={80} />

Note the `DATABASE_URL` is configured with TCP Proxy variables, but you can also connect to the database service over the private network.  More information below.

## Connecting

### Private Network

To connect to your database service from other services in your project, you can use the [private network](/guides/private-networking).  For a postgres database service listening on port `5432`, you can use a connection string like this - 

```bash
postgresql://postgres:password@postgres.railway.internal:5432/railway
```

### TCP Proxy

If you'd like to expose the database over the public network, you'll need to set up a [TCP Proxy](/guides/public-networking#tcp-proxying), to proxy public traffic to the Postgres port `5432`:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743194081/docs/tcp-proxy_edctub.png"
alt="Screenshot of TCP proxy configuration"
layout="responsive"
width={1200} height={822} quality={100} />

## Conclusion

That's all it takes to spin up a Postgres service in Railway directly from the official Postgres image.  Hopefully this gives you enough direction to feel comfortable exploring other database images to deploy.  

Remember you can also deploy from a Dockerfile which would generally involve the same features and steps.  For an example of a Dockerfile that builds a custom image with the official Postgres image as base, take a look at <a href="https://github.com/railwayapp-templates/postgres-ssl" target="_blank">Railway's SSL-enabled Postgres image repo</a>.

### Template Marketplace

Need inspiration or looking for a specific database?  Our <a href="https://railway.com/templates" target="_blank">Template Marketplace</a> already includes solutions for many different database services.  You might even find a template for the database you need!

Here are some suggestions to check out - 
- <a href="https://railway.com/template/SMKOEA" target="_blank">Minio</a>
- <a href="https://railway.com/template/clickhouse" target="_blank">ClickHouse</a>
- <a href="https://railway.com/template/dragonfly" target="_blank">Dragonfly</a>
- <a href="https://railway.com/template/kbvIRV" target="_blank">Chroma</a>
- <a href="https://railway.com/template/elasticsearch" target="_blank">Elastic Search</a>



================================================
FILE: src/docs/guides/build-configuration.md
================================================
---
title: Build Configuration
description: Learn how to configure Nixpacks, optimize build caching, choose build providers, and set up watchpaths.
---

Railway will build and deploy your code with zero configuration, but when necessary, there are several ways to configure this behavior to suit your needs.

## Railpack

<PriorityBoardingBanner />

<a href="https://railpack.com" target="_blank">Railpack</a> is a new builder
developed by Railway that produces smaller image sizes and supports all versions
of packages. It is currently in beta and can be enabled from your service
settings.

Find the full list of configuration options in the [Railpack
docs](https://railpack.com/config/environment-variables).

## Nixpacks Options

Railway uses <a href="https://nixpacks.com/docs" target="_blank">Nixpacks</a> to build your code. It has a variety of options that can be configured with [environment variables](/guides/variables#service-variables) which can be defined in your services settings. These include things like:

- Install/build/start commands
- Nix/Apt packages to install
- Directories to cache

For a full list of these options, please view the <a href="https://nixpacks.com/docs/guides/configuring-builds" target="_blank">Nixpacks docs</a>.

You can find a complete list of languages we support out of the box [here](/reference/nixpacks#supported-languages).

## Customize the Build Command

Using the default Nixpacks builder, you can customize the build command that is run from within your service settings.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743192207/docs/build-command_bwdprb.png"
alt="Screenshot of Railway Build Command"
layout="responsive"
width={1200} height={373} quality={80} />

For those familiar with Nixpacks, this gets set as the `--build-cmd` argument during the Nixpacks build.

## Set the Root Directory

The root directory defaults to `/` but can be changed for various use-cases like
[monorepo](/guides/monorepo) projects.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743192841/docs/root-directory_nfzkfi.png"
alt="Screenshot of Root Directory"
layout="responsive"
width={1200} height={421} quality={80} />

When specified, all build and deploy
commands will operate within the defined root directory.

**Note:** The **Railway Config File** does not follow the **Root Directory** path. You have to specify the absolute path for the `railway.json` or `railway.toml` file.

## Configure Watch Paths

Watch paths are <a href="https://git-scm.com/docs/gitignore#_pattern_format" target="_blank">gitignore-style</a> patterns
that can be used to trigger a new deployment based on what file paths have
changed.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743192841/docs/watch-paths_zv62py.png"
alt="Screenshot of Railway Watch Paths"
layout="responsive"
width={1200} height={456} quality={80} />

For example, a monorepo might want to only trigger builds if files are
changed in the `/packages/backend` directory.

When specified, any changes that
don't match the patterns will skip creating a new deployment. Multiple patterns
can be combined, one per line.

_Note, if a Root Directory is provided, patterns still operate from `/`. For a root directory of `/app`, `/app/**.js` would be used as a pattern to match files in the new root._

Here are a few examples of common use-cases:

```gitignore
# Match all TypeScript files under src/
/src/**/*.ts
```

```gitignore
# Match Go files in the root, but not in subdirectories
/*.go
```

```gitignore
# Ignore all Markdown files
**
!/*.md
```

_Note, negations will only work if you include files in a preceding rule._

## Install a Specific Package Using Nixpacks

When using Nixpacks, you can install specific packages by defining them in a nixpacks configuration file. For example:

```toml
[phases.setup]
    aptPkgs = ['wget']
```

See the [Nixpacks docs](https://nixpacks.com/docs/configuration/file) for more information.

## Build Providers

With Nixpacks, we analyze the app source directory and generate a build plan. This determines for which language provider to install packages and runtimes.

Within your Service's settings, under the Builds section, you can define within the multi-select box which Nixpacks language providers you would like to use for your builds. This is useful if you have code that calls libraries that need to be built from another language within your repo.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1668662436/docs/multi-providers_lrxdbp.png"
alt="Screenshot of Railway Build Providers"
layout="responsive"
width={745} height={238} quality={80} />

When multiple providers are defined, Railway will build your service with the language providers (in the order you defined) and ensure your binaries are ready to be called. The runtime(s) will then initialize as soon as you start your application.

## Procfiles

If using Nixpacks, you can override the start command with a <a href="https://nixpacks.com/docs/configuration/procfile" target="_blank">Procfile</a> at the root of your app. Only a single process type is supported at the moment.

HTTP servers should use the `web` process type. This process should listen on
the [PORT environment variable](/guides/public-networking#port-variable) and will receive
HTTP traffic.

_Note: Some buildpacks specify a default start command_

## Specify a Custom Install Command

We do not expose a way to configure a custom install command in the UI, but you can control this using [config as code](/reference/config-as-code#nixpacks-plan) (see Nixpacks Plan -> Install Command).

## Disable Build Layer Caching

By default, Railway will cache build layers to provide faster build times. If you have a need to disable this behavior, set the following environment variable in your service:

```plaintext
NO_CACHE=1
```

## Why Isn't My Build Using Cache?

Since Railway's build system scales up and down in response to demand, cache hit on builds is not guaranteed.

If you have a need for faster builds and rely on build cache to satisfy that requirement, you should consider creating a pipeline to build your own image and deploy your image directly.



================================================
FILE: src/docs/guides/builds.md
================================================
---
title: Builds
description: Understand Railway's build concepts.
---

Let's customize the build process.

Railway will build and deploy your code with zero configuration, but we make it easy to override this behavior as needed. Now that you're warmed up, let's take a look at how you can adjust how your services are built.

The goal of this section is to guide you through the various ways to customize the build process.

#### Build Concepts

|                         |                                                                                                                                                                                                                           |
| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Nixpacks**            | <a href="https://nixpacks.com/docs" target="_blank">Nixpacks</a> takes a source directory and produces an OCI compliant image that can be deployed anywhere. It is the default buildpack used when you deploy on Railway. |
| **Railpack**            | <a href="https://railpack.com" target="_blank">Railpack</a> is a new builder developed by Railway that produces smaller image sizes and supports all versions of packages. Currently in beta.                             |
| **Build Configuration** | Railway provides several ways to configure the build process to produce the desired result. If necessary, you have control over the build command, which root directory to build from, when to trigger a build, etc.      |
| **Dockerfiles**         | Dockerfiles welcome! If you already have a build defined in a Dockerfile within your code repository, Railway will automatically use it to build your service.                                                            |

The following pages will guide you through how to interact with these controls.



================================================
FILE: src/docs/guides/cli.md
================================================
---
title: Using the CLI
description: Learn how to install and use the Railway CLI to manage your projects.
---

The Railway Command Line Interface (CLI) lets you interact with your
Railway project from the command line.

<Image src="https://res.cloudinary.com/railway/image/upload/v1645060494/docs/CLIexample_fiflvb.gif"
alt="GIF of the CLI in Action"
layout="intrinsic"
width={800} height={468} quality={100} />

## Installing the CLI

The Railway CLI can be installed via Homebrew, npm, Scoop, or directly from the source.

### Homebrew (macOS)

In a Terminal, enter the following command:

```bash
brew install railway
```

### npm (macOS, Linux, Windows)

In a Terminal, enter the following command:
```bash
npm i -g @railway/cli
```

This requires version =>16 of [Node.js](https://nodejs.org/en/).

### Shell Script (macOS, Linux, Windows via WSL)

In a Terminal, enter the following command:
```bash
bash <(curl -fsSL cli.new)
```

On Windows, you should use [Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/install)
with a Bash shell.

### Scoop (Windows)

In a PowerShell terminal, enter the following command:
```ps1
scoop install railway
```

This installs a native Windows binary (`.exe`). To learn more about Scoop,
see [https://scoop.sh/](https://scoop.sh/).

### Pre-built Binaries

We publish [pre-built binaries](https://github.com/railwayapp/cli/releases/latest)
on our [GitHub repository](https://github.com/railwayapp/cli) that you can
download and use directly.

### From Source

The Railway CLI is an open source project on [GitHub](https://github.com/railwayapp/cli).
You can build a binary [from source](https://github.com/railwayapp/cli#from-source)
if you wish.

## Authenticating With the CLI

Before you can use the Railway CLI, you must authenticate the CLI to your Railway account:
```bash
railway login
```

This command opens a new tab in your default browser to the [https://railway.com](https://railway.com)
authentication page. Follow the instructions to complete the authentication process.

### Manual Login

You can also authenticate manually using a Pairing Code. This can be useful if
you're authenticating the CLI inside an environment without a browser (e.g. SSH
sessions).

Use the `--browserless` flag to authenticate manually:
```bash
railway login --browserless
```

### Tokens

In situations where user input or interaction isn't possible, such as in CI/CD pipelines, you can set either the `RAILWAY_TOKEN` or `RAILWAY_API_TOKEN` environment variable, based on your specific requirements as detailed below.

A [Project Token](/guides/public-api#project-token) is set via the `RAILWAY_TOKEN` environment variable.

An [Account](/guides/public-api#personal-token) or [Team](/guides/public-api#team-token) Token is set via the `RAILWAY_API_TOKEN` environment variable.

**Note:** You can only use one type of token at a time. If both are set, the `RAILWAY_TOKEN` variable will take precedence.

#### Project Tokens

You can use [Project Tokens](/guides/public-api#project-token) to authenticate project-level actions.

Project Tokens allow the CLI to access all the project-level actions in the environment set when the token was created.

Some actions you can perform with a project token include -
- Deploying code - `railway up`
- Redeploying a deployment - `railway redeploy`
- Viewing build and deployment logs - `railway logs`

Some actions you **cannot** perform with a project token include -
- Creating a new project - `railway init`
- Printing information about the user - `railway whoami`
- Linking to another workspace - `railway link`

Use the token by setting the `RAILWAY_TOKEN` environment variable and then running `railway <command>`.

```bash
RAILWAY_TOKEN=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX railway up
```

#### Account Tokens

Account Tokens come in two types - [Personal Account Tokens](/reference/public-api#personal-token) and [Team Tokens](/reference/public-api#team-token).

You can use Account Tokens to authenticate all CLI actions across all workspaces.

However, you can only use Team tokens to authenticate actions on projects within the workspace the token was scoped to when it was created.

Some actions you can perform with a personal account token include -

- Creating a new project - `railway init`
- Printing information about the user - `railway whoami`

Some actions you **cannot** perform with [Team Token](/reference/public-api#team-token) include -

- Printing information about the user - `railway whoami`
- Linking to another workspace - `railway link`

Use the token by setting the `RAILWAY_API_TOKEN` environment variable and then running `railway <command>`.

```bash
RAILWAY_API_TOKEN=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX railway whoami
```

## Common Examples of CLI Usage

Below are some of the most commonly used CLI commands. Find a complete list of CLI commands in the [CLI API reference page](/reference/cli-api).

### Link to a Project

To associate a project and environment with your current directory:

<Image src="https://res.cloudinary.com/railway/image/upload/v1631917786/docs/railway-link_juslvt.png"
alt="Screenshot of Railway"
layout="intrinsic"
width={389} height={116} quality={80} />

```bash
# Link to a project
railway link
```

This prompts you to select a team, project, and environment to associate with
your current directory. Any future commands will be run against this project and environment.

### Link to a Service

Associate a service in a project and environment with your current directory:

```bash
# Link to a service
railway service
```

This links your current directory with the chosen service.

### Create a Project

Create a new project directly from the command line.

```bash
# Create a new project
railway init
```
This prompts you to name your project and select a team to create the project in.

### Local Development

Run code locally with the same environment variables as your Railway project.

```bash
# Run <cmd> locally with the same environment variables as your Railway project
railway run <cmd>
```

For example, to run your Node.js project with your remote environment variables:

```bash
# Run your Node.js project with your remote environment variables
railway run npm start
```

### Local Shell

Open a new local shell with Railway environment variables. Similar to `railway run` but opens a new shell.

```bash
# Open a new shell with Railway environment variables
railway shell
```

### Environments

Projects might have multiple environments, but by default the CLI links to the `production` environment.
You can change the linked environment with the `environment` command.

```bash
# Change the linked environment
railway environment
```

### Deploy

Deploy the linked project directory (if running from a subdirectory, the project root is still deployed).

```bash
# Show build logs
railway up

# Return immediately after uploading
railway up --detach
```

If there are multiple services within your project, the CLI will prompt you for a service to deploy to.

### Add Database Service

Provision database services for a project.

```bash
railway add
```
Prompts you to select one or more databases to provision for your project.

### Logout

```bash
railway logout
```

### Contributing

Our CLI is open source. Contribute to the development of the Railway CLI by opening an issue or Pull Request on our [GitHub Repo](https://github.com/railwayapp/cli).

[You can see the full documentation of the CLI API here.](/reference/cli-api)



================================================
FILE: src/docs/guides/config-as-code.md
================================================
---
title: Using Config as Code
description: Learn how to manage and deploy apps on Railway using config as code with toml and json files.
---

Railway supports defining the configuration for a single deployment in a file
alongside your code in a `railway.toml` or `railway.json` file.

Everything in the build and deploy sections of the service settings page can be specified in this configuration file.

The settings in the dashboard will not be updated with the settings defined in
code. Configuration defined in code will always override values from the
dashboard.

## Toml vs Json

The format you use for your config-as-code (toml or json) file is entirely dependent on preference, and the resulting behavior in Railway is the same no matter which you choose.

For example, these configuration definitions are equivalent:


<div style={{ display: 'flex', flexDirection: 'row', gap: '5px', fontSize: '0.9em', alignItems: 'stretch' }}>
    <div style={{ flex: '1 1 50%', overflow: 'auto', minWidth: '200px', maxWidth: '350px' }}>
        ```toml
        [build]
        builder = "nixpacks"
        buildCommand = "echo building!"

        [deploy]
        preDeployCommand = ["npm run db:migrate"]
        startCommand = "echo starting!"
        healthcheckPath = "/"
        healthcheckTimeout = 100
        restartPolicyType = "never"





        --
        ```
        <p style={{ marginTop: '-0.2em', fontSize: '0.8em', opacity: '0.6' }}>A `railway.toml` file</p>
    </div>
    <div style={{ flex: '1 1 50%', overflow: 'auto', minWidth: '200px', maxWidth: '350px' }}>
        ```json
        {
          "$schema": "https://railway.com/railway.schema.json",
          "build": {
            "builder": "NIXPACKS",
            "buildCommand": "echo building!"
            },
          "deploy": {
            "preDeployCommand": ["npm run db:migrate"],
            "startCommand": "echo starting!",
            "healthcheckPath": "/",
            "healthcheckTimeout": 100,
            "restartPolicyType": "never"
            }
        }

        ```
        <p style={{ marginTop: '-0.2em', fontSize: '0.8em', opacity: '0.6' }}>A `railway.json` file</p>
    </div>
</div>

## JSON Schema

You can find an always up-to-date [JSON schema](https://json-schema.org/) at [railway.com/railway.schema.json](https://railway.com/railway.schema.json).

If you include it in your `railway.json` file, many editors (e.g. VSCode) will provide autocomplete and documentation.

```json
{
  "$schema": "https://railway.com/railway.schema.json"
}
```


## Understanding Config Source

On a service's deployment details page, all the settings that a deployment went out with are shown.

For settings that come from a configuration file, there is a file icon. Hovering over the icon will show exactly what part of the file the values originated from.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743195106/docs/configuration_emrjth.png"
alt="Screenshot of Deployment Details Pane"
layout="responsive"
width={1200} height={631} quality={100} />


## Using a Custom Config as Code File

You can use a custom config file by setting it on the service settings page. The file is relative to your app source.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743195631/docs/config-file_f1wf32.png"
alt="Screenshot of Rollback Menu"
layout="responsive"
width={1200} height={374} quality={100} />

## Configurable Settings

Find a list of all of the configurable settings in the [config as code reference page](/reference/config-as-code#configurable-settings).



================================================
FILE: src/docs/guides/create.md
================================================
---
title: Create a Template
description: Learn how to create reusable templates on Railway to enable effortless one-click deploys.
---

Creating a template allows you to capture your infrastructure in a reusable and distributable format.  

By defining services, environment configuration, network settings, etc., you lay the foundation for others to deploy the same software stack with the click of a button.

If you [publish your template](/guides/publish-and-share) to the <a href="https://railway.com/templates" target="_blank">marketplace</a>, you can even <a href="https://railway.com/open-source-kickback" target="_blank">collect a kickback</a> from the usage of it!

## How to Create a Template

You can either create a template from scratch or base it off of an existing project.

### Starting from Scratch

To create a template from scratch, head over to the <a href="https://railway.com/compose" target="_blank">template composer</a> then add and configure your services:

- Add a service by clicking the `Add New` button in the top right-hand corner, or through the command palette (`CMD + K` -> `+ New Service`)
- Select the service source (GitHub repo or Docker Image)
- Configure the service variables and settings

  <Image src="https://res.cloudinary.com/railway/image/upload/v1715724184/docs/templates-v2/composer_aix1x8.gif"
  alt="Template Editor"
  layout="intrinsic"
  width={900} height={1120} quality={80} />

- Once you've added your services, click `Create Template` 
- You will be taken to your templates page where you can copy the template URL to share with others

Note that your template will not be available on the template marketplace, nor will be eligible for a kickback, until you [publish](/guides/publish-and-share) it.


### Private Repo Support

It's now possible to specify a private GitHub repo when creating a template.

This feature is intended for use among [Teams](/reference/teams) and [Organizations](/reference/teams). Users supporting a subscriber base may also find this feature helpful to distribute closed-source code. 

To deploy a template that includes a private repo, look for the `GitHub` panel in the `Account Integrations` section of [General Settings](https://railway.com/account). Then select the `Edit Scope` option to grant Railway access to the desired private repos. 

<Image
src="https://res.cloudinary.com/railway/image/upload/v1721350229/docs/github-private-repo_m46wxu.png"
alt="Create a template from a private GitHub repositories"
layout="intrinsic"
width={1599}
height={899}
quality={80}
/>

If you do not see the `Edit Scope` option, you may still need to connect GitHub to your Railway account.

### Convert a Project Into a Template

You can also convert an existing project into a ready-made Template for other users.

- From your project page, click `Settings` in the right-hand corner of the canvas
- Scroll down until you see **Generate Template from Project**
- Click `Create Template`

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743198969/docs/create-template_ml13wy.png"
alt="Generate template from project"
layout="intrinsic"
width={1200}
height={380}
quality={80}
/>

- You will be taken to the template composer page, where you should confirm the settings and finalize the template creation

## Configuring Services

Configuring services using the <a href="https://railway.com/compose" target="_blank">template composer</a> is very similar to building a live project in the canvas.

Once you add a new service and select the source, you can configure the following to enable successful deploys for template users:

- **Variables tab**
  - Add required [Variables](/guides/variables).
    *Use [reference variables](/guides/variables#reference-variables) where possible for a better quality template*
- **Settings tab**
  - Add a [Root Directory](/guides/monorepo) (Helpful for monorepos)
  - [Enable Public Networking](/guides/public-networking) with TCP Proxy or HTTP
  - Set a custom [Start command](/guides/start-command)
  - Add a [Healthcheck Path](/guides/healthchecks#configure-the-healthcheck-path)
- **Add a volume**
  - To add a volume to a service, right-click on the service, select Attach Volume, and specify the [Volume mount path](/guides/volumes)


### Specifying a Branch

To specify a particular GitHub branch to deploy, simply enter the full URL to the desired branch in the Source Repo configuration.  For example -

- This will deploy the `main` branch:  `https://github.com/railwayapp-templates/postgres-ssl`
- This will deploy the `new` branch:  `https://github.com/railwayapp-templates/postgres-ssl/tree/new`

### Template Variable Functions

Template variable functions allow you to dynamically generate variables (or parts of a variable) on demand when the template is deployed.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743198983/docs/template-variables_dp5pg5.png"
alt="Template Variable Functions"
layout="intrinsic"
width={1200} height={428} quality={100} />

When a template is deployed, all template variable functions are executed and the result replaces the `${{ ... }}` in the variable.

Use template variables to generate a random password for a database, or to generate a random string for a secret.

The current template variable functions are:

1. `secret(length?: number, alphabet?: string)`: Generates a random secret (32 chars by default).  

    **Tip:** You can generate Hex or Base64 secrets by constructing the appropriate alphabet and length.

    - `openssl rand -base64 16` → `${{secret(22, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/")}}==`
    - `openssl rand -base64 32` → `${{secret(43, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/")}}=`
    - `openssl rand -base64 64` → `${{secret(86, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/")}}==`
    - `openssl rand -hex 16` → `${{secret(32, "abcdef0123456789")}}`
    - `openssl rand -hex 32` → `${{secret(64, "abcdef0123456789")}}`
    - `openssl rand -hex 64` → `${{secret(128, "abcdef0123456789")}}`

    Or even generate a UUIDv4 string -

    `${{secret(8, "0123456789abcdef")}}-${{secret(4, "0123456789abcdef")}}-4${{secret(3, "0123456789abcdef")}}-${{secret(1, "89ab")}}${{secret(3, "0123456789abcdef")}}-${{secret(12, "0123456789abcdef")}}`

2. `randomInt(min?: number, max?: number)`: Generates a random integer between min and max (defaults to 0 and 100)

## Managing Your Templates

You can see all of your templates on your <a href="https://railway.com/workspace/templates" target="_blank">Workspace's Template page</a>. Templates are separated into Personal and Published templates.

You can edit, publish/unpublish and delete templates.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743199089/docs/templates_xyphou.png"
 alt="Account templates page"
 layout="intrinsic"
 width={1200}
 height={668}
 quality={80}
/>



================================================
FILE: src/docs/guides/cron-jobs.md
================================================
---
title: Running a Scheduled Job
description: Learn how to run cron jobs on Railway.
---

Scheduled Jobs, or Cron Jobs, allow you to start a service on a defined schedule.

Services configured as cron jobs are expected to execute a task, and terminate as soon as that task is finished, leaving no open resources.

## Configuring a Cron Job

To configure a cron job -

1. Select a service and go to the Settings section. 
2. Within "Cron Schedule", input a [crontab expression](/reference/cron-jobs#crontab-expressions).
3. Once the setting is saved, the service will run according to the cron schedule.

Find more information about cron jobs, including examples of cron expressions, in the [reference page for Cron Jobs](/reference/cron-jobs).

## Why Isn't My Cron Running as Scheduled?

An important requirement of a service that runs as a Cron, is that it terminates on completion and leaves no open resources.  If the code that runs in your Cron service does not exit, subsequent executions of the Cron will be skipped.

If you see that a previous execution of your Cron service has a status of `Active`, the execution is still running and any new executions will not be run.

For more information on Service execution requirements, see the [Service Execution Requirements](/reference/cron-jobs#service-execution-requirements) section of the Cron Jobs reference.



================================================
FILE: src/docs/guides/database-view.md
================================================
---
title: Using the Database View
description: Learn how to read, insert and edit data via the database view on Railway.
---

Baked into the four, one-click database templates that Railway provides, is a Database Management Interface, this allows you to perform common actions on your Database such as viewing and editing the contents of your database services in Railway.

## SQL Interfaces

<Image src="https://res.cloudinary.com/railway/image/upload/v1701904581/docs/databases/dataTab_vtj7me.png"
alt="Screenshot of Postgres Service Panel"
layout="intrinsic"
width={995} height={528} quality={80} />

For MySQL and Postgres, Railway displays the tables contained within an instance by default; this is called the Table View.

Shift-clicking on one or multiple tables exposes additional options such as the ability to delete the table(s).

### Creating a Table

<Image src="https://res.cloudinary.com/railway/image/upload/v1636426105/docs/table_create_kuvnjg.png"
alt="Screenshot of Create Table interface"
layout="intrinsic"
width={928} height={396} quality={80} />

Under the Table View, clicking the Create Table button at the bottom right of the interface navigates users to the Create Table interface.

For each column a user wants to add to the database, the interface accepts a `name`, `type`, `default_value` and `constraints`. Depending on the SQL database that is used, valid types and constraints may vary.

### Viewing and Editing Entries

When a table is clicked, the interface navigates into the Entries View.

Under the Entries View, selecting an existing entry exposes the ability to edit the entry. When button that allows one to add entries to the table.

<Image src="https://res.cloudinary.com/railway/image/upload/v1636426105/docs/edit_row_tobmdh.png"
alt="Screenshot of Expanded Project Usage Pane"
layout="intrinsic"
width={803} height={457} quality={80} />

### Add SQL Column

Selecting the add column in the entries view opens a modal that prompts you to add a new column to the table.

## NoSQL Interfaces

For non-structured data, Railway has interfaces that permit users to add and edit data within the service.

### Redis View

<Image src="https://res.cloudinary.com/railway/image/upload/v1636426105/docs/redis_view_jna8ho.png"
alt="Screenshot of Expanded Project Usage Pane"
layout="intrinsic"
width={732} height={419} quality={80} />

With Redis, Railway displays the keys contained within a database instance by default.

### MongoDB Document View

With MongoDB, Railway displays a list of document collections. Users can add additional collections or add/edit documents within the collection.

### Adding MongoDB Databases

<Image src="https://res.cloudinary.com/railway/image/upload/v1636424673/docs/add_mongo_db_ujjcgr.png"
alt="Screenshot of Expanded Project Usage Pane"
layout="intrinsic"
width={552} height={516} quality={80} />

Within the Collections View, clicking the plus icon next to the top dropdown allows you to create a new Database.



================================================
FILE: src/docs/guides/databases.md
================================================
---
title: Database Services
description: Database services on Railway.
---

Ready for databases?

Railway's platform primitives are built with flexibility in mind, allowing you to build any type of service your system requires, including database services.

#### Feature Highlights
|||
|-|-|
| **Essential Features** | Railway has developed some essential features for enabling any type of database service to run in Railway - Volumes for persisting your data, and TCP Proxy for facilitating communication to your database from the internet.                                                                                   |
| **Database Templates** | Not only is our Template Marketplace filled with many different database service templates, but Railway also maintains several templates for some of the most popular databases out there - PostgreSQL, MySQL, MongoDB, and Redis. |
|||

Use the next few pages to understand how to build your own database service or how to use the templates available.

Note that the Railway-provided databases are still considered unmanaged services, meaning you will need to take the appropriate steps to ensure they are optimized for your usecase.


================================================
FILE: src/docs/guides/deploy.md
================================================
---
title: Deploy a Template
description: Learn how to deploy Railway templates.
---

Templates allow you to deploy a fully configured project that is automatically
connected to infrastructure.

You can find featured templates on our <a href="https://railway.com/templates" target="_blank">template marketplace</a>.

## Template Deployment Flow

To deploy a template -

- Find a template from the marketplace and click `Deploy Now`
- If necessary, configure the required variables, and click `Deploy`
- Upon deploy, you will be taken to your new project containing the template service(s)
  - Services are deployed directly from the defined source in the template configuration
  - After deploy, you can find the service source by going to the service's settings tab
  - Should you need to make changes to the source code, you will need to [eject from the template repo](#eject-from-template-repository) to create your own copy.  See next section for more detail.

*Note:  You can also deploy templates into existing projects, by clicking `+ New` from your project canvas and selecting `Template`.*

## Eject from Template Repository

<Banner variant="info">
As of March 2024, the default behavior for deploying templates, is to attach to and deploy directly from the template repository.  Therefore, you will not automatically get a copy of the repository on deploy.  Follow the steps below to create a repository for yourself.
</Banner>

By default, services deployed from a template are attached to and deployed directly from the template repository.  In some cases, you may want to have your own copy of the template repository.  

Follow these steps to eject from the template repository and create a mirror in your own GitHub account.

1. In the [service settings](/overview/the-basics#service-settings), under Source, find the **Upstream Repo** setting
2. Click the `Eject` button
3. Select the appropriate GitHub organization to create the new repository
4. Click `Eject service`

## Updatable Templates

When you deploy any services from a template based on a GitHub repo, every time you visit the project in Railway, we will check to see if the project it is based on has been updated by its creator.

If it has received an upstream update, we will create a branch on the GitHub repo that was created when deploying the template, allowing for you to test it out within a PR deploy.

If you are happy with the changes, you can merge the pull request, and we will automatically deploy it to your production environment.

If you're curious, you can read more about how we built updatable templates in this <a href="https://blog.railway.com/p/updatable-starters" target="_blank">blog post</a>

*Note: This feature only works for services based on GitHub repositories.  At this time, we do not have a mechanism to check for updates to Docker images from which services may be sourced.*




================================================
FILE: src/docs/guides/deployment-actions.md
================================================
---
title: Deployment Actions
description: Explore the full range of actions available on the Service Deployments tab to manage your deployments.
---

Various actions can be taken on Deployments from within the Service -> Deployments tab and clicking on the three dots at the end of a previous deployment.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1645148376/docs/deployment-photo_q4q8in.png"
alt="Screenshot of Deploy View"
layout="responsive"
width={1103} height={523} quality={80} />

## Rollback

Rollback to previous deployments if mistakes were made.  To perform a rollback, click the three dots at the end of a previous deployment, you will then be asked to confirm your rollback.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1645149734/docs/rollback_mhww2u.png"
alt="Screenshot of Rollback Menu"
layout="responsive"
width={1518} height={502} quality={80} />

A deployment rollback will revert to the previously successful deployment. Both the Docker
image and custom variables are restored during the rollback process.

*Note: Deployments older than your [plan's retention policy](/reference/pricing/plans#image-retention-policy) cannot be restored via rollback, and thus the rollback option will not be visible.*

## Redeploy

A successful, failed, or crashed deployment can be re-deployed by clicking the three dots at the end of a previous deployment.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1666380373/docs/redeploy_ghinkb.png"
alt="Screenshot of Redeploy Menu"
layout="responsive"
width={888} height={493} quality={100} />

This will create an new deployment with the exact same code and build/deploy configuration.

*Note: To trigger a deployment from the latest commit, use the Command Pallette: `CMD + K` -> "Deploy Latest Commit".  This will deploy the latest commit from the **Default** branch in GitHub.*

*Currently, there is no way to force a deploy from a branch other than the Default without [connecting it in your service settings](/guides/github-autodeploys#configure-the-github-branch-for-deployment-triggers).*

## Cancel

Users can cancel deployments in progress by clicking the three dots at the end
of the deployment tab and select Abort deployment. This will cancel the
deployment in progress.

## Remove

If a deployment is completed, you can remove it by clicking the three dots
at the end of the deployment tab and select Remove. This will remove the
deployment and stop any further project usage.

## Restart a Crashed Deployment

When a Deployment is `Crashed`, it is no longer running because the underlying process exited with a non-zero exit code - if your deployment exits successfully (exit code 0), the status will remain `Success`.

Railway automatically restarts crashed Deployments up to 10 times (depending on your [Restart Policy](/guides/restart-policy#plan-limitations)). After this limit is reached, your deployment status is changed to `Crashed` and notifying webhooks & emails are sent to the project's members.

Restart a `Crashed` Deployment by visiting your project and clicking on the "Restart" button that appears in-line on the Deployment:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1643239507/crash-ui_b2yig1.png"
alt="Screenshot of Deploy Options"
layout="responsive"
width={947} height={156} quality={80} />

Restarting a crashed Deployment restores the exact image containing the code & configuration of the original build. Once the Deployment is back online, its status will change back to `Success`.

You can also click within a deployment and using the Command Palette restart a deployment at any state.

## Deployment Dependencies - Startup Ordering

You can control the order your services start up with [Reference Variables](https://docs.railway.com/guides/variables#reference-variables).
When one service references another, it will be deployed after the service it is referencing when applying a [staged change](https://docs.railway.com/guides/staged-changes) or [duplicating an environment](https://docs.railway.com/guides/environments#create-an-environment).

Services that have circular dependencies will simply ignore them and deploy as normal.

For example, let's say you're deploying an API service that depends on a [PostgreSQL database](https://docs.railway.com/guides/postgresql).

When you have services with reference variables like:
- API Service has `DATABASE_URL=${{Postgres.DATABASE_URL}}` which is defined on your Postgres Service in the same project.

Railway will:
1. Deploy the Postgres Service first
2. Then deploy the API Service (since it has a reference variable to Postgres)



================================================
FILE: src/docs/guides/deployment-teardown.md
================================================
---
title: Deployment Teardown
description: Learn how to configure the deployment lifecycle to create graceful deploys with zero downtime.
---

By default, Railway maintains only one deploy per service. This means that if you trigger a new deploy, the previous version will be stopped and removed after the new version deploys. There are two configuration options in the "Settings" pane for a service that allow you to slightly overlap the new and preview versions for zero downtime:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1750178677/docs/deployment-teardown-guide/s5pqob0j8nreoojbo6dj.png"
alt="Screenshot of a teardown settings"
layout="responsive"
width={642} height={324} quality={80}/>

To learn more about the full deployment lifecycle, see the [deploy reference](/reference/deployments).

#### Overlap Time

Once the new deployment is active, the previous deployment remains active for a configurable amount of time. You can control this via the "Settings" pane for the service. It can also be configured via [code](/reference/config-as-code#overlap-seconds) or the [`RAILWAY_DEPLOYMENT_OVERLAP_SECONDS` service variable](/reference/variables#user-provided-configuration-variables).

#### Draining Time

Once the new deployment is active, the previous deployment is sent a SIGTERM signal and given time to gracefully shutdown before being forcefully stopped with a SIGKILL. The time to gracefully shutdown can be controlled via the "Settings" pane. It can also be configured via [code](/reference/config-as-code#draining-seconds) or the [`RAILWAY_DEPLOYMENT_DRAINING_SECONDS` service variable](/reference/variables#user-provided-configuration-variables).



================================================
FILE: src/docs/guides/deployments.md
================================================
---
title: Deployments
description: Learn how to configure deployments on Railway.
---

Let's configure your deployments!

Now that you understand how to tailor your builds if necessary, let's get into the various ways you can control how your services are deployed and run.  Like builds, when you deploy a service, Railway will apply some defaults that can easily be overridden when necessary.

#### Deployment Concepts

|||
|-|-|
| **Deployment Controls** | Deployments are attempts to build and run your code.  Railway provides controls for changing the default run behavior, and for acting on existing deployments, for example rolling back to a previous deployment or restarting a service.                                                                                    |
| **Auto Deploys**          | If you have deployed from your GitHub repo, we will automatically build and deploy your code when you push a change to the connected branch.                                                                                                                    |
| **Regional Deployments** | By default, services are deployed to your [preferred region](https://railway.com/workspace). To optimize performance for your users in other parts of the world, we offer regional deployments. |
| **Scaling** | Scaling your application has never been so easy.  Vertical auto-scaling is performed without any configuration on your part.  Horizontal scaling is made possible with replicas. |
| **Healthchecks** | Healthchecks can be configured on your services to control when a new deployment is deemed healthy and ready for connections.                                                                                                            |
| **Monorepos** | Using a monorepo?  We do too!  To deploy your monorepo, you'll need to let us know how your repo is structured using the various configuration options.                                                                                                           |
| **Scheduled Jobs**          | Scheduled Jobs, or Cron Jobs, are pieces of code that are executed on a schedule.  You'll find it's easy to schedule a job to run, using our Cron Schedule configuration.                                                                                                                     |
| **Usage Optimization**          | Give yourself some peace of mind by using the various controls to tighten your usage.  You can set Usage Limits and configure your deployments to auto-sleep when inactive.                                                                                                                    |
|||

Dive into the next pages to learn how to configure these items.



================================================
FILE: src/docs/guides/django.md
================================================
---
title: Deploy a Django App
description: Learn how to deploy a Python Django app to Railway with this step-by-step guide. It covers quick setup, database integration, private networking, Celery, one-click deploys and other deployment strategies.
---

[Django](https://www.djangoproject.com) is a powerful Python web framework that simplifies web development by providing ready-to-use tools for rapid development and clean design. 

It’s free, open-source, and comes with a range of features to streamline tasks like authentication, routing, and database management, so developers can focus on building their applications without handling everything from scratch.

## Create a Django App

**Note:** If you already have a Django app locally or on GitHub, you can skip this step and go straight to the [Deploy Django App on Railway](#deploy-django-app-on-railway).

To create a new Django app, ensure that you have [Python](https://www.python.org/downloads/) and [Django](https://docs.djangoproject.com/en/5.1/intro/install/) installed on your machine.

Follow the steps below to set up the project in a directory.

Create a virtual environment
```bash
python -m venv env
```

Activate the virtual environment
```bash
source env/bin/activate
```

**Note:** For windows developers, run it as `env\Scripts\activate` in your terminal.

Install Django
```bash
python -m pip install django
```

Once everything is set up, run the following command in your terminal to provision a new Django project:

```bash
django-admin startproject liftoff
```

This command will create a new Django project named `liftoff`. 

Next, `cd` into the directory and run `python manage.py runserver` to start your project.

Open your browser and go to `http://127.0.0.1:8000` to see the project. You'll see the Django welcome page with a "The install worked successfully! Congratulations!" paragraph.

**Note:** You'll see a red notice about unapplied migration(s). You can ignore them for now. We'll run them when we deploy the project.

Now that your app is running locally, let’s move on to make some changes and install some dependencies before deployment.

## Configure Database, Static Files & Dependencies


1. Install the following packages within the `liftoff` directory, where you can see the `manage.py` file.

```bash
python -m pip install gunicorn whitenoise psycopg[binary,pool]
```

[whitenoise](https://whitenoise.readthedocs.io/en/stable/index.html) is a Python package for serving static files directly from your web app. It serves compressed content and sets far-future cache headers on content that won't change.

[gunicorn](https://gunicorn.org) is a production ready web server.

[pyscog](https://www.psycopg.org/psycopg3/docs) is python package that allows Django work with Postgresql.

2. Import the `os` module:

Open the `liftoff/settings.py` file located in the inner `liftoff` directory (the one containing the main project settings).

At the top of the file, add the following line to import the `os` module, placing it just before the `Path` import:

```python
import os
from pathlib import Path
```

3. Configure the database and run migrations:

A fresh Django project uses SQLite by default, but we need to switch to PostgreSQL.

Create a database named `liftoff_dev` in your local Postgres instance.

Open the `liftoff/settings.py` file. In the Database section, replace the existing configuration with:

```python

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Set default values for the environment variables if they’re not already set
os.environ.setdefault("PGDATABASE", "liftoff_dev")
os.environ.setdefault("PGUSER", "username")
os.environ.setdefault("PGPASSWORD", "")
os.environ.setdefault("PGHOST", "localhost")
os.environ.setdefault("PGPORT", "5432")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ["PGDATABASE"],
        'USER': os.environ["PGUSER"],
        'PASSWORD': os.environ["PGPASSWORD"],
        'HOST': os.environ["PGHOST"],
        'PORT': os.environ["PGPORT"],
    }
}
```

Replace the values of `PGUSER`, `PGPASSWORD` with your local credentials.

Run `python manage.py migrate` in your terminal to apply the database migrations. Once it completes successfully, check your database. You should see the auth and other Django tables created.

4. Static files configuration:

We'll configure Django to serve static files using [WhiteNoise](https://whitenoise.readthedocs.io/en/stable/index.html). 

Open `liftoff/settings.py` and configure the static files settings:

```python
STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
```

Add the WhiteNoise middleware in the **MIDDLEWARE** section, just below the [security middleware](https://docs.djangoproject.com/en/5.1/ref/middleware/#module-django.middleware.security):

```python
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
```

5. Update `ALLOWED_HOSTS` settings:

```python
ALLOWED_HOSTS = ["*"]
```

This setting represents the list of all the host/domain names our Django project can serve.

6. Create a **static** folder:

Inside your `liftoff` directory, create a static folder where all static assets will reside.

7. Create a `requirements.txt` file: 
 
To track all the dependencies for deployment, create a `requirements.txt` file:

```bash
pip freeze > requirements.txt
```

**Note:** It's only safe to run the command above in a virtual environment, else it will freeze all python packages installed on your system. 

With these changes, your Django app is now ready to be deployed to Railway!

## Deploy Django App on Railway

Railway offers multiple ways to deploy your Django app, depending on your setup and preference. Choose any of the following methods:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [Using the CLI](#deploy-from-the-cli).
3. [From a GitHub repository](#deploy-from-a-github-repo).

## One-Click Deploy From a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. It sets up a Django app along with a Postgres database.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/GB6Eki)

After deploying, we recommend that you [eject from the template](/guides/deploy#eject-from-template-repository) to create a copy of the repository under your own GitHub account. This will give you full control over the source code and project.

## Deploy From the CLI

To deploy the Django app using the Railway CLI, please follow the steps:

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Django app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
 
    **Note:** You'll encounter an error about the PGDATABASE environment not set. Don't worry, we'll fix that in the next steps.
4. **Add a Database Service**:
    - Run `railway add`.
    - Select `PostgreSQL` by pressing space and hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
5. **Configure Environment Variables**:
    - Go to your app service <a href="/overview/the-basics#service-variables">**Variables**</a> section and add the following:
        - `PGDATABASE`: Set the value to `${{Postgres.PGDATABASE}}` (this references the Postgres database name). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).  
        - `PGUSER`: Set the value to `${{Postgres.PGUSER}}`
        - `PGPASSWORD`: Set the value to `${{Postgres.PGPASSWORD}}`
        - `PGHOST`: Set the value to `${{Postgres.PGHOST}}`
        - `PGPORT`: Set the value to `${{Postgres.PGPORT}}`
    - Use the **Raw Editor** to add any other required environment variables in one go.
6. **Redeploy the App Service**:
    - Click **Deploy** on the app service on the Railway dashboard to apply your changes.
7. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
8. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/v1729121823/docs/quick-start/django_app.png"
alt="screenshot of the deployed Django project"
layout="responsive"
width={2783} height={2135} quality={100} />


## Deploy From a GitHub Repo

To deploy the Django app to Railway, start by pushing the app to a GitHub repo. Once that’s set up, follow the steps below to complete the deployment process.

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables**:
    - Click **Add Variables** and configure all the necessary environment variables for your app.
        - `PGDATABASE`: Set the value to `${{Postgres.PGDATABASE}}` (this references the Postgres database name). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).  
        - `PGUSER`: Set the value to `${{Postgres.PGUSER}}`
        - `PGPASSWORD`: Set the value to `${{Postgres.PGPASSWORD}}`
        - `PGHOST`: Set the value to `${{Postgres.PGHOST}}`
        - `PGPORT`: Set the value to `${{Postgres.PGPORT}}`

    **Note:** We don't have the Postgres Database service yet. We'll add that soon.
4. **Add a Database Service**:
    - Right-click on the Railway project canvas or click the **Create** button.
    - Select **Database**.
    - Select **Add PostgreSQL** from the available databases.
        - This will create and deploy a new Postgres database service for your project.
5. **Deploy the App**: 
    - Click **Deploy** to start the deployment process and apply all changes.
    - Once deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
6. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Django app](https://nixpacks.com/docs/providers/python).
7. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Django apps effortlessly!

**Note:** The next step shows how to configure and run your Django app along with Celery and Celery beat.

## Set Up Database, Migrations, Celery Beat and Celery

This setup deploys your Django app on Railway, ensuring that your database, scheduled tasks (crons)--Celery Beat, and queue workers (Celery) are all fully operational.

The deployment structure follows a "majestic monolith" architecture, where the entire Django app is managed as a single codebase but split into four separate services on Railway:
- **App Service**: Handles HTTP requests and user interactions.
- **Cron Service**: Manages scheduled tasks (e.g., sending emails or running reports) using Celery Beat.
- **Worker Service**: Processes background jobs from the queue using Celery.
- **Database Service**: Stores and retrieves your application's data.

<Image src="https://res.cloudinary.com/railway/image/upload/v1731604331/docs/quick-start/deployed_django_app_architecture.png"
alt="screenshot of the deploy architecture of the Django app"
layout="responsive"
width={3237} height={1951} quality={100} />
_My Monolith Django app_


**Note:** This guide follows the assumption that you have installed Celery and Celery Beat in your app, the broker uses Redis and you already have a Postgres database service provisioned for your app as shown earlier. 

Please follow these steps to get it setup on Railway:

1. Create a Redis Database service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a> by clicking the **Create** button. Then select **Database** and choose **Add Redis**.
     - Click on **Deploy**.
3. Create a new service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a> by clicking the **Create** button. Then select **Empty service**.
    -  Name the service **App Service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a> to configure it.
        - **Note:** If you followed the guide from the beginning, simply rename the existing service to **App Service**.
    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.
    - Go to the top of the service and click on <a href="/overview/the-basics#service-variables">**Variables**</a>.
    - Add all the necessary environment variables required for the Django app especially the ones listed below.
        - `REDIS_URL`: Set the value to `${{Postgres.REDIS_URL}}`
        - `PGUSER`: Set the value to `${{Postgres.PGUSER}}`
        - `PGPASSWORD`: Set the value to `${{Postgres.PGPASSWORD}}`
        - `PGHOST`: Set the value to `${{Postgres.PGHOST}}`
        - `PGPORT`: Set the value to `${{Postgres.PGPORT}}`
        - `PGDATABASE`: Set the value to `${{Postgres.PGDATABASE}}` (this references the Postgres database name). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
    - Click **Deploy**.
4. Create a new service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a> by clicking the **Create** button. Then select **Empty service**. 
    - Name the service **Cron Service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a>.
    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.
    - Add `celery -A liftoff beat -l info --concurrency=3` to the <a href="/guides/start-command">**Custom Start Command**</a> in the **Deploy** section. 
        - _Note:_ `liftoff` is the name of the app. You can find the app name in your Django project’s main folder, typically in the directory containing `settings.py`.
        - The `--concurrency=3` option here means it can process up to 3 tasks in parallel. You can adjust the [concurrency level](https://docs.celeryq.dev/en/latest/userguide/workers.html#concurrency) based on your system resources. The higher the level, the more memory and resources it consumes.
    - Head back to the top of the service and click on  <a href="/overview/the-basics#service-variables">**Variables**</a>.
    - Add all the necessary environment variables especially those highlighted already in step 2.
    - Click **Deploy**.
5. Create a new service again on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a>. 
    - Name the service **Worker Service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a>.
    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.
    - Add `celery -A liftoff worker -l info --concurrency=3` to the <a href="/guides/start-command">**Custom Start Command**</a> in the **Deploy** section. 
        - _Note:_ `liftoff` is the name of the app. You can find the app name in your Django project’s main folder, typically in the directory containing `settings.py`.
        - The `--concurrency=3` option here means it can process up to 3 tasks in parallel. You can adjust the [concurrency level](https://docs.celeryq.dev/en/latest/userguide/workers.html#concurrency) based on your system resources. The higher the level, the more memory and resources it consumes.
    - Head back to the top of the service and click on <a href="/overview/the-basics#service-variables">**Variables**</a>.
    - Add all the necessary environment variables especially those highlighted already in step 2.
    - Click **Deploy**.

At this point, you should have all services deployed and connected to the Postgres and Redis Database service:

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731604331/docs/quick-start/deployed_django_app_architecture.png"
alt="screenshot of the deploy architecture of the Django app"
layout="responsive"
width={3237} height={1951} quality={100} />

- **Cron Service**: This service should run Celery Beat Scheduler to manage scheduled tasks.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731605926/docs/quick-start/django_cron_service.png"
alt="screenshot of the cron service of the Django app"
layout="responsive"
width={2766} height={2056} quality={100} />

- **Worker Service**: This service should be running Celery and ready to process jobs from the queue.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731605981/docs/quick-start/django_worker_service.png"
alt="screenshot of the worker service of the Django app" 
layout="responsive"

width={2752} height={2094} quality={100} />

- **App Service**: This service should be running and is the only one that should have a public domain, allowing users to access your application.

**Note:** There is a [community template](https://railway.com/template/yZDfUu) available that demonstrates this deployment approach. You can easily deploy this template and then connect it to your own GitHub repository for your application.

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Monitoring](/guides/monitoring)
- [Deployments](/guides/deployments)



================================================
FILE: src/docs/guides/dockerfiles.md
================================================
---
title: Build from a Dockerfile
description: Learn Dockerfile configuration on Railway.
---

We will look for and use a `Dockerfile` at the service's root if it exists.

Railway notifies you when it's using the `Dockerfile` in the build process with the following message in the logs:
```shell
==========================
Using detected Dockerfile!
==========================
```

## Custom Dockerfile Path

By default, we look for a file named `Dockerfile` in the root directory.  If you want to use a custom filename or path, you can set a variable defining the path.

In your [service variables](/guides/variables#service-variables), set a variable named `RAILWAY_DOCKERFILE_PATH` to specify the path to the file.

For example, if your Dockerfile was called `Dockerfile.origin`, you would specify it like this:
```
RAILWAY_DOCKERFILE_PATH=Dockerfile.origin
```

If your Dockerfile is in another directory, specify it like this:

```
RAILWAY_DOCKERFILE_PATH=/build/Dockerfile
```

### Use Config as Code

You can also set your custom Dockerfile path using [config as code](/guides/config-as-code).


## Using Variables at Build Time

If you need to use the environment variables that Railway injects at build time, which include [variables that you define](/guides/variables#service-variables) and [Railway-provided variables](/guides/variables#railway-provided-variables), you must specify them in the Dockerfile using the `ARG` command.

For example:
```dockerfile
# Specify the variable you need
ARG RAILWAY_SERVICE_NAME
# Use the varible
RUN echo $RAILWAY_SERVICE_NAME
```

Be sure to declare your environment variables in the stage they are required in:
```dockerfile
FROM node

ARG RAILWAY_ENVIRONMENT
```

## Cache Mounts

Railway supports cache mounts in your Dockerfile in the following format:
```plaintext
--mount=type=cache,id=s/<service id>-<target path>,target=<target path>
```

Replace `<service id>` with the id of the service.

### Target Path

Unsure of what your target path should be?  Refer to the <a href="https://github.com/railwayapp/nixpacks/tree/main" target="_blank">Nixpacks source code</a>.  Within the providers directory, find the file that aligns with your respective language or runtime, and check for the variable that indicates the CACHE_DIR.

**Example**

As an example, within the <a href="https://github.com/railwayapp/nixpacks/blob/main/src/providers/python.rs#L24" target="_blank">python provider definition</a>, you can see the `PIP_CACHE_DIR` is `/root/.cache/pip`.

So the mount command is specified like this:

```plaintext
--mount=type=cache,id=s/<service id>-/root/cache/pip,target=/root/.cache/pip
```

## Docker Compose

You can import services straight from your Docker Compose file! Just drag and drop your Compose file onto your [project canvas](/overview/the-basics#project--project-canvas), and your services (and any mounted volumes) will be auto-imported as staged changes. It’s like magic, but with YAML instead of wands. 🪄

A quick heads-up: we don’t support every possible Compose config just yet (because Rome wasn’t built in a day). But don’t worry, we’re on it!


================================================
FILE: src/docs/guides/environments.md
================================================
---
title: Using Environments
description: Manage complex development workflows via environments in your projects on Railway.
---

Railway supports complex development workflows through environments, giving you isolated instances of all services in a project.

## Create an Environment

1. Select `+ New Environment` from the environment drop down in the top navigation. You can also go to Settings > Environments.
2. Choose which type of environment to create -

   - **Duplicate Environment** creates a copy of the selected environment, including services, variables, and configuration.

     When the duplicate environment is created, all services and their configuration will be staged for deployment.
     _You must review and approve the [staged changes](/guides/staged-changes) before the services deploy._

   - **Empty Environment** creates an empty environment with no services.

---

## Sync Environments

You can easily sync environments to _import_ one or more services from one environment into another environment.

1. Ensure your current environment is the one that should _receive_ the synced service(s)
2. Click `Sync` at the top of the canvas
3. Select the environment from which to sync changes
4. Upon sync, each service card that has received a change will be tagged "New", "Edited", "Removed"
5. Review the [staged changes](/guides/staged-changes) by clicking Details on the staged changes banner
6. Click "Deploy" once you are ready to apply the changes and re-deploy

<Image src="https://res.cloudinary.com/railway/image/upload/v1743192480/docs/sync-environments_sujrxq.png"
            alt="Staged changes on Railway canvas"
            layout="responsive"
            width={1200} height={843} quality={100} />

---

## Enable PR Environments

Railway can spin up a temporary environment whenever you open a Pull Request. To enable PR environments, go to your Project Settings -> Environments tab.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1699568846/docs/enablePrEnv_f5n2hx.png"
alt="Screenshot of Deploy Options"
layout="responsive"
width={1622} height={506} quality={80} />

When enabled, a temporary environment is spun up to support the Pull Request deploy. These environments are deleted as soon as these PRs are merged or closed.

#### How Come my GitHub PR Won't Deploy?

Railway will not deploy a PR branch from a user who is not in your team or invited to your project without their associated GitHub account.

### Bot PR Environments

You can enable automatic PR environment creation for PRs opened by GitHub bots (Dependabot, Renovatebot) using the `Enable Bot PR Environments` toggle on the Environments tab in the Project Settings page.

<Image
  src="https://res.cloudinary.com/railway/image/upload/v1720605990/bot-pr-envs_sa3tlo.png"
  alt="Bot PR Environments toggle"
  layout="responsive"
  width={1468}
  height={439}
  quality={80}
/>

## Forked Environments

As of January 2024, forked environments have been deprecated in favor of Isolated Environments with the ability to Sync.

Any environments forked prior to this change will remain, however, you must adopt the [Sync Environments](#sync-environments) flow, in order to merge changes into your base environment.



================================================
FILE: src/docs/guides/express.md
================================================
---
title: Deploy an Express App
description: Learn how to deploy an Express app to Railway with one-click templates, GitHub, CLI, or Dockerfile. This guide covers setup, private networking, database integration, and deployment strategies.
---

[Express](https://expressjs.com) is a fast and flexible web application framework for Node.js that provides a simple and minimalistic approach to building web servers and APIs. It is known for its speed and unopinionated nature, allowing developers to structure their applications as they see fit while offering powerful features.

This guide covers how to deploy an Express app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create an Express app!

## Create an Express App

**Note:** If you already have an Express app locally or on GitHub, you can skip this step and go straight to the [Deploy Express App to Railway](#deploy-the-express-app-to-railway).

To create a new Express app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Create a directory, `helloworld`, and `cd` into it.

Run the following command in your terminal to create a new Express app within the `helloworld` directory:

```bash
npx express-generator --view=pug
```

A new Express app will be provisioned for you in the `helloworld` directory using [pug](https://pugjs.org/api/getting-started.html) as the view engine.

### Run the Express App locally

Run `npm install` to install all the dependencies.

Next, start the app by running the following command:

```bash
npm start
```

Launch your browser and navigate to `http://localhost:3000` to view the app.

If you'd prefer to run the app on a different port, simply use the command `PORT=8080 npm start` in the terminal.

Afterward, you can access the app at `http://localhost:8080`.

### Add and Configure Database

**Note:** We will be using Postgres for this app. If you don’t have it installed locally, you can either [install it](https://www.postgresql.org/download) or use a different Node.js database package of your choice.

1. Create a database named `expresshelloworld_dev`.

2. Install the [pg-promise](https://www.npmjs.com/package/pg-promise) package:

```bash
npm i pg-promise
```

3. Open the `routes/index.js` file and modify the content to the code below:

```js
const express = require('express');
const pgp = require('pg-promise')();
const db = pgp('postgres://username:password@127.0.0.1:5432/expresshelloworld_dev');
const router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  db.one("SELECT NOW()")
    .then(function (data) {
      // Render the page only after receiving the data
      res.render('index', { title: 'Hello World, Railway!', timeFromDB: data.now });
    })
    .catch(function (error) {
      console.error("ERROR:", error);
      // If there’s an error, send a 500 response and do not call res.render
      res.status(500).send("Error querying the database");
    });
});

module.exports = router;
```

The code above sets up a simple Express app with a route handler for the home page. It uses the `pg-promise` library to connect to a Postgres database and runs a query to fetch the current time from the database using `SELECT NOW()`. Upon receiving the data, it renders the index view with the fetched time, sending it to the client along with a title.

If an error occurs during the database query, the code catches the error, logs it, and sends a 500 status response to the client, indicating that there was an issue querying the database.

The page is only rendered after successfully receiving the database response to ensure proper handling of the data.

4. Open the `views/index.pug` file, and update it to display the `timeFromDB` value on the page.

```html
extends layout

block content
  h1= title
  p Welcome to #{title}
  p This is the time retrieved from the database:
  p #{timeFromDB}
```

5. Run the app again to see your changes in action!

### Prepare Express App for Deployment

In the `routes/index.js` file, replace the hardcoded Postgres database URL with an environment variable:

```js
...
const db = pgp(process.env.DATABASE_URL);
...
```

This allows the app to dynamically pull the correct database configuration from Railway during deployment.

## Deploy the Express App to Railway

Railway offers multiple ways to deploy your Express app, depending on your setup and preference. 

### One-Click Deploy From a Template

If you’re looking for the fastest way to get started with Express, Pug and connected to a Postgres database, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/template/BC51z6)

For Express API, here's another template you can begin with:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/template/Y6zLKF)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=express" target="_blank">variety of Express app templates</a> created by the community.

### Deploy From the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Express app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Add a Postgres Database Service**:
    - Run `railway add -d postgres`.
    - Hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
4. **Add a Service and Environment Variable**:
    - Run `railway add`.
    - Select `Empty Service` from the list of options.
    - In the `Enter a service name` prompt, enter `app-service`.
    - In the `Enter a variable` prompt, enter `DATABASE_URL=${{Postgres.DATABASE_URL}}`. 
        - The value, `${{Postgres.DATABASE_URL}}`, references the URL of your new Postgres database. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
    
    **Note:** Explore the [Railway CLI reference](/reference/cli-api#add) for a variety of options.
5. **Deploy the Application**:
    - Run `railway up` to deploy your app.
        - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment is complete, we can proceed to generate a domain for the app service.
6. **Set Up a Public URL**:
    - Run `railway domain` to generate a public URL for your app.
    - Visit the new URL to see your app live in action!

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731505753/express_on_railway.png"
alt="screenshot of the deployed Express service"
layout="responsive"
width={2194} height={1652} quality={100} />

### Deploy From a GitHub Repo

To deploy an Express app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. 
        - This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        -  `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Node.js app via Nixpacks](https://nixpacks.com/docs/providers/node).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the Express app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node official image
    # https://hub.docker.com/_/node
    FROM node:lts

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image
    COPY . ./

    # Install packages
    RUN npm ci
    
    # Serve the app
    CMD ["npm", "run", "start"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Express apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/fastapi.md
================================================
---
title: Deploy a FastAPI App
description: Learn how to deploy a FastAPI app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints.

This guide covers how to deploy a FastAPI app on Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

## One-Click Deploy From a Template

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/template/-NvLj4)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=fastapi" target="_blank">variety of FastAPI app templates</a> created by the community.

## Deploy From a GitHub Repo

To deploy a FastAPI app on Railway directly from GitHub, follow the steps below:

1. Fork the basic <a href="https://github.com/railwayapp-templates/fastapi" target="_blank">FastAPI GitHub repo</a>. 
    - If you already have a GitHub repo you want to deploy, you can skip this step.
2. Create a <a href="https://railway.com/new" target="_blank">New Project.</a>
3. Click **Deploy from GitHub repo**.
4. Select the `fastapi` or your own GitHub repo.
    - Railway requires a valid GitHub account to be linked. If your Railway account isn't associated with one, you will be prompted to link it.
5. Click **Deploy Now**.

Once the deployment is successful, a Railway [service](/guides/services) will be created for you. By default, this service will not be publicly accessible.

To set up a publicly accessible URL for the service, navigate to the **Networking** section in the [Settings](/overview/the-basics#service-settings) tab of your new service and click on [Generate Domain](/guides/public-networking#railway-provided-domain).

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727418781/docs/languages-and-frameworks/CleanShot_2024-09-27_at_07.31.37_2x_m3zaxx.png"
alt="screenshot of the deployed fastapi service showing a hello world API response on a browser"
layout="responsive"
width={2435} height={919} quality={100} />

The FastAPI app is run via a <a href="https://hypercorn.readthedocs.io/en/latest/" target="_blank">Hypercorn server</a> as defined by the `startCommand` in the <a href="https://github.com/railwayapp-templates/fastapi/blob/main/railway.json" target="_blank">railway.json</a> file in the GitHub repository.

Railway makes it easy to define deployment configurations for your services directly in your project using a <a href="/guides/config-as-code" target="_blank">railway.toml or railway.json file</a>, alongside your code. 

## Deploy From the CLI

1. <a href="/guides/cli#installing-the-cli" target="_blank">Install</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate with the CLI.</a>
2. Clone the forked <a href="https://github.com/railwayapp-templates/fastapi" target="_blank">fastapi GitHub repo</a> and `cd` into the directory. 
    - You can skip this step if you already have an app directory or repo on your machine that you want to deploy.
3. Run `railway init` within the app directory to create a new project. 
4. Run `railway up` to deploy.
    - The CLI will now scan, compress and upload our fastapi app files to Railway's backend for deployment.

## Use a Dockerfile

**Note:** If you already have an app directory or repo on your machine that you want to deploy, you can skip the first two steps.

1. Clone the forked `fastapi` repo and `cd` into the directory.
2. Delete the `railway.json` file.
3. Create a `Dockerfile` in the `fastapi` or app's root directory.
4. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Python 3 alpine official image
    # https://hub.docker.com/_/python
    FROM python:3-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image.
    COPY . .

    # Install project dependencies
    RUN pip install --no-cache-dir -r requirements.txt

    # Run the web service on container startup.
    CMD ["hypercorn", "main:app", "--bind", "::"]
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)
- [Running a Cron Job](/guides/cron-jobs)




================================================
FILE: src/docs/guides/fastify.md
================================================
---
title: Deploy a Fastify App
description: Learn how to deploy a Fastify app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

Fastify is a high-performance, low-overhead web framework for Node.js, designed to deliver an exceptional developer experience.

This guide covers how to deploy a Fastify app on Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

## One-Click Deploy From a Template

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/ZZ50Bj)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=fastify" target="_blank">variety of Fastify app templates</a> created by the community.

## Deploy From a GitHub Repo

To deploy a Fastify app on Railway directly from GitHub, follow the steps below:

1. Fork the basic <a href="https://github.com/railwayapp-templates/fastify" target="_blank">fastify GitHub repo</a>.
    - If you already have a GitHub repo you want to deploy, you can skip this step.
2. Create a <a href="https://railway.com/new" target="_blank">New Project.</a>
3. Click **Deploy from GitHub repo**.
4. Select the `fastify` repo or your own GitHub repo.
    - Railway requires a valid GitHub account to be linked. If your Railway account isn't associated with one, you will be prompted to link it.
5. Click **Deploy Now**.

Once the deployment is successful, a Railway [service](/guides/services) will be created for you. By default, this service will not be publicly accessible.

To set up a publicly accessible URL for the service, navigate to the **Networking** section in the [Settings](/overview/the-basics#service-settings) tab of your new service and click on [Generate Domain](/guides/public-networking#railway-provided-domain).

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727377689/docs/languages-and-frameworks/fastifyhelloworld_xbkrry.png"
alt="screenshot of new project menu with deploy from github selected"
layout="responsive"
width={2447} height={1029} quality={100} />

**Note:** Railway requires that Fastify's `.listen` method for the `host` be set to `::`. This allows the app to be available over the <a href="/guides/public-networking" target="_blank">public</a> and <a href="/guides/private-networking" target="_blank">private network</a>.
You can find this in the <a href="https://github.com/railwayapp-templates/fastify/blob/main/src/app.ts" target="_blank">sample Fastify GitHub repo</a>. 

If you don’t set it correctly, you may encounter a 502 error page.


## Deploy From the CLI

1. <a href="/guides/cli#installing-the-cli" target="_blank">Install</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate with the CLI.</a>
2. Clone the forked <a href="https://github.com/railwayapp-templates/fastify" target="_blank">fastify GitHub repo</a> and `cd` into the directory.
    - You can skip this step if you already have an app directory or repo on your machine that you want to deploy.
3. Run `railway init` within the app directory to create a new project. 
4. Run `railway up` to deploy.
    - The CLI will now scan, compress and upload our fastify app files to Railway's backend for deployment.

## Use a Dockerfile

1. Clone the forked `fastify` repo and `cd` into the directory.
    - You can skip this step if you already have an app directory or repo on your machine that you want to deploy.
2. Create a `Dockerfile` in the `fastify` or app's root directory.
3. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node.js 18 alpine official image
    # https://hub.docker.com/_/node
    FROM node:18-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image.
    COPY . .

    # Install project dependencies
    RUN npm ci

    # Run the web service on container startup.
    CMD ["npm", "start"]
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a CDN using Amazon CloudFront to your Fastify app](/tutorials/add-a-cdn-using-cloudfront)
- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/flask.md
================================================
---
title: Deploy a Flask App
description: Learn how to deploy a Flask app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Flask](https://flask.palletsprojects.com/en/stable) is a Python micro framework for building web applications.

This guide covers how to deploy a Flask app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [Using the CLI](#deploy-from-the-cli).
3. [From a GitHub repository](#deploy-from-a-github-repo).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Flask app!

## Create a Flask App

**Note:** If you already have a Flask app locally or on GitHub, you can skip this step and go straight to the [Deploy Flask App to Railway](#deploy-flask-app-to-railway).

To create a new Flask app, ensure that you have [Python](https://www.python.org/downloads) and [Flask](https://flask.palletsprojects.com/en/stable/installation/#install-flask) installed on your machine.

Follow the steps blow to set up the project in a directory.

Create a project directory and `cd` into it.

```bash
mkdir flaskproject
cd flaskproject
````

Create a virtual environment
```bash
python -m venv env
```

Activate the virtual environment
```bash
source env/bin/activate
```

**Note:** For windows developers, run it as `env\Scripts\activate` in your terminal.

Install Flask
```bash
python -m pip install flask
```

Now create a new file, `helloworld.py` in the `flaskproject` directory. Add the following content to it:

```python
import os
from flask import Flask

app = Flask(__name__)


@app.route('/')
def hello():
    return 'Hello world, welcome to Railway!'
```

1. `from flask import Flask`: 
    - This line imports the Flask class from the Flask framework, which is used to create and manage a web application.
2. `app = Flask(__name__)`: 
    - This line creates an instance of the Flask class and assigns it to the app variable.
    - The `__name__` argument helps Flask identify the location of the application. It's useful for determining resource paths and error reporting.
3. `@app.route('/')`:
    - The `@app.route('/')` decorator sets up a URL route for the app. When the root URL `(/)` is accessed, Flask will execute the function immediately below this decorator.
4. `def hello():`
    - The `hello` function returns a plain text message, _"Hello world, welcome to Railway!"_, which is displayed in the browser when the root URL of the app is accessed.


### Run the Flask App Locally

To run the application, use the `flask` command.

```bash
flask --app helloworld run
```

Open your browser and go to `http://127.0.0.1:5000` to see the app running with a local development server.

### Prepare the Flask App for Deployment

1. Run the following command to install a production web server, [gunicorn](https://gunicorn.org):

```bash
pip install gunicorn
```

Next, run the following command to serve the app with gunicorn:

```bash
gunicorn main:app
```

2. Open your browser and go to `http://127.0.0.1:8000` to see the app running with a production server.

Create a `requirements.txt` file to store the dependencies of the packages needed to run the app. 

```bash
pip freeze > requirements.txt
```

**Note:** It's only safe to run the command above in a virtual environment, else it will freeze all python packages installed on your system. 

3. Finally, create a `nixpacks.toml` file in the root directory of the app. Add the following content to it:

```toml
# nixpacks.toml

[start]
cmd = "gunicorn main:app"
```

This setup instructs Railway to use Gunicorn as the server to start the application.

**Note:** The [nixpacks.toml file](https://nixpacks.com/docs/configuration/file) is a configuration file used by Nixpacks, a build system developed and used by Railway, to set up and deploy applications. 

In this file, you can specify the instructions for various build and deployment phases, along with environment variables and package dependencies.

With these changes, your Flask app is now ready to be deployed to Railway!

## Deploy Flask App to Railway

Railway offers multiple ways to deploy your Flask app, depending on your setup and preference. Choose any of the following methods:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [Using the CLI](#deploy-from-the-cli).
3. [From a GitHub repository](#deploy-from-a-github-repo).

## One-Click Deploy From a Template

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/template/zUcpux)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=flask" target="_blank">variety of Flask app templates</a> created by the community.

## Deploy From the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Flask app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
4. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1730473731/docs/quick-start/flask_app_on_railway.png"
alt="screenshot of the deployed Flask service"
layout="responsive"
width={2164} height={1814} quality={100} />

## Deploy From a GitHub Repo

To deploy a Flask app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
4. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Python app](https://nixpacks.com/docs/providers/python).
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

## Use a Dockerfile

1. Create a `Dockerfile` in the app's root directory.
2. Add the content below to the `Dockerfile`:
    ```docker
    # Use the Python 3 official image
    # https://hub.docker.com/_/python
    FROM python:3

    # Run in unbuffered mode
    ENV PYTHONUNBUFFERED=1 

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image.
    COPY . ./

    # Install project dependencies
    RUN pip install --no-cache-dir -r requirements.txt

    # Run the web service on container startup.
    CMD ["gunicorn", "main:app"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)
- [Running a Cron Job](/guides/cron-jobs)




================================================
FILE: src/docs/guides/foundations.md
================================================
---
title: Foundations
description: Learn Railway's core components and fundamentals to build, deploy, and manage applications with confidence.
---

Welcome!  Let's get started building in Railway!

To start, you should be familiar with the core components and features of the platform. Therefore, the goal of this section is to guide you through the steps of laying a solid foundation on which to iterate.

#### Core Components
|||
|-|-|
| **Projects** | A Project is like an application stack, or a system of related components.  Everything needed by the components in the system are encapsulated in a Project, including environments and variables.                                                                                   |
| **Services** | Services are components that make up the Project - frontend web servers, backend APIs, message queues, databases, etc.  Services can be configured with [variables](/guides/variables), start and run commands, restart policies, [volume mounts](/guides/volumes), etc. |
| **Variables** | Variable management is an essential part of development operations.  Variables can be scoped to both Services and Environments in Railway.                                                                                                            |
| **Environments** | Environments exist within a Project and are useful for maintaining separation between Production and Development environments.                                                                                                           |
| **CLI**          | The CLI is handy for local development, used for things like running services locally using variables stored in Railway, deploying local code repositories, etc.                                                                                                                    |
|||

The next pages will go through how to create and manage your Projects, Services, Variables, and Environments.  They will also explain how to use Volumes to persist your data and how to install and use the CLI.

If you prefer a crash course, check out our [Quickstart guide](/quick-start)!



================================================
FILE: src/docs/guides/gin.md
================================================
---
title: Deploy a Gin App
description: Learn how to deploy a Gin app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Gin](https://gin-gonic.com) is a high-performance web framework for Go (Golang) that provides a martini-like API while being significantly faster—up to 40 times—due to its use of `httprouter`. It's designed for developers seeking both speed and productivity.

This guide covers how to deploy a Gin app on Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

## One-Click Deploy From a Template

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/dTvvSf)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=gin" target="_blank">variety of Gin app templates</a> created by the community.

## Deploy From a GitHub Repo

To deploy a Gin app on Railway directly from GitHub, follow the steps below:

1. Fork the basic <a href="https://github.com/railwayapp-templates/gin" target="_blank">Gin GitHub repo</a>. 
    - If you already have a GitHub repo you want to deploy, you can skip this step.
2. Create a <a href="https://railway.com/new" target="_blank">New Project.</a>
3. Click **Deploy from GitHub repo**.
4. Select the `gin` or your own GitHub repo.
    - Railway requires a valid GitHub account to be linked. If your Railway account isn't associated with one, you will be prompted to link it.
5. Click **Deploy Now**.

Once the deployment is successful, a Railway [service](/guides/services) will be created for you. By default, this service will not be publicly accessible.

To set up a publicly accessible URL for the service, navigate to the **Networking** section in the [Settings](/overview/the-basics#service-settings) tab of your new service and click on [Generate Domain](/guides/public-networking#railway-provided-domain).

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727691646/docs/languages-and-frameworks/gin-production_nvsmvf.png"
alt="screenshot of the deployed gin service showing a hello world API response on a browser"
layout="responsive"
width={2661} height={1019} quality={100} />

## Deploy From the CLI

1. <a href="/guides/cli#installing-the-cli" target="_blank">Install</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate with the CLI.</a>
2. Clone the forked <a href="https://github.com/railwayapp-templates/gin" target="_blank">gin GitHub repo</a> and `cd` into the directory. 
    - You can skip this step if you already have an app directory or repo on your machine that you want to deploy.
3. Run `railway init` within the app directory to create a new project. 
4. Run `railway up` to deploy.
    - The CLI will now scan, compress and upload our gin app files to Railway's backend for deployment.

## Use a Dockerfile

1. Clone the forked `gin` repo and `cd` into the directory.
    - You can skip this step if you already have an app directory or repo on your machine that you want to deploy.
3. Create a `Dockerfile` in the `gin` or app's root directory.
4. Add the content below to the `Dockerfile`:
    ```docker
    # Use the Go 1.23 alpine official image
    # https://hub.docker.com/_/golang
    FROM golang:1.23-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy go mod and sum files
    COPY go.mod go.sum ./

    # Copy local code to the container image.
    COPY . ./

    # Install project dependencies
    RUN go mod download

    # Build the app
    RUN go build -o app
   
    # Run the service on container startup.
    ENTRYPOINT ["./app"]
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)
- [Running a Cron Job](/guides/cron-jobs)




================================================
FILE: src/docs/guides/github-autodeploys.md
================================================
---
title: Controlling GitHub Autodeploys
description: Learn how to configure GitHub autodeployments.
---

[Services that are linked to a GitHub repo](/guides/services#deploying-from-a-github-repo) automatically deploy when new commits are detected in the connected branch.

## Configure the GitHub Branch for Deployment Triggers

To update the branch that triggers automatic deployments, go to your Service Settings and choose the appropriate trigger branch.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1713907838/docs/triggerBranch_tzf9q3.png"
alt="Screenshot of GitHub Integration"
layout="responsive"
width={903} height={523} quality={80} />

### Disable Automatic Deployments

To disable automatic deployment, simply hit `Disconnect` in the Service Settings menu.

*Note: To manually trigger a deployment from the latest commit, use the Command Pallette: `CMD + K` -> "Deploy Latest Commit".  This will deploy the latest commit from the **Default** branch in GitHub.*

*Currently, there is no way to force a deploy from a branch other than the Default without connecting it in your service settings.*

## Wait for CI

<Banner variant="info">
  Please make sure you have{" "}
  <a href="https://github.com/settings/installations" target="_blank">accepted our updated GitHub permissions</a>
  required for this feature to work.
</Banner>

To ensure Railway waits for your GitHub Actions to run successfully before triggering a new deployment, you should enable **Wait for CI**.

#### Requirements

- You must have a GitHub workflow defined in your repository.  
- The GitHub workflow must contain a directive to run on push:

    ```plaintext
    on:
      push:
        branches:
          - main
    ```

### Enabling Wait for CI

If your workflow satisfies the requirements above, you will see the `Wait for CI` flag in service settings.

<Image src="https://res.cloudinary.com/railway/image/upload/v1730324753/docs/deployments/waitforci_dkfsxy.png" alt="Check Suites Configuration" layout="responsive" width={1340} height={392} quality={80} />

Toggle this on to ensure Railway waits for your GitHub Actions to run successfully before triggering a new deployment.

When enabled, deployments will be moved to a `WAITING` state while your workflows are running.

If any workflow fails, the deployments will be `SKIPPED`.

When all workflows are successful, deployments will proceed as usual.



================================================
FILE: src/docs/guides/healthchecks-and-restarts.md
================================================
---
title: Healthchecks and Restarts
description: Learn how to configure healthchecks and restarts.
---

## [Healthchecks](/guides/healthchecks)

Railway provides controls for ensuring newly deployed services only receive traffic after they are healthy.

## [Restart Policy](/guides/restart-policy)

The restart policy dictates what action Railway should take if a deployed service stops, e.g., exits with a non-zero exit code.


================================================
FILE: src/docs/guides/healthchecks.md
================================================
---
title: Configure Healthchecks
description: Learn how to configure health checks to guarantee zero-downtime deployments of services on Railway.
---

Railway provides controls for ensuring newly deployed services only receive traffic after they are healthy.

## Configure The Healthcheck Path

A Healthcheck can be used to guarantee zero-downtime deployments of your web services by ensuring the new version is live and able to handle requests.

To configure a healthcheck:

1. Ensure your webserver has an endpoint (e.g. `/health`) that will return an HTTP status code of 200 when the application is live and ready.

2. Under your service settings, input your health endpoint.  Railway will wait for this endpoint to serve a `200` status code before switching traffic to your new endpoint

**Note:** Railway does not monitor the healthcheck endpoint after the deployment has gone live.

## Configure The Healthcheck Port

Railway will inject a `PORT` environment variable that your application should [listen on](/guides/fixing-common-errors#solution).

This variable's value is also used when performing health checks on your deployments.

If your application doesn't listen on the `PORT` variable, possibly due to using [target ports](/guides/public-networking#target-ports), you can manually set a `PORT` [variable](/overview/the-basics#service-variables) to inform Railway of the port to use for health checks.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743469112/healthcheck-port_z0vj4o.png"
alt="Screenshot showing PORT service variable configuration"
layout="intrinsic"
width={1200} height={307} quality={100} />

Not listening on the `PORT` variable or omitting it when using target ports can result in your health check returning a `service unavailable` error.

### Healthcheck Timeout

The default timeout on healthchecks is by default 300 seconds (5 minutes) - if your application fails to serve a `200` status code during this allotted time, the deploy will be marked as failed.

<Image 
src="https://res.cloudinary.com/railway/image/upload/v1664564544/docs/healthcheck-timeout_lozkiv.png"
alt="Screenshot of Healthchecks Timeouts"
layout="intrinsic"
width={1188} height={348} quality={80} />

To increase the timeout, change the number of seconds on the service settings page, or with a `RAILWAY_HEALTHCHECK_TIMEOUT_SEC` service variable.

### Services with Attached Volumes

To prevent data corruption, we prevent multiple deployments from being active and mounted to the same service. This means that there will be a small amount of downtime when re-deploying a service that has a volume attached, even if there is a healthcheck endpoint configured.

### Healthcheck Hostname

Railway uses the hostname `healthcheck.railway.app` when performing healthchecks on your service. This is the domain from which the healthcheck requests will originate.

For applications that restrict incoming traffic based on the hostname, you'll need to add `healthcheck.railway.app` to your list of allowed hosts. This ensures that your application will accept healthcheck requests from Railway.

If your application does not permit requests from that hostname, you may encounter errors during the healthcheck process, such as "failed with service unavailable" or "failed with status 400".

### Continuous Healthchecks

The healthcheck endpoint is currently ***not used for continuous monitoring*** as it is only called at the start of the deployment, to ensure it is healthy prior to routing traffic to it.

If you are looking for a quick way to setup continuous monitoring of your service(s), check out the <a href="https://railway.com/template/p6dsil" target="_blank">Uptime Kuma template</a> in our template marketplace.


================================================
FILE: src/docs/guides/join-priority-boarding.md
================================================
---
title: Join Priority Boarding!
description: Priority Boarding is Railway's beta program for getting access early to new features. Learn how to be a part of it.
---

Priority Boarding is Railway's **beta program** and is available to users who have connected their Railway account to Discord. 

## Connect Railway to Discord

Visit <a href="https://railway.com/account" target="_blank">General Settings</a>, scroll down to Account Settings, and connect your account to the Railway Discord server.

<Image src="https://res.cloudinary.com/railway/image/upload/v1666373029/docs/discord-connect_ok03jw.png"
alt="Screenshot of Account Settings - Priority Boarding"
layout="responsive"
width={992} height={422} quality={80} />

## Let Percy Know

Once connected to Discord, you'll need to let Percy, the Railway Discord bot, know that you'd like to be a part of priority boarding. 

In Discord, open up any channel, enter `/beta`, and follow the prompts.

Alternatively, you can open the command palette using `CMD + K` or `Ctrl + K`, then scroll down to `Utilities`, and select the join Priority Boarding button.

You should now have access to the `#priority-boarding` channel. You should also see that your Account Settings now display a new Priority Boarding status.

<Image src="https://res.cloudinary.com/railway/image/upload/v1666372408/docs/priority-boarding-settings_wvvza4.png"
alt="Screenshot of Account Settings - Priority Boarding"
layout="responsive"
width={1004} height={468} quality={80} />

## Keep Us Posted

From this point forward, you'll have Priority Boarding features automatically enabled for your account. We'll notify you of any new features via the [Changelog](https://railway.com/changelog).

We kindly request that you report any issues you encounter in the <a href="https://discord.com/channels/713503345364697088/921233523719946260" target="_blank">Priority Boarding Discord channel</a>.

That's all there is to it! Thanks for helping improve Railway, and we'll see you in Priority Boarding.



================================================
FILE: src/docs/guides/languages-frameworks.md
================================================
---
title: Languages & Frameworks
description: A comprehensive guide to deploying applications using different languages and frameworks on Railway.
---

Learn how to deploy your apps quickly on Railway using your preferred languages and frameworks:

### JavaScript / TypeScript
    - [Fastify](/guides/fastify)
    - [Express](/guides/express)
    - [Next.js](/quick-start)
    - [Nest.js](/guides/nest)
    - [Sails](/guides/sails)
    - [React](/guides/react)
    - [Remix](/guides/remix)
    - [Vue](/guides/vue)
    - [Nuxt](/guides/nuxt)
    - [Astro](/guides/astro)
    - [SvelteKit](/guides/sveltekit)
    - [Solid](/guides/solid)
    - [Angular](/guides/angular)
### Python
    - [FastAPI](/guides/fastapi)
    - [Flask](/guides/flask)
    - [Django](/guides/django)
### PHP
    - [Laravel](/guides/laravel)
    - [Symfony](/guides/symfony)
### Java
    - [Spring Boot](/guides/spring-boot)
### Scala
    - [Play Framework](/guides/play)
### Go
    - [Beego](/guides/beego)
    - [Gin](/guides/gin)
### Ruby
    - [Rails](/guides/rails)
### Clojure
    - [Luminus](/guides/luminus)
### Elixir
    - [Phoenix](/guides/phoenix)
    - [Phoenix with Distillery](/guides/phoenix-distillery)
### Rust
    - [Axum](/guides/axum)
    - [Rocket](/guides/rocket)



================================================
FILE: src/docs/guides/laravel.md
================================================
---
title: Deploy a Laravel App
description: Learn how to deploy a Laravel app to Railway with this step-by-step guide. It covers quick setup, private networking, database integration, one-click deploys and other deployment strategies.
---

[Laravel](https://laravel.com) is a PHP framework designed for web artisans who value simplicity and elegance in their code. It stands out for its clean and expressive syntax, and offers built-in tools to handle many common tasks found in modern web applications, making development smoother and more enjoyable.

This guide covers how to deploy a Laravel app on Railway in three ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).

## One-Click Deploy From a Template

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/fWEWWf)

This template sets up a basic Laravel application along with a Postgres database on Railway. You can also choose from a <a href="https://railway.com/templates?q=laravel" target="_blank">variety of Laravel app templates</a> created by the community.

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

## Deploy From a GitHub Repo

To deploy a Laravel app on GitHub to Railway, follow the steps below:

1. Create a <a href="https://railway.com/new" target="_blank">New Project.</a>

2. Click **Deploy from GitHub repo**.

3. Select your GitHub repo.

    - Railway requires a valid GitHub account to be linked. If your Railway account isn't associated with one, you will be prompted to link it.

4. Click **Add Variables**. 

    - Add all your app environment variables.

5. Click **Deploy**.

Once the deployment is successful, a Railway [service](/guides/services) will be created for you. By default, this service will not be publicly accessible.

**Note:** Railway will automatically detect that it's a Laravel app during [deploy and run your app via php-fpm and nginx](https://nixpacks.com/docs/providers/php). 

To set up a publicly accessible URL for the service, navigate to the **Networking** section in the [Settings](/overview/the-basics#service-settings) tab of your new service and click on [Generate Domain](/guides/public-networking#railway-provided-domain).

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727885952/docs/quick-start/CleanShot_2024-10-02_at_17.18.04_2x_nn78ga.png"
alt="screenshot of the deployed Laravel service showing the Laravel home page"
layout="responsive"
width={2855} height={2109} quality={100} />

**Note**: [Jump to the **Set Up Database, Migrations, Crons and Workers** section](#deploy-via-custom-scripts) to learn how to run your Laravel app along with a Postgres(or MySQL) database, cron jobs, and workers.


## Deploy From the CLI

If you have your Laravel app locally, you can follow these steps:

1. <a href="/guides/cli#installing-the-cli" target="_blank">Install</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate with the Railway CLI.</a>

2. Run `railway init` within your Laravel app root directory to create a new project on Railway.

    - Follow the steps in the prompt to give your project a name.

3. Run `railway up` to deploy.

    - The CLI will now scan, compress and upload our Laravel app files to Railway's backend for deployment.

    - Your terminal will display real-time logs as your app is being deployed on Railway.

4. Once the deployment is successful, click on **View logs** on the recent deployment on the dashboard.

    - You'll see that the server is running. However you'll also see logs prompting you to add your env variables.

5. Click on the <a href="/overview/the-basics#service-variables">**Variables**</a> section of your service on the Railway dashboard.

6. Click on **Raw Editor** and add all your app environment variables.

7. Click on **Deploy** to redeploy your app.

To set up a publicly accessible URL for the service, navigate to the **Networking** section in the [Settings](/overview/the-basics#service-settings) tab of your new service and click on [Generate Domain](/guides/public-networking#railway-provided-domain).

**Note:** The next step shows how to run your Laravel app along with a database, migrations, cron jobs, and workers.

## Set Up Database, Migrations, Crons and Workers

This setup deploys your Laravel app on Railway, ensuring that your database, scheduled tasks (crons), and queue workers are all fully operational.

The deployment structure follows a "majestic monolith" architecture, where the entire Laravel app is managed as a single codebase but split into four separate services on Railway:

- **App Service**: Handles HTTP requests and user interactions.

- **Cron Service**: Manages scheduled tasks (e.g., sending emails or running reports).

- **Worker Service**: Processes background jobs from the queue.

- **Database Service**: Stores and retrieves your application's data.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727910244/docs/quick-start/deploy%20architecture.png"
alt="screenshot of the deploy architecture of the Laravel app"
layout="responsive"
width={3118} height={1776} quality={100} />
_My Majestic Monolith Laravel app_

Please follow these steps to get started:

1. Create four bash scripts in the root directory of your Laravel app: `build-app.sh`, `run-worker.sh`, and `run-cron.sh`. 

    These scripts will contain the commands needed to deploy and run the app, worker, and cron services for your Laravel app on Railway.
    - Add the content below to the `build-app.sh` file:

        **Note:** You can add any additional commands to the script that you want to run each time your app service is built.
        ```bash
        #!/bin/bash
        # Make sure this file has executable permissions, run `chmod +x build-app.sh`

        # Exit the script if any command fails
        set -e

        # Build assets using NPM
        npm run build

        # Clear cache
        php artisan optimize:clear

        # Cache the various components of the Laravel application
        php artisan config:cache
        php artisan event:cache
        php artisan route:cache
        php artisan view:cache
        ```

    -  Add the content below to the `run-worker.sh` file:
        ```bash
        #!/bin/bash
        # Make sure this file has executable permissions, run `chmod +x run-worker.sh`

        # This command runs the queue worker. 
        # An alternative is to use the php artisan queue:listen command
        php artisan queue:work     
        ```

    -  Add the content below to the `run-cron.sh` file:
        ```bash
        #!/bin/bash
        # Make sure this file has executable permissions, run `chmod +x run-cron.sh`

        # This block of code runs the Laravel scheduler every minute
        while [ true ]
            do
                echo "Running the scheduler..."
                php artisan schedule:run --verbose --no-interaction &
                sleep 60
            done
        ```

2. Create a Postgres Database service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas.</a>
     - Click on **Deploy**.

3. Create a new service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas.</a>
    -  Name the service **App service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a> to configure it.

    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.

    - Add `chmod +x ./build-app.sh && sh ./build-app.sh` to the **Custom Build Command** in the <a href="/guides/build-configuration#customize-the-build-command">**Build**</a> section.

    - Add `php artisan migrate` to the <a href="/guides/pre-deploy-command">**Pre-Deploy Command**</a> in the **Deploy** section.

    - Head back to the top of the service and click on <a href="/overview/the-basics#service-variables">**Variables**</a>.

    - Add all the necessary environment variables required for the Laravel app especially the ones listed below.

        - `APP_KEY`: Set the value to what you get from the `php artisan key:generate` command.

        - `DB_CONNECTION`: Set the value to `pgsql`.

        - `QUEUE_CONNECTION`: Set the value to `database`.

        - `DB_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 

    - Click **Deploy**.

4. Create a new service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a>.

    - Name the service **cron service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a>.

    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.

    - Add `chmod +x ./run-cron.sh && sh ./run-cron.sh` to the <a href="/guides/start-command">**Custom Start Command**</a> in the **Deploy** section.

    - Head back to the top of the service and click on  <a href="/overview/the-basics#service-variables">**Variables**</a>.

    - Add all the necessary environment variables especially those highlighted already in step 3.

    - Click **Deploy**.

5. Create a new service again on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a>.

    - Name the service **worker service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a>.

    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.

    - Add `chmod +x ./run-worker.sh && sh ./run-worker.sh` to the <a href="/guides/start-command">**Custom Start Command**</a> in the **Deploy** section.

    - Head back to the top of the service and click on <a href="/overview/the-basics#service-variables">**Variables**</a>.

    - Add all the necessary environment variables especially those highlighted already in step 3.

    - Click **Deploy**.

At this point, you should have all three services deployed and connected to the Postgres Database service:

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727910244/docs/quick-start/deploy%20architecture.png"
alt="screenshot of the deploy architecture of the Laravel app"
layout="responsive"
width={3118} height={1776} quality={100} />

- **Cron Service**: This service should run the Laravel Scheduler to manage scheduled tasks.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727912479/docs/quick-start/CleanShot_2024-10-03_at_00.40.40_2x_cwgazh.png"
alt="screenshot of the cron service of the Laravel app"
layout="responsive"
width={2165} height={1873} quality={100} />

- **Worker Service**: This service should be running and ready to process jobs from the queue.

- **App Service**: This service should be running and is the only one that should have a public domain, allowing users to access your application.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1727885952/docs/quick-start/CleanShot_2024-10-02_at_17.18.04_2x_nn78ga.png"
alt="screenshot of the deployed Laravel service showing the Laravel home page"
layout="responsive"
width={2855} height={2109} quality={100} />
_App service_


**Note:** There is a [community template](https://railway.com/template/Gkzn4k) available that demonstrates this deployment approach. You can easily deploy this template and then connect it to your own GitHub repository for your application.

## Logging

Laravel, by default, writes logs to a directory on disk. However, on Railway’s ephemeral filesystem, this setup won’t persist logs.

To ensure logs and errors appear in Railway’s console or with `railway logs`, update the `LOG_CHANNEL` environment variable to `errorlog`. You can set it via the Railway dashboard or CLI as shown:

```bash
railway variables --set "LOG_CHANNEL=errorlog"
```

## Can I Deploy with Laravel Sail?
You may be thinking about using [Laravel Sail](https://laravel.com/docs/11.x/sail), which is the standard approach for deploying Laravel applications with Docker. At its core, Sail relies on a `docker-compose.yml` file to manage the environment. 

However, it's important to note that Railway currently does not support Docker Compose.

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Monitoring](/guides/monitoring)
- [Deployments](/guides/deployments)




================================================
FILE: src/docs/guides/logs.md
================================================
---
title: Viewing Logs
description: Learn how to view and filter build, deployment, environment, and HTTP logs on Railway.
---

Any build or deployment logs emitted to standard output or standard error (e.g. `console.log(...)`) are captured by Railway to be viewed or searched later.

There are three ways to view logs in Railway.

- **Build/Deploy Panel** → Click on a deployment in the dashboard
- **Log Explorer** → Click on the Observability tab in the top navigation
- **CLI** → Run the `railway logs` command

## Build / Deploy Panel

Logs for a specific deployment can be viewed by clicking on the deployment in the service window, useful when debugging application failures.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1722993852/docs/CleanShot_2023-09-08_at_10.55.06_2x_co6ztr.png"
alt="deploy logs for a specific deployment"
layout="responsive"
width={1365} height={790} quality={80} />

Similarly, logs for a specific build can be viewed by clicking on the **Build Logs** tab once you have a deployment open.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1722993947/docs/build_logs_og7uec.png"
alt="deploy logs for a specific deployment"
layout="responsive"
width={1365} height={790} quality={80} />

## Log Explorer

Logs for the entire environment can be viewed together by clicking the "Observability" button in the top navigation. The Log Explorer is useful for debugging more general problems that may span multiple services.

The log explorer also has additional features like selecting a date range or toggling the visibility of specific columns.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1694194133/docs/log-explorer_nrlong.png"
alt="Railway Log Explorer"
layout="responsive"
width={1166} height={650} quality={80} />

## Command Line 

Deployment logs can also be viewed from the command line to quickly check the current status of the latest deployment. Use `railway logs` to view them.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1694195563/docs/CleanShot_2023-09-08_at_10.52.12_2x_yv1d7f.png"
alt="Viewing logs using the command line interface"
layout="responsive"
width={1489} height={591} quality={80} />

## Filtering Logs

Railway supports a custom filter syntax that can be used to query logs.

Filter syntax is available for all log types, but some log types have specific attributes.

### Deployment Logs

- `<search term>` → Filter for a partial substring match

- `"<search term>"` → Filter for an exact log message 

- `replica:<replica_id>` → Filter by a specific replica's UUID

- `@attribute:value` → Filter by custom attribute (see structured logs below)

**Examples:**

Find logs that contain the word "request".

```text
request
```

Find logs that exactly match the message "request handled".

```text
"request handled"
```

Find logs with an error level.

```text
@level:error
```

Find logs with a warning level.

```text
@level:warn
```

Find logs with an error level and specific text.

```text
@level:error AND "failed to send batch"
```

Find logs with a specific custom attribute.

```text
@customAttribute:value
```

Find logs with a specific array attribute.

```text
@arrayAttribute[i]:value
```

### Environment Logs

Environment logs allow you to query for logs from the environment they were emitted in.

This means that you can search for logs emitted by all services in an environment at the same time, all in one central location.

In addition to the filters available for deployment logs, an additional filter is available for environment logs:

- `@service:<service_id>` → Filter by a specific service's UUID

**Examples:**

Filter out logs from the Postgres database service.

```text
-@service:<postgres_service_id>
```

Filter logs from the Postgres database service and the Redis cache service. 

```text
-@service:<postgres_service_id> AND -@service:<redis_service_id>
```

Show only logs from the Postgres database and Redis cache services.

```text
@service:<postgres_service_id> OR @service:<redis_service_id>
```

### HTTP Logs

HTTP logs use the same filter syntax, but have a specific set of attributes for HTTP-specific data.

Some commonly used filters for HTTP logs are:

- `@requestId:<request_id>` → Filter by request ID

- `@timestamp:<timestamp>` → Filter by timestamp (Formatted in RFC3339)

- `@method:<method>` → Filter by method

- `@path:<path>` → Filter by path

- `@host:<host>` → Filter by host

- `@httpStatus:<status_code>` → Filter by HTTP status code

- `@responseDetails:<details>` → Filter by response details (Only populated when the application fails to respond)

- `@clientUa:<user_agent>` → Filter by a specific client's user agent

- `@srcIp:<ip>` → Filter by source IP (The client's IP address that made the request)

- `@edgeRegion:<region>` → Filter by edge region (The region of the edge node that handled the request)

**Examples:**

Find logs for a specific path.

```text
@path:/api/v1/users
```

Find logs for a specific path that returned a 500 error.

```text
@path:/api/v1/users AND @httpStatus:500
```

Find logs for a specific path that returned a 500 or 501 error.

```text
@path:/api/v1/users AND (@httpStatus:500 OR @httpStatus:501)
```

Find all non-200 responses.

```text
-@httpStatus:200
```

Find all requests that originated from or around Europe.

```text
@edgeRegion:europe-west4-drams3a
```

Find all requests that originated from a specific IP address.

```text
@srcIp:66.33.22.11
```

## View In Context

Often, when searching for a log, it is useful to see the surrounding logs. To
do this, either click the "Timestamp" column, or expand any log and click 
the "View in Context" button. 

<Image
src="https://res.cloudinary.com/railway/image/upload/v1694195189/docs/CleanShot_2023-09-08_at_10.45.51_2x_nwxqid.png"
alt="Viewing a log in context"
layout="responsive"
width={1682} height={272} quality={80} />

## Structured Logs

Structured logs are logs emitted in a structured JSON format, useful if you want
to attach custom metadata to logs or preserve multi-line logs like stack traces.

```typescript
console.log(JSON.stringify({
  message: "A minimal structured log", // (required) The content of the log
  level: "info", // Severity of the log (debug, info, warn, error)
  customAttribute: "value", // Custom attributes (query via @name:value)
}));
```

Structured logs are best generated with a library for your language. For example, the default <a href="https://github.com/winstonjs/winston" target="_blank">Winston</a>. JSON format emits logs in the correct structure by default.

Logs with a `level` field will be coloured accordingly in the log explorer.

Logs emitted to `stderr` will be converted to `level.error` and coloured red.

### Examples

Here are a few examples of structured logs.

**Note:** The entire JSON log must be emitted on a single line to be parsed correctly.

```json
{"level":"info","message":"A minimal structured log"}
```

```json
{"level":"error","message":"Something bad happened"}
```

```json
{"level":"info","message":"New purchase!","productId":123,"userId":456}
```

```json
{"level":"info","message":"User roles updated","roles":["editor","viewer"],"userId":123}
```

### Normalization Strategy

In order to ensure a consistent query format across Railway services, incoming logs are normalized to the above format automatically.

- Non-structured logs are converted to `{"message":"...","level":"..."}`

- `log.msg` converted to `log.message`

- `log.level` converted to `log.severity`

- Logs from `stderr` are converted to `level.error`

- Logs from `stdout` are converted to `level.info`

- Levels are lowercased and matched to the closest of `debug`, `info`, `warn`, `error`



================================================
FILE: src/docs/guides/luminus.md
================================================
---
title: Deploy a Clojure Luminus App
description: Learn how to deploy your Clojure Luminus app to Railway with this step-by-step guide. It covers quick setup, database integration, one-click deploys and other deployment strategies.
---

[Luminus](https://luminusweb.com) is a Clojure micro-framework based on a set of lightweight libraries. It aims to provide a robust, scalable, and easy to use platform. With Luminus you can focus on developing your app the way you want without any distractions.

This guide covers how to deploy a Luminus app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Luminus app!

## Create a Luminus App

**Note:** If you already have a Luminus app locally or on GitHub, you can skip this step and go straight to the [Deploy Luminus App to Railway](#deploy-luminus-app-to-railway).

To create a new Luminus app, ensure that you have [JDK](https://www.oracle.com/java/technologies/downloads/) and [Leiningen](https://leiningen.org/#install) installed on your machine.

Run the following command in your terminal to create a new Luminus app with Postgres and a production ready server:

```bash
lein new luminus helloworld +postgres +immutant
```

A new Luminus app will be provisioned for you in the `helloworld` directory with support for PostgreSQL as the database and configures [Immutant](https://github.com/immutant/immutant) as the web server, which is production-ready and optimized for Clojure applications.

**Note:** If you use MySQL or another database, you can pass it as an option when trying to create a new app.

### Run the Luminus App Locally

Open `dev-config.edn` and add your Postgres database URL like so:

```clojure
 :database-url "postgresql://username:password@127.0.0.1:5432/helloworld_dev"
```

- `username:password` is your database user and password.
- `helloworld_dev` is the database you have created locally.


Next, run `lein run migrate` to run the database migrations.

Finally, run `lein run` to launch your app!

Open your browser and go to `http://localhost:3000` to see the app.

### Prepare Clojure Luminus App for Deployment

1. We need to add the `ceshire` library to our dependencies. `cheshire` is a popular JSON encoding/decoding library in Clojure.

Open your `project.clj` file and ensure you have the following under `:dependencies`:

```clojure
...
[cheshire "5.10.0"]
```

Run the command below in your terminal to ensure it is installed:

```bash
lein deps
```

2. Create a `nixpacks.toml` file in the root directory of the app. 

The [nixpacks.toml file](https://nixpacks.com/docs/configuration/file) is a configuration file used by Nixpacks, a build system developed and used by Railway, to set up and deploy applications. 

In this file, you can specify the instructions for various build and deployment phases, along with environment variables and package dependencies.

Add the following content to the file:

```toml
# nixpacks.toml

[start]
cmd = "java -jar $(find ./target -name '*.jar' ! -name '*SNAPSHOT*') migrate && java -jar $(find ./target -name '*.jar' ! -name '*SNAPSHOT*')"

```

Here, we are specifically instructing Nixpacks to use the following command to start the app.

The command searches for all `.jar` files in the `target` directory (where the standalone JAR file is located after the build), excludes any file with "SNAPSHOT" in its name, and passes the selected file to `java -jar` to run.

It starts by running the JAR file with the `migrate` option to apply database migrations. Once migrations are complete, it reruns the JAR file to launch the application.

## Deploy the Luminus App to Railway

Railway offers multiple ways to deploy your Clojure app, depending on your setup and preference. 

### One-Click Deploy From a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/DsDYI2)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=clojure" target="_blank">variety of Clojure app templates</a> created by the community.

### Deploy From the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Luminus app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Add a Postgres Database Service**:
    - Run `railway add -d postgres`.
    - Hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
4. **Add a Service and Environment Variable**:
	- Run `railway add`.
	- Select `Empty Service` from the list of options.
	- In the `Enter a service name` prompt, enter `app-service`.
	- In the `Enter a variable` prompt, enter `DATABASE_URL=${{Postgres.DATABASE_URL}}`. 
		- The value, `${{Postgres.DATABASE_URL}}`, references the URL of your new Postgres database. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
	
	**Note:** Explore the [Railway CLI reference](/reference/cli-api#add) for a variety of options.
3. **Deploy the Application**:
    - Run `railway up` to deploy your app.
		- This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment is complete, we can proceed to generate a domain for the app service.
7. **Set Up a Public URL**:
    - Run `railway domain` to generate a public URL for your app.
	- Visit the new URL to see your app live in action!

<Image src="https://res.cloudinary.com/railway/image/upload/v1730897279/docs/quick-start/clojure_luminus_on_railway.png"
alt="screenshot of the deployed Clojure service"
layout="responsive"
width={2325} height={2187} quality={100} />

### Deploy From a GitHub Repo

To deploy a Clojure Luminus app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. 
		- This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        -  `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Clojure app](https://nixpacks.com/docs/providers/clojure).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the Luminus app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Clojure official image
	# https://hub.docker.com/_/clojure
	FROM clojure:temurin-23-lein-bookworm

	# Create and change to the app directory.
	WORKDIR /app

	# Copy local code to the container image.
	COPY . ./

	# Build the app.
	RUN lein uberjar

	# Run the app by dynamically finding the standalone JAR file in the target/uberjar directory
	CMD ["sh", "-c", "java -jar $(find target/uberjar -name '*.jar' ! -name '*SNAPSHOT*')"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Clojure apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/manage-deployments.md
================================================
---
title: Manage Deployments with the Public API
description: Learn how to manage deployments via the public GraphQL API.
---

Here are some examples to help you get started managing your deployments using the Public API.

### Fetch Latest Active Deployment

The query below will fetch the latest active deployment for a service for a specific environment.

```graphql
query deployments {
  deployments(
    first: 1
    input: {
      projectId: "8df3b1d6-2317-4400-b267-56c4a42eed06"
      environmentId: "9fb4baf0-809a-40ec-af32-751f50890802"
      serviceId: "4bd252dc-c4ac-4c2e-a52f-051804292035"
    }
  ) {
    edges {
      node {
        id
        staticUrl
      }
    }
  }
}
```

### Restarting a Deployment

The query below will restart the deployment with the specified `id`.

```graphql
mutation deploymentRestart {
  deploymentRestart(id: "9d5b1306-e22e-4357-9b3f-cc3b97ed8240")
}
```



================================================
FILE: src/docs/guides/manage-projects.md
================================================
---
title: Manage Projects with the Public API
description: Learn how to manage projects via the public GraphQL API.
---

Here are some examples to help you get started managing your projects using the Public API.

### Fetch All Your Projects

The query below will fetch all your personal projects along with all the services, plugins and environment for them.

```graphql
query me {
  me {
    projects {
      edges {
        node {
          id
          name
          services {
            edges {
              node {
                id
                name
              }
            }
          }
          plugins {
            edges {
              node {
                id
                name
              }
            }
          }
          environments {
            edges {
              node {
                id
                name
              }
            }
          }
        }
      }
    }
  }
}
```

### Delete a Project

<Banner variant="danger">This is a destructive action</Banner>

The mutation below will delete the project with the specified `id`.

```graphql
mutation projectDelete {
  projectDelete(id: "5e594338-0faa-415f-b2a7-2b5f2d4ec11a")
}
```



================================================
FILE: src/docs/guides/manage-services.md
================================================
---
title: Manage Services with the Public API
description: Learn how to create services via the public GraphQL API.
---

Here are some examples to help you get started managing your services using the Public API.

### Create a New Service With a GitHub Repo

The mutation below will create a new service with the specified GitHub repo attached. The response will contain the newly created service.

<Banner variant="info">You can also use `image` inside the `source` to attach a Docker image to the service.</Banner>

```graphql
mutation serviceCreate {
  serviceCreate(
    input: {
      projectId: "8df3b1d6-2317-4400-b267-56c4a42eed06"
      source: { repo: "railwayapp-templates/django" }
    }
  ) {
    id
  }
}
```



================================================
FILE: src/docs/guides/manage-variables.md
================================================
---
title: Manage Variables with the Public API
description: Learn how to manage variables via the public GraphQL API.
---

Here are some examples to help you get started managing your variables using the Public API.

### Fetch Variables For a Service

The query below will fetch all the variables for a service for a specific environment. The response will contain all the variables in a key/value object.

<Banner variant="info">You can omit the `serviceId` from this query to fetch the shared variables for the environment.</Banner>

```graphql
query variables {
  variables(
    projectId: "8df3b1d6-2317-4400-b267-56c4a42eed06"
    environmentId: "9fb4baf0-809a-40ec-af32-751f50890802"
    serviceId: "4bd252dc-c4ac-4c2e-a52f-051804292035"
  )
}
```

### Upsert Variable For a Service

The mutation below will upsert a new variable for the specified service within the specified environment. You can use this to both create and update variables.

<Banner variant="info">You can omit the `serviceId` from this mutation to create a shared variable.</Banner>

```graphql
mutation variableUpsert {
  variableUpsert(
    input: {
      projectId: "8df3b1d6-2317-4400-b267-56c4a42eed06"
      environmentId: "9fb4baf0-809a-40ec-af32-751f50890802"
      serviceId: "4bd252dc-c4ac-4c2e-a52f-051804292035"
      name: "NEW_VARIABLE"
      value: "SECRET_VALUE"
    }
  )
}
```



================================================
FILE: src/docs/guides/metrics.md
================================================
---
title: Viewing Metrics
description: Discover resource usage for your services on Railway via the Metrics tab.
---

Railway provides resource usage information on deployments within a service which can be used to diagnose issues with a project's performance.

## Accessing Service Metrics

Access a service's metrics by clicking on a service in the project canvas, and going to the "Metrics" tab.

<Image src="https://res.cloudinary.com/railway/image/upload/v1645223702/docs/metrics_angr0b.png"
alt="Screenshot of Metrics Page"
layout="intrinsic"
width={1576} height={1100} quality={80} />

The following metrics are provided -

- CPU
- Memory
- Disk Usage
- Network

## Understanding the Metrics Graphs

Graphs include dotted lines to indicate when new deployments began. Up to 30 days of data is available for each project.

<Image src="https://res.cloudinary.com/railway/image/upload/v1645223703/docs/usage-commit_fkvbqj.png"
alt="Screenshot of Metric Timeseries Commit Information"
layout="responsive"
width={904} height={726} quality={80} />

Projects maintain a continuous time-series for all deployments within a service, not just the latest one. Deployments appear on the graph so users can see which commit may have caused a spike in resources.

For services with multiple replicas, the metrics from all replicas are summed up and displayed in the metrics tab, for example, if you have 2 replicas, each using 100 MB of memory, the memory usage displayed in the metrics tab will be 200 MB.



================================================
FILE: src/docs/guides/mongodb.md
================================================
---
title: MongoDB
description: Learn how to deploy a MongoDB database on Railway.
---

The Railway MongoDB database template allows you to provision and connect to a MongoDB database with zero configuration.

## Deploy

Add a MongoDB database to your project via the `ctrl / cmd + k` menu or by clicking the `+ New` button on the Project Canvas.

<Image src="https://res.cloudinary.com/railway/image/upload/v1695934218/docs/databases/addDB_qxyctn.gif"
alt="GIF of the Adding Database"
layout="responsive"
width={450} height={396} quality={100} />

You can also deploy it via the [template](https://railway.com/template/mongodb) from the template marketplace.

#### Deployed Service

Upon deployment, you will have a MongoDB service running in your project, deployed from the official [mongo](https://hub.docker.com/_/mongo) Docker image.

#### Custom Start Command

The MongoDB database service starts with the following [Start Command](/deploy/deployments#start-command) to enable communication over [Private Network](/reference/private-networking): `mongod --ipv6 --bind_ip ::,0.0.0.0  --setParameter diagnosticDataCollectionEnabled=false`

## Connect

Connect to MongoDB from another service in your project by [referencing the environment variables](/guides/variables#referencing-another-services-variable) made available in the Mongo service:

- `MONGOHOST`
- `MONGOPORT`
- `MONGOUSER`
- `MONGOPASSWORD`
- `MONGO_URL`

#### Connecting Externally

It is possible to connect to MongoDB externally (from outside of the [project](/develop/projects) in which it is deployed), by using the [TCP Proxy](/deploy/exposing-your-app#tcp-proxying) which is enabled by default.

*Keep in mind that you will be billed for [Network Egress](/reference/pricing/plans#resource-usage-pricing) when using the TCP Proxy.*

### Modify the Deployment

Since the deployed container is pulled from the official [MongoDB](https://hub.docker.com/_/mongo) image in Docker Hub, you can modify the deployment based on the [instructions in Docker Hub](https://hub.docker.com/_/mongo).

## Backup and Monitoring

Especially for production environments, performing regular backups and monitoring the health of your database is essential. Consider adding:

- **Backups**: Automate regular backups to ensure data recovery in case of failure. We suggest checking out our native [Backups](/reference/backups) feature.

- **Observability**: Implement monitoring for insights into performance and health of your database.  Check out the tutorial which covers [setting up observability on a Mongo replica set](https://docs.railway.com/tutorials/deploy-and-monitor-mongo#4-set-up-monitoring-of-the-replica-set).

## Additional Resources

While these templates are available for your convenience, they are considered unmanaged, meaning you have total control over their configuration and maintenance.  

We *strongly encourage you* to refer to the source documentation to gain deeper understanding of their functionality and how to use them effectively.  Here are some links to help you get started:

- [Mongo Documentation](https://www.mongodb.com/docs/manual/introduction/)
- [Replication in Mongo](https://www.mongodb.com/docs/manual/replication/)


================================================
FILE: src/docs/guides/monitoring.md
================================================
---
title: Monitoring
description: Learn how to monitor your services on Railway.
---

Let's learn about monitoring your services!

At this point, you should be feeling confident in your understanding of the foundational concepts and operations in Railway.

Now is a great time to learn how to dig into your service's logs and metrics, so you can debug issues or track performance between code deploys.  You'll also learn how to enable notifications when your [deployments change state](/reference/deployments#deployment-states).

#### Main Concepts
|||
|-|-|
| **Logs and Metrics** | Logs are the lines sent to `stdout` or `stderr` from your application code.  Metrics represent measured system level performance, like CPU and RAM.  Railway surfaces both logs and metrics for your services.                                                                                     |
| **Notifications** | An essential part of monitoring is through proactive notifications.  Configure a webhook to be notified when any of your deployed services change state. |
|||

The next few pages cover the topics above and how to interact with them inside the platform.


================================================
FILE: src/docs/guides/monorepo.md
================================================
---
title: Deploying a Monorepo
description: Learn how to deploy monorepos on Railway.
---

Railway provides a few features to help improve support for deploying monorepos
of various types:
1. **[Isolated Monorepo](#deploying-an-isolated-monorepo)** → A repository that contains components that are completely isolated to the
directory they are contained in (eg. JS frontend and Python backend)
2. **[Shared Monorepo](#deploying-a-shared-monorepo)** → A repository that contains components that share code or configuration from the
root directory (eg. Yarn workspace or Lerna project)

For a full step by step walk through on deploying an isolated Monorepo see our <a href="/tutorials/deploying-a-monorepo" target="_blank">tutorial</a> on the subject.

## Deploying an Isolated Monorepo

The simplest form of a monorepo is a repository that contains two completely
isolated projects that do not share any code or configuration.

```
├── frontend/
│   ├── index.js
│   └── ...
└── backend/
    ├── server.py
    └── ...
```

To deploy this type of monorepo on Railway, define a root directory for the service. 
1. Select the service within the project canvas to open up the service view. 
2. Click on the Settings tab.
3. Set the root directory option. Setting this means that Railway will only pull down files from that directory when creating new deployments.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1637798659/docs/root-directory_achzga.png"
alt="Screenshot of root directory configuration"
layout="intrinsic"
width={980} height={380} quality={80} />

**Note:** The **Railway Config File** does not follow the **Root Directory** path. You have to specify the absolute path for the `railway.json` or `railway.toml` file.

## Deploying a Shared Monorepo

Popular in the JavaScript ecosystem, shared monorepos contain multiple components that all share a common root directory. 

By default, all components are built with a single command from the root directory (e.g. `npm run build`). However, if you are using Nixpacks, then you can override the build command in the service settings.

```
├── package.json
└── packages
    ├── backend
    │   └── index.js
    ├── common
    │   └── index.js
    └── frontend
        └── index.jsx
```

To deploy this type of monorepo in Railway, define a separate custom start
command in Service Settings for each project that references the monorepo
codebase.
1. Select the service within the project canvas to open the service view.
2. Click on the Settings tab.
3. Set the start command, e.g. `npm run start:backend` and `npm run start:frontend`

<Image
src="https://res.cloudinary.com/railway/image/upload/v1637798815/docs/custom-start-command_a8vcxs.png"
alt="Screenshot of custom start command configuration"
layout="intrinsic"
width={1302} height={408} quality={80} />

## Watch paths

To prevent code changes in one service from triggering a rebuild of other services in your monorepo, you should configure watch paths.

Watch paths are <a href="https://git-scm.com/docs/gitignore#_pattern_format" target="_blank">gitignore-style</a> patterns that can be used to trigger a new deployment based on what file paths have changed. 

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743192841/docs/watch-paths_zv62py.png"
alt="Screenshot of Railway Watch Paths"
layout="responsive"
width={1200} height={456} quality={80} />

A monorepo might want to only trigger builds if files are changed in the `/packages/backend` directory, for example.

## Using the CLI

When interacting with your services deployed from a monorepo using the CLI, always ensure you are "linked" to the appropriate service when executing commands.

To link to a specific service from the CLI, use `railway link` and follow the prompts.



================================================
FILE: src/docs/guides/mysql.md
================================================
---
title: MySQL
description: Learn how to deploy a MySQL database on Railway.
---

The Railway MySQL database template allows you to provision and connect to a MySQL database with zero configuration.

### Deploy

Add a MySQL database to your project via the `ctrl / cmd + k` menu or by clicking the `+ New` button on the Project Canvas.

<Image src="https://res.cloudinary.com/railway/image/upload/v1695934218/docs/databases/addDB_qxyctn.gif"
alt="GIF of the Adding Database"
layout="responsive"
width={450} height={396} quality={100} />

You can also deploy it via the [template](https://railway.com/template/mysql) from the template marketplace.

#### Deployed Service

Upon deployment, you will have a MySQL service running in your project, deployed directly from the [mysql Docker image](https://hub.docker.com/_/mysql).

### Connect

Connect to MySQL from another service in your project by [referencing the environment variables](/guides/variables#referencing-another-services-variable) made available in the MySQL service:

- `MYSQLHOST`
- `MYSQLPORT`
- `MYSQLUSER`
- `MYSQLPASSWORD`
- `MYSQLDATABASE`
- `MYSQL_URL`

#### Connecting Externally

It is possible to connect to MySQL externally (from outside of the [project](/develop/projects) in which it is deployed), by using the [TCP Proxy](/deploy/exposing-your-app#tcp-proxying) which is enabled by default.

*Keep in mind that you will be billed for [Network Egress](/reference/pricing/plans#resource-usage-pricing) when using the TCP Proxy.*

### Modify the Deployment

Since the deployed container is pulled from the official MySQL image in Docker hub, you can modify the deployment based on the [instructions in Docker hub](https://hub.docker.com/_/mysql).

## Backups and Observability

Especially for production environments, performing regular backups and monitoring the health of your database is essential.  Consider adding:

- **Backups**: Automate regular backups to ensure data recovery in case of failure. We suggest checking out our native [Backups](/reference/backups) feature.

- **Observability**: Implement monitoring for insights into performance and health of your databases.  If you're not already running an observability stack, check out these templates to help you get started building one:
    - [Prometheus](https://railway.com/template/KmJatA)
    - [Grafana](https://railway.com/template/anURAt)

## Additional Resources

While these templates are available for your convenience, they are considered unmanaged, meaning you have total control over their configuration and maintenance.

We *strongly encourage you* to refer to the source documentation to gain deeper understanding of their functionality and how to use them effectively. Here are some links to help you get started:

- [MySQL Documentation](https://dev.mysql.com/doc/relnotes/mysql/8.4/en/)
- [MySQL InnoDB Cluster Documentation](https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-innodb-cluster.html)
- [MySQL Router Documentation](https://dev.mysql.com/doc/mysql-router/8.0/en/mysql-router-general.html)


================================================
FILE: src/docs/guides/nest.md
================================================
---
title: Deploy a NestJS App
description: Learn how to deploy a NestJS app to Railway with this step-by-step guide. It covers quick setup, database integration, one-click deploys and other deployment strategies.
---

[Nest](https://nestjs.com) is a modern Node.js framework designed to create efficient, reliable, and scalable server-side applications. Built on top of powerful HTTP server frameworks, it uses Express as the default but also offers seamless support for Fastify for enhanced performance and flexibility.

This guide covers how to deploy a Nest app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's go ahead and create a Nest app!

## Create a Nest App

**Note:** If you already have a Nest app locally or on GitHub, you can skip this step and go straight to the [Deploy Nest App to Railway](#deploy-the-nest-app-to-railway).

To create a new Nest app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) and [NestJS](https://docs.nestjs.com/#installation) installed on your machine.

Run the following command in your terminal to create a new Nest app:

```bash
nest new helloworld
```

A new Nest app will be provisioned for you in the `helloworld` directory.

### Run the Nest App locally

Next, start the app locally by running the following command:

```bash
npm run start
```

Launch your browser and navigate to `http://localhost:3000` to view the app.

If you'd prefer to run the app on a different port, simply use the command `PORT=8080 npm run start` in the terminal.

Afterward, you can access the app at `http://localhost:8080`.

### Add and Configure Database

**Note:** We will be using Postgres for this app. If you don’t have it installed locally, you can either [install it](https://www.postgresql.org/download) or use a different Node.js database package of your choice.

1. Create a database named `nestjshelloworld_dev`.

2. Install the following packages:

```bash
npm i @nestjs/typeorm typeorm pg
```

- typeorm is an ORM library for Typescript and JavaScript.
- pg is for communicating with Postgres database.

3. Open the `src/app.module.ts` file and modify the content to the code below:

```js
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'postgres',
      host: 'localhost',
      port: 5432,
      username: 'username',
      password: 'password',
      database: 'nestjshelloworld_dev',
      entities: [],
      synchronize: true,
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

Start the app using the command, `npm run start:dev`. The code above tries to connect to the database once the app is started. If any of the credentials are wrong, you will see a warning stating that the app can't connect to the database.

4. Open `src/app.service.ts` file and modify the content to return `Hello World, Welcome to Railway!`. 

```js
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World, Welcome to Railway!';
  }
}
```

5. Run the app again to see your changes in action!

### Prepare NestJS App for deployment

In the `src/app.module.ts` file, replace the hardcoded Postgres database credentials with environment variables:

```js
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'postgres',
      host: process.env.DB_HOST,
      port: 5432,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_DATABASE,
      entities: [],
      synchronize: true,
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

This allows the app to dynamically pull the correct database configuration from Railway during deployment.

## Deploy the Nest App to Railway

Railway offers multiple ways to deploy your Nest app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started with Nest connected to a Postgres database, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/template/nvnuEH)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=nest" target="_blank">variety of Nest app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Nest app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Add a Postgres Database Service**:
    - Run `railway add -d postgres`.
    - Hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
4. **Add a Service and Environment Variable**:
    - Run `railway add`.
    - Select `Empty Service` from the list of options.
    - In the `Enter a service name` prompt, enter `app-service`.
    - In the `Enter a variable` prompt, enter 
        - `DB_DATABASE=${{Postgres.PGDATABASE}}`. 
        - `DB_USERNAME=${{Postgres.PGUSER}}`
        - `DB_PASSWORD=${{Postgres.PGPASSWORD}}`
        - `DB_HOST=${{Postgres.PGHOST}}`
        - The Postgres values references the credentials of your new Postgres database. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
    
    **Note:** Explore the [Railway CLI reference](/reference/cli-api#add) for a variety of options.
5. **Deploy the Application**:
    - Run `railway up` to deploy your app.
        - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment is complete, we can proceed to generate a domain for the app service.
6. **Set Up a Public URL**:
    - Run `railway domain` to generate a public URL for your app.
    - Visit the new URL to see your app live in action!

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1732547945/docs/quick-start/nest_on_railway.png"
alt="screenshot of the deployed Nest service"
layout="responsive"
width={2069} height={2017} quality={100} />

### Deploy from a GitHub Repo

To deploy a Nest app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. 
        - This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        - `DB_DATABASE=${{Postgres.PGDATABASE}}`. 
        - `DB_USERNAME=${{Postgres.PGUSER}}`
        - `DB_PASSWORD=${{Postgres.PGPASSWORD}}`
        - `DB_HOST=${{Postgres.PGHOST}}`
        - The Postgres values references the credentials of your new Postgres database. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Node.js app via Nixpacks](https://nixpacks.com/docs/providers/node).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the Nest app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node official image
    # https://hub.docker.com/_/node
    FROM node:lts

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image
    COPY . ./

    # Install packages
    RUN npm ci
    
    # Serve the app
    CMD ["npm", "run", "start:prod"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Nest apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/networking.md
================================================
---
title: Networking
description: Learn how to connect your services on Railway.
---

Let's get your services connected!

Once you are familiar with the foundational components of the platform, you'll likely want to get things connected.  The guides in this section cover the features that enable the best experience possible when establishing connectivity to and within your application.

#### Networking Features
|||
|-|-|
| **Public Networking** | Public networking refers to exposing your application to the public network.  Railway makes it easy to make your applications publicly accessible.                                                                                   |
| **Private Networking** | Private networking refers to restricting communication of your services to a private network, inaccessible to the public internet. All Projects in Railway are provisioned with their own private network. |
| **TCP Proxy** | TCP Proxy is a feature that enables proxying public traffic to a TCP service, like a Database.  This feature allows you to connect to your database services in Railway from anywhere on the internet.                                                                                                            |
|||

Dive into the next pages to understand how to use these great features and get your services talking.


================================================
FILE: src/docs/guides/nuxt.md
================================================
---
title: Deploy a Nuxt App
description: Learn how to deploy a Nuxt app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Nuxt](https://nuxt.com) is a Vue.js framework that makes web development intuitive and powerful. You can create performant and production-grade full-stack web apps and websites with confidence.

Nuxt is known as **The Intuitive Vue Framework** because it simplifies building Vue.js applications with features like server-side rendering and easy routing.

This guide covers how to deploy a Nuxt app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Nuxt app!

## Create a Nuxt App

**Note:** If you already have a Nuxt app locally or on GitHub, you can skip this step and go straight to the [Deploy Nuxt App on Railway](#deploy-the-nuxt-app-to-railway).

To create a new Nuxt app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to create a new Nuxt app:

```bash
npx nuxi@latest init helloworld
```

A new Nuxt app will be provisioned for you in the `helloworld` directory.

### Run the Nuxt App locally

Next, `cd` into the directory and start the development server by running the following command:

```bash
npm run dev
```

Open your browser and go to `http://localhost:3000` to see your app.

## Deploy the Nuxt App to Railway

Railway offers multiple ways to deploy your Nuxt app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/lQQgLR)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=nuxt" target="_blank">variety of Nuxt app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Vue app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Modify Package.json Config**:
    - By default, Nuxt doesn't add a start script in the `package.json` file. We'll need to add that to instruct Railway on how to run our app. 
    
    - Add `"start":"node .output/server/index.mjs"` to the `package.json` file.

    **package.json**
    ```bash
    {
        "name": "nuxt-app",
        "private": true,
        "type": "module",
        "scripts": {
            "build": "nuxt build",
            "dev": "nuxt dev",
            "start": "node .output/server/index.mjs",
            "generate": "nuxt generate",
            "preview": "nuxt preview",
            "postinstall": "nuxt prepare"
        },
        "dependencies": {
            "nuxt": "^3.13.0",
            "vue": "latest",
            "vue-router": "latest"
        }
    }
    ```
    **Note:** Railway uses [Nixpacks](/reference/nixpacks) to build and deploy your code with zero configuration. The Nixpack Node provider will pick up the start script in the `package.json` file and use it to serve the app.
4. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729262446/docs/quick-start/nuxt_app.png"
alt="screenshot of the deployed Nuxt service"
layout="responsive"
width={2383} height={2003} quality={100} />

### Deploy from a GitHub Repo

To deploy a Nuxt app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Modify Package.json Config**:
    - Follow [step 3 mentioned in the CLI guide](#deploy-from-the-cli)
3. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
4. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
5. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `helloworld` or Nuxt app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine AS build

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build

    # Copy files to the container image.
    COPY --from=build /app ./
    
    # Serve the app
    CMD ["npm", "run", "start"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Nuxt apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/observability.md
================================================
---
title: Observability Dashboard
description: Explore the built-in observability dashboard on Railway.
---

Railway provides a built-in observability dashboard that provides a customizable view into chosen metrics, logs, and data all in one place.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1717179720/Wholescreenshot_vc5l5e.png"
alt="Screenshot of the Observability Dashboard"
layout="responsive"
width={1111} height={649} quality={80} />

[Shape the future of this dashboard! We are actively collecting feedback on usecases and bugs you may encounter.](https://station.railway.com/feedback/observability-dashboard-51871a24)

## Navigating to the Observability Dashboard

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743129656/docs/observability_hsja97.png"
alt="Screenshot of the Updated Project Navigation"
layout="responsive"
width={1200} height={260} quality={80} />

_Users may notice that the project navigation is updated with the feature._

1. Navigate to the Observability tab from the main project top bar.
2. Ensure you are in the correct environment (e.g., production).

The Observability Dashboard is uniquely scoped to each project environment as services may differ between each environment.

### Getting Started

By default the Observability Dashboard starts with no configured widgets.

- When you first access a new environment, you will be prompted to "Start with a simple dashboard" or "Add new item".
- Click on "Start with a simple dashboard" to create your initial layout, Railway will autogenerate graphs and widgets with spend, service metrics and logs.

## Creating Widgets

Clicking "New" in the top right corner of the dashboard will open the Widget creation modal. Widget types depend on the data source provided, where they can be a graph, displayed data, or logs.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1717179725/erroronly_xdfscq.png"
alt="Screenshot of the Widget Creation Flow"
layout="responsive"
width={1101} height={830} quality={80} />

Widgets have a name and a description attached to them. By default Railway will provide a suggested name for the widget upon creation and display a preview of the content that is to be displayed on the dashboard.

### Available Data Sources

On the top right, you can select a data source to display within a widget.

- CPU Usage: Track the CPU usage for various services over time.
- Memory Usage: Monitor the memory consumption for your services.
- Network In/Out: Keep track of network traffic.
- Disk Usage: Observe disk usage trends.
- Logs: Select logs from a single service or multiple services with filtering
- Project Usage: report the spend of your project and track the overall resource usage of your project.

### Filtering Widget Information

When creating a widget, you can use Railway's filtering syntax to select services, select data, and perform logical negations to define rules.

- `<keyword>` or `"key phrase"` → Filter by exact text
- `@key:value` → Filter by key/value pair
  - Valid keys are replica, deployment, service, plugin
- `@attribute:value` → Filter by custom attribute (see structured logs below)

Any of the above expressions can be combined with boolean operators `AND`,
`OR`, and `-` (negation).

## Arranging the Dashboard

The Dashboard is customizable in content and layout. Widgets can be stacked, repositioned and resized.

Clicking the "Edit" button on the top right corner of the dashboard will transition the dashboard into edit mode, the dashboard then allows the ability to resize and reposition your widgets using the provided handle on each widget. To persist your changes, select "Save".

<Image
src="https://res.cloudinary.com/railway/image/upload/v1717179246/dragandmoveob_xg6qfz.gif"
alt="Screenshot of Widget Interaction"
layout="responsive"
width={800} height={491} quality={80} />

Resizing and Moving Widgets:

- Drag and drop items to rearrange them on the grid by dragging the arrow handle.
- Resize widgets by dragging the bottom right corner handle

_Note for Small Screens: On smaller screens, items stack vertically and respect their configured height to ensure readability and usability. Editing is disabled at smaller visual breakpoints._

## Editing/Deleting Widgets

Under Edit mode, each widget will have a three dot menu at the upper right corner at the bounding box of the widget. Clicking into this menu will allow you to edit the data source or delete the widget.

To persist your changes, make sure you press Save at the top right corner.



================================================
FILE: src/docs/guides/optimize-performance.md
================================================
---
title: Optimize Performance
description: Explore quick ways to optimize your app's performance on Railway.
---

Railway offers some quick and easy ways to configure deployments for achieving optimal performance.  

Specifically, we offer the following features:

- Horizontal Scaling with Replicas where each individual replica can use the full resources your plan allows for. ([Vertical scaling](/reference/scaling#vertical-autoscaling) is done automatically)
- Regional Deployments

Continue reading for information on how to configure these.

## Configure Horizontal Scaling

Scale horizontally by manually increasing the number of replicas for a service.

Each replica has access to the full resources allocated by your plan. For instance, with the `Pro` plan, each of your replicas can utilize up to 32 vCPU and 32GB of memory, for example, if you had 2 replicas, your service would be able to utilize up to 64 vCPU and 64GB of memory split between the 2 replicas.

Railway's infrastructure spans multiple regions across the globe, and by default Railway deploys to your [preferred region](https://railway.com/workspace).

<Image 
    src="https://res.cloudinary.com/railway/image/upload/v1733386054/multi-region-replicas_zov7rv.png"
    alt="Multi-region replicas"
    layout="responsive"
    width={1370}
    height={934}
/>


To change the number of replicas per deploy within your service, go to the service settings view and look for the "Regions" field in the "Deploy" section. This will create multiple instances of your service and distribute traffic between them.

*Additional regions may be added in the future as Railway continues expanding its infrastructure footprint.*

### Replica ID Environment Variable

Each replica will be deployed with a Railway-provided environment variable named `RAILWAY_REPLICA_ID` which can be used for logging and monitoring, for example.

### Replica Region Environment Variable

Each replica will be deployed with a Railway-provided environment variable named `RAILWAY_REPLICA_REGION` which can be used for logging and monitoring, for example.

### Load Balancing Between Replicas

If you are using multi-region replicas, Railway will automatically route public traffic to the nearest region and then randomly distribute requests to the replicas within that region.

If you are using a single region with multiple replicas, Railway will randomly distribute public traffic to the replicas of that region.

**Note:** For now Railway does not support sticky sessions nor report the usage of the individual replicas within the metrics view, all metrics are aggregated across all replicas in all regions.

### Set a Preferred Region

To set a default or preferred region, do so from your [Workspace Settings](https://railway.com/workspace).

### Impact of Region Changes

For information on the impact of changing a service's region, see the [Regions reference guide](/reference/deployment-regions#impact-of-region-changes).

## Singleton Deploys

By default, Railway maintains only one deploy per service.



================================================
FILE: src/docs/guides/optimize-usage.md
================================================
---
title: Optimize Usage
description: Optimize your Railway projects for budget-friendly billing by setting limits and activating app sleep.
---

Railway provides controls over resource usage in the form of usage limits and auto-sleeping of inactive services.

## Configuring Usage Limits

Usage Limits allow you to set a maximum limit on your usage for a billing cycle.

Visit the <a href="https://railway.com/workspace/usage" target="_blank">Workspace Usage page</a> to set the usage limits. Once you click the <kbd>Set Usage Limits</kbd> button, you will see a modal above where you can set a <kbd>Custom email alert</kbd> and a <kbd>Hard limit</kbd>.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743193518/docs/usage-limits_pqlot9.png" alt="Usage Limits Modal" layout="responsive" width={1200} height={1075} />

#### Setting Limits for Teams

If you want to set a usage limit for your team, use the account switcher in the top left corner of your dashboard to access the team's usage page.

#### Setting Limits for Prepaid Plans

If you are on a prepaid plan, you can not directly set a hard limit. Instead the amount of credits you load determines the hard limit.

### Custom Email Alert

Configure a soft limit by setting a threshold in Custom email alert. When your resource usage reaches the specified amount, we will email you that this threshold has been met and resources continue running.

### Hard Limit

Configure a hard limit to take resources offline once usage meets the specified threshold.

Multiple emails will be sent as your usage approaches your hard limit:

1. When your usage reaches 75% of your hard limit
2. When your usage reaches 90% of your hard limit
3. When your usage reaches 100% of your hard limit and workloads have been taken down.

<Banner variant="danger">Setting a hard limit is a possibly destructive action as you're risking having all your resources shut down once your usage crosses the specified amount.</Banner>

Find more information about Usage Limits in the [reference page](/reference/usage-limits).

## Use Private Networking

Using [Private Networking](/guides/private-networking) when communicating with other services (such as databases) within your Railway project will help you avoid unnecessary Network Egress costs.

### With Databases

Communicate with your Railway database over private networking by using the `DATABASE_URL` environment variable, instead of `DATABASE_PUBLIC_URL`:

### With Other Services

If your Railway services need to communicate with each other, you can find the service's private URL in the service settings:

<Image src="https://res.cloudinary.com/railway/image/upload/v1743193518/docs/private-networking_nycfyk.png" alt="Private Network URL" layout="responsive" width={1558} height={1156} />

Learn more about Railway's Private Networking [here](/guides/private-networking).

## Enabling Serverless

Enabling Serverless on a service tells Railway to stop a service when it is inactive, effectively reducing the overall cost to run it.

To enable Serverless, toggle the feature on within the service configuration pane in your project:

<Image src="https://res.cloudinary.com/railway/image/upload/v1696548703/docs/scale-to-zero/appSleep_ksaewp.png"
alt="Enable App Sleep"
layout="intrinsic"
width={700} height={460} quality={100} />

1. Navigate to your service's settings > Deploy > Serverless
2. Toggle "Enable Serverless"
3. To _disable_ Serverless, toggle the setting again

Read more about how Serverless works in the [Serverless Reference page](/reference/app-sleeping).

## Resource Limits

Resource limits are a way to limit the maximum amount of resources available to a service.

To toggle resource limits, navigate to your service's settings > Deploy > Resource Limits.

<Image
  src="https://res.cloudinary.com/railway/image/upload/v1721917970/resource-limits.png"
  alt="Resource Limits setting"
  layout="intrinsic"
  width={1298}
  height={658}
  quality={80}
/>

### Use Resource Limits

<Banner variant="warning">
Setting resource limits too low will cause your service to crash.
</Banner>

Using resource limits makes sense in scenarios where:

1. You don't want to risk a high bill due to unexpected spikes in usage
2. You are okay with the service crashing if it exceeds the limit



================================================
FILE: src/docs/guides/phoenix-distillery.md
================================================
---
title: Deploy a Phoenix App with Distillery
description: Learn how to deploy a Phoneix app with Distillery to Railway with this step-by-step guide. It covers quick setup, ecto setup, database integration, one-click deploys and other deployment strategies.
---

[Phoenix](https://phoenixframework.org) is popular Elixir framework designed for building scalable, maintainable, and high-performance web applications. It is known for its ability to handle real-time features efficiently, like WebSockets, while leveraging Elixir's concurrency model, which is built on the Erlang Virtual Machine (BEAM).

In this guide, you'll learn how to deploy Phoenix apps with [Distillery](https://hexdocs.pm/distillery/home.html) to Railway.

## Create a Phoenix App with Distillery

**Note:** If you already have a Phoenix app locally or on GitHub, you can skip this step and go straight to the [Deploy Phoenix App with Distillery to Railway](#deploy-phoenix-app-on-railway).

To create a new Phoenix app, ensure that you have [Elixir](https://elixir-lang.org/install.html) and [Hex package manager](https://hexdocs.pm/phoenix/installation.html) installed on your machine. Once everything is set up, run the following command in your terminal to install the Phoenix application generator:

```bash
mix archive.install hex phx_new
```

Next, run the following command:

```bash
mix phx.new helloworld_distillery
```

Select `Y` to install all dependencies.

This command will create a new Phoenix app named `helloworld_distillery` with some optional dependencies such as:

- [Ecto](https://hexdocs.pm/phoenix/ecto.html) for communicating with a database such as PostgreSQL, MySQL etc
- [Phoenix live view](https://hexdocs.pm/phoenix_live_view) for building realtime & interactive web apps.
- [Phoenix HTML and Tailwind CSS](https://hexdocs.pm/phoenix_html/Phoenix.HTML.html) for HTML apps.

### Configure Database 

Next, navigate into the `helloworld` directory using the `cd` command.

Open up the `config/dev.exs` file. You'll notice that a new Phoenix app is already set up with PostgreSQL settings. It assumes the database has a `postgres` user with the right permissions and a default password of `postgres`. Update the username and password to match your local PostgreSQL account credentials.

**Note**: If you prefer using a different database, like MySQL, you can easily switch the database adapter in the `mix.exs` file. Simply remove the `Postgrex` dependency and add `MyXQL` instead. For detailed instructions, check out this [guide on using other databases](https://hexdocs.pm/phoenix/ecto.html#using-other-databases) in Phoenix.

The default database name is set to `helloworld_dev`, but feel free to change it to whatever you'd prefer.

Next, create the database for our app by running the following command:

```bash
mix ecto.create
```

A database will be created for our app.

### Add and Configure Distillery

1. Open up the `mix.exs` file and add Distillery to the deps function:

```elixir
  defp deps do
    [ ...,
     {:distillery, "~> 2.1"},
      ...,
    ]
  end
```

Now, run `mix deps.get` to update your dependencies.

2. Open up `config/prod.exs` file and update the endpoint section to the following:

```elixir
config :helloworld_distillery, HelloworldDistilleryWeb.Endpoint,
  cache_static_manifest: "priv/static/cache_manifest.json",
  server: true,
  root: ".",
  version: Application.spec(:phoenix_distillery, :vsn)
```

`server` configures the endpoint to boot the Cowboy application http endpoint on start.
`root` configures the application root for serving static files
`version` ensures that the asset cache will be busted on versioned application upgrades.

3. Initialize your Distillery release by running the following command:

```bash
mix distillery.init
```

This will create the `rel/config.exs` and `rel/vm.args` files. A `rel/plugins` directory will be created too. 

4. Create a Mix config file at `rel/config/config.exs`. Here, we are creating a mix config provider. Add the following to it:

```elixir
import Config

port = String.to_integer(System.get_env("PORT") || "4000")
default_secret_key_base = :crypto.strong_rand_bytes(43) |> Base.encode64

config :helloworld_distillery, HelloworldDistilleryWeb.Endpoint,
  http: [port: port],
  url: [host: "localhost", port: port],
  secret_key_base: System.get_env("SECRET_KEY_BASE") || default_secret_key_base
```

Now, update the `rel/config.exs` file to use our new provider. In the `environment :prod` part of the file, replace with the following:

```elixir
environment :prod do
  set include_erts: true
  set include_src: false
  set cookie: :"Jo2*~U0C1x!*E}!o}W*(mx=pzd[XWG[bW)T~_Kjy3eJuEJ;M&!eqj7AUR1*9Vw]!"
  set config_providers: [
    {Distillery.Releases.Config.Providers.Elixir, ["${RELEASE_ROOT_DIR}/etc/config.exs"]}
  ]
  set overlays: [
    {:copy, "rel/config/config.exs", "etc/config.exs"}
  ]
end
```

5. Finally, let's configure Ecto to fetch the database credentials from the runtime environment variables.

Open the `lib/helloworld_distillery/repo.ex` file and modify it to this:

```elixir
defmodule HelloworldDistillery.Repo do
  use Ecto.Repo,
    otp_app: :helloworld_distillery,
    adapter: Ecto.Adapters.Postgres,
    pool_size: 10
  def init(_type, config) do
    {:ok, Keyword.put(config, :url, System.get_env("DATABASE_URL"))}
  end
end
```

### Build the Release with Distillery

To build the release, run the following command:

```bash
npm run deploy --prefix assets && MIX_ENV=prod mix do phx.digest, distillery.release --env=prod
```

#### Handling Errors

If you encounter the following error after running the command:

```bash
==> Invalid application `:sasl`! The file sasl.app does not exist or cannot be loaded.
```

You need to modify your `mix.exs` file to include `:sasl`. Open the file and add `:sasl` to the `extra_applications` list in the `application` function:

```elixir
def application do
    [
      mod: {HelloworldDistillery.Application, []},
      extra_applications: [:logger, :runtime_tools, :sasl]
    ]
  end
```

After saving your changes, try running the command again as a super user to prevent access errors:

```bash
sudo npm run deploy --prefix assets && MIX_ENV=prod mix do phx.digest, distillery.release --env=prod
```

**Additional Errors**

If you encounter this error:

```bash
Failed to archive release: _build/prod/rel/helloworld_distillery/releases/RELEASES: no such file or directory
```

You’ll need to create the `RELEASES` directory manually. Once created, run the command again.

#### Successful Build

Upon a successful build, you should see output similar to the following:

```bash
...
==> Packaging release..
Release successfully built!
To start the release you have built, you can use one of the following tasks:

    # start a shell, like 'iex -S mix'
    > _build/prod/rel/helloworld_distillery/bin/helloworld_distillery console

    # start in the foreground, like 'mix run --no-halt'
    > _build/prod/rel/helloworld_distillery/bin/helloworld_distillery foreground

    # start in the background, must be stopped with the 'stop' command
    > _build/prod/rel/helloworld_distillery/bin/helloworld_distillery start

If you started a release elsewhere, and wish to connect to it:

    # connects a local shell to the running node
    > _build/prod/rel/helloworld_distillery/bin/helloworld_distillery remote_console

    # connects directly to the running node's console
    > _build/prod/rel/helloworld_distillery/bin/helloworld_distillery attach

For a complete listing of commands and their use:

    > _build/prod/rel/helloworld_distillery/bin/helloworld_distillery help
```

### Test the Release with Distillery locally

Now, let's test our release locally. First, create your database by running the following command:

```bash
mix ecto.create
```

Next, export the necessary environment variables by running:

```bash
export DATABASE_URL=postgresql://username:password@127.0.0.1:5432/helloworld_distillery
export SECRET_KEY_BASE=<your-secret-key-base>
```

With the environment set up, you can start the release with:

```bash
_build/prod/rel/helloworld_distillery/bin/helloworld_distillery foreground
```

Once your app is running, open your browser and visit `http://localhost:4000` to see it in action.

With your app up and running locally, let's move on to deploying the release to Railway!

### Prepare App for Deployment

Create a `nixpacks.toml` file in the root of your app directory and add the following content:

```toml
# nixpacks.toml
[variables]
MIX_ENV = 'prod'

[phases.setup]
nixPkgs = ['...', 'erlang']

[phases.install]
cmds = [
  'mix local.hex --force',
  'mix local.rebar --force',
  'mix deps.get --only prod'
]

[phases.build]
cmds = [
  'mix compile',
  'mkdir -p _build/prod/rel/helloworld_distillery/releases/RELEASES',
  'mix do phx.digest, distillery.release --env=prod',
]

[start]
cmd = "mix ecto.setup && _build/prod/rel/helloworld_distillery/bin/helloworld_distillery foreground"
```

This [`nixpacks.toml` file](/reference/config-as-code#nixpacks-config-path) instructs Railway to execute specific commands during the setup, install, build, and start phases of the deployment. It ensures your app is compiled, assets are digested, and the release is created correctly using Distillery.

## Deploy Phoenix App to Railway

Railway offers multiple ways to deploy your Phoenix app, depending on your setup and preference. Choose any of the following methods:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [Using the CLI](#deploy-from-the-cli).
3. [From a GitHub repository](#deploy-from-a-github-repo).

## One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. It sets up a Phoenix app with Distillery along with a Postgres database.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/_qWFnI)

After deploying, we recommend that you [eject from the template](/guides/deploy#eject-from-template-repository) to create a copy of the repository under your own GitHub account. This will give you full control over the source code and project.

## Deploy from the CLI

To deploy the Phoenix app using the Railway CLI, please follow the steps:

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Phoenix app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.

    **Note:** You might encounter an error––`warning: the VM is running with native name encoding of latin1 which` `may cause Elixir to malfunction as it expects utf8....`. Don’t worry, we’ll address this in the next step.
4. **Add a Database Service**:
    - Run `railway add`.
    - Select `PostgreSQL` by pressing space and hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
5. **Configure Environment Variables**:
    - Go to your app service <a href="/overview/the-basics#service-variables">**Variables**</a> section and add the following:
        - `SECRET_KEY_BASE` : Set the value to the your app's secret key. You can run `mix phx.gen.secret` locally to generate one.
        - `LANG`and `LC_CTYPE`: Set both values to `en_US.UTF-8`. This sets your app's locale and gets rid of the _native name encoding of latin1_ warning.
        - `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).  
        - `ECTO_IPV6`: Set the value to `true` to enable your Phoenix app to connect to the database through the [IPv6 private network](/guides/private-networking#listen-on-ipv6). 
    - Use the **Raw Editor** to add any other required environment variables in one go.
6. **Redeploy the Service**:
    - Click **Deploy** on the Railway Project Canvas to apply your changes.
7. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.
8. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.


<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1730309171/docs/quick-start/phoenix_distillery.png"
alt="screenshot of the deployed Phoenix with Distillery service"
layout="responsive"
width={2667} height={2177} quality={100} />

## Deploy from a GitHub Repo

To deploy the Phoenix app to Railway, start by pushing the app to a GitHub repo. Once that’s set up, follow the steps below to complete the deployment process.

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        - `SECRET_KEY_BASE` : Set the value to the your app's secret key. You can run `mix phx.gen.secret` locally to generate one.
        - `LANG`and `LC_CTYPE`: Set both values to `en_US.UTF-8` to ensure proper locale settings and avoid the _native name encoding of latin1 warning_. 
        -  `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
        - `ECTO_IPV6`: Set the value to `true` to enable your Phoenix app to connect to the database through the [IPv6 private network](/guides/private-networking#listen-on-ipv6).
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s an Elixir app](https://nixpacks.com/docs/providers/elixir).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Phoenix apps with Distillery effortlessly!
 
## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Monitoring](/guides/monitoring)
- [Deployments](/guides/deployments)


================================================
FILE: src/docs/guides/phoenix.md
================================================
---
title: Deploy a Phoenix App
description: Learn how to deploy a Phoenix app to Railway with this step-by-step guide. It covers quick setup, ecto setup, database integration, one-click deploys and other deployment strategies.
---

[Phoenix](https://phoenixframework.org) is popular Elixir framework designed for building scalable, maintainable, and high-performance web applications. It is known for its ability to handle real-time features efficiently, like WebSockets, while leveraging Elixir's concurrency model, which is built on the Erlang Virtual Machine (BEAM).

## Create a Phoenix App

**Note:** If you already have a Phoenix app locally or on GitHub, you can skip this step and go straight to the [Deploy Phoenix App on Railway](#deploy-phoenix-app-on-railway).

To create a new Phoenix app, ensure that you have [Elixir](https://elixir-lang.org/install.html) and [Hex package manager](https://hexdocs.pm/phoenix/installation.html) installed on your machine. Once everything is set up, run the following command in your terminal to install the Phoenix application generator:

```bash
mix archive.install hex phx_new
```

Next, run the following command:

```bash
mix phx.new helloworld
```

Select `Y` to install all dependencies.

This command will create a new Phoenix app named `helloworld` with some optional dependencies such as:

- [Ecto](https://hexdocs.pm/phoenix/ecto.html) for communicating with a database such as PostgreSQL, MySQL etc
- [Phoenix live view](https://hexdocs.pm/phoenix_live_view) for building realtime & interactive web apps.
- [Phoenix HTML and Tailwind CSS](https://hexdocs.pm/phoenix_html/Phoenix.HTML.html) for HTML apps.

### Configure Database 

Next, navigate into the `helloworld` directory using the `cd` command.

Open up the `config/dev.exs` file. You'll notice that a new Phoenix app is already set up with PostgreSQL settings. It assumes the database has a `postgres` user with the right permissions and a default password of `postgres`. Update the username and password to match your local PostgreSQL account credentials.

**Note**: If you prefer using a different database, like MySQL, you can easily switch the database adapter in the `mix.exs` file. Simply remove the `Postgrex` dependency and add `MyXQL` instead. For detailed instructions, check out this [guide on using other databases](https://hexdocs.pm/phoenix/ecto.html#using-other-databases) in Phoenix.

The default database name is set to `helloworld_dev`, but feel free to change it to whatever you'd prefer.

Next, create the database for our app by running the following command:

```bash
mix ecto.create
```

A database will be created for our app.

### Run the Phoenix App locally

Start the app by running the following command:

```bash
mix phx.server
```

By default, Phoenix accepts requests on port `4000`.

Open your browser and go to `http://localhost:4000` to see your app.

Now that your app is running locally, let’s move on to deploying it to Railway!

### Prepare our Phoenix App for deployment

Go ahead and create a `nixpacks.toml` file in the root directory of our Phoenix app. 

The [nixpacks.toml file](https://nixpacks.com/docs/configuration/file) is a configuration file used by Nixpacks, a build system developed and used by Railway, to set up and deploy applications. 

In this file, you can specify the instructions for various build and deployment phases, along with environment variables and package dependencies.

Add the following content to the file:

```toml
# nixpacks.toml
[variables]
MIX_ENV = 'prod'

[phases.setup]
nixPkgs = ['...', 'erlang']

[phases.install]
cmds = [
  'mix local.hex --force',
  'mix local.rebar --force',
  'mix deps.get --only prod'
]

[phases.build]
cmds = [
  'mix compile',
  'mix assets.deploy'
]

[start]
cmd = "mix ecto.setup && mix phx.server"
```

1. `[variables]` This section contains the list of env variables you want to set for the app.
    - `MIX_ENV = 'prod'`: It sets the Elixir environment to prod. 
2. `[phases.setup]`: This defines a list of Nix packages to be installed during the setup phase. The placeholder `'...'` should be replaced with any additional packages needed for your application. The inclusion of erlang indicates that the Erlang runtime is required for the Elixir application.
3. `[phases.install]`: This section contains a list of commands to run during the installation phase. 
    - `mix local.hex --force`: Installs the Hex package manager for Elixir, which is necessary for managing dependencies.
    - `mix local.rebar --force`: Installs Rebar, a build tool for Erlang.
    - `mix deps.get --only prod`: Fetches only the production dependencies defined in the `mix.exs` file.
4. `[phases.build]`: This section contains commands to run during the build phase.
    - `mix compile`: Compiles the Elixir application.
    - `mix assets.deploy`: This is a command to handle the deployment of static assets (e.g., JavaScript, CSS) for our app.
5. `[start]`: This section contains commands to run when starting the application.
    - `mix ecto.setup`: This command is used to set up the database by running migrations and seeding it. It prepares the database for the application to connect.
    - `mix phx.server`: This starts the Phoenix server, allowing the application to begin accepting requests.

Now, we are ready to deploy!

## Deploy Phoenix App to Railway

Railway offers multiple ways to deploy your Phoenix app, depending on your setup and preference. Choose any of the following methods:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [Using the CLI](#deploy-from-the-cli).
3. [From a GitHub repository](#deploy-from-a-github-repo).

## One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. It sets up a Phoenix app along with a Postgres database.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/0LSBzw)

After deploying, we recommend that you [eject from the template](/guides/deploy#eject-from-template-repository) to create a copy of the repository under your own GitHub account. This will give you full control over the source code and project.

## Deploy from the CLI

To deploy the Phoenix app using the Railway CLI, please follow the steps:

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Phoenix app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.

    **Note:** You might encounter an error––`warning: the VM is running with native name encoding of latin1 which` `may cause Elixir to malfunction as it expects utf8....`. Don’t worry, we’ll address this in the next step.
4. **Add a Database Service**:
    - Run `railway add`.
    - Select `PostgreSQL` by pressing space and hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
5. **Configure Environment Variables**:
    - Go to your app service <a href="/overview/the-basics#service-variables">**Variables**</a> section and add the following:
        - `SECRET_KEY_BASE` : Set the value to the your app's secret key. You can run `mix phx.gen.secret` locally to generate one.
        - `LANG`and `LC_CTYPE`: Set both values to `en_US.UTF-8`. This sets your app's locale and gets rid of the _native name encoding of latin1_ warning.
        - `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).  
        - `ECTO_IPV6`: Set the value to `true` to enable your Phoenix app to connect to the database through the [IPv6 private network](/guides/private-networking#listen-on-ipv6). 
    - Use the **Raw Editor** to add any other required environment variables in one go.
6. **Redeploy the Service**:
    - Click **Deploy** on the Railway Project Canvas to apply your changes.
7. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.
8. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1730139857/docs/quick-start/phoenix_elixir_app.png"
alt="screenshot of the deployed Phoenix service showing the welcome page"
layout="responsive"
width={2757} height={2111} quality={100} />

## Deploy from a GitHub Repo

To deploy the Phoenix app to Railway, start by pushing the app to a GitHub repo. Once that’s set up, follow the steps below to complete the deployment process.

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        - `SECRET_KEY_BASE` : Set the value to the your app's secret key. You can run `mix phx.gen.secret` locally to generate one.
        - `LANG`and `LC_CTYPE`: Set both values to `en_US.UTF-8` to ensure proper locale settings and avoid the _native name encoding of latin1 warning_. 
        -  `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
        - `ECTO_IPV6`: Set the value to `true` to enable your Phoenix app to connect to the database through the [IPv6 private network](/guides/private-networking#listen-on-ipv6).
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s an Elixir app](https://nixpacks.com/docs/providers/elixir).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Phoenix apps effortlessly!

## Want to Deploy Livebook?

[Livebook](https://livebook.dev), an interactive notebook tool built specifically for Elixir, provides a powerful and intuitive environment for exploring data, running code, and documenting insights, all in one place. It’s perfect for experimenting with Elixir code, prototyping, and sharing live documentation.

Click the button below to deploy an instance of Livebook quickly.

[![Deploy Livebook on Railway](https://railway.com/button.svg)](https://railway.com/new/template/4uLt1s)
 
## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Deploy Phoenix with Distillery](/guides/phoenix-distillery)
- [Monitoring](/guides/monitoring)
- [Deployments](/guides/deployments)


================================================
FILE: src/docs/guides/play.md
================================================
---
title: Deploy a Scala Play App
description: Learn how to deploy a Scala Play app to Railway with this step-by-step guide. It covers quick setup, database integration, one-click deploys and other deployment strategies.
---

[Play](https://www.playframework.com) is a high velocity and productive web framework for Java and Scala. It is based on a lightweight, stateless, web-friendly architecture and features predictable and minimal resource consumption (CPU, memory, threads) for highly-scalable applications thanks to its reactive model, based on Pekko Streams.

This guide covers how to deploy a Scala Play app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Play app!

## Create a Play App

**Note:** If you already have a Play app locally or on GitHub, you can skip this step and go straight to the [Deploy Play App to Railway](#deploy-the-play-app-to-railway).

To create a new Scala Play app, ensure that you have [JDK](https://www.oracle.com/java/technologies/downloads/) and [sbt](https://www.scala-sbt.org/download/) installed on your machine.

Run the following command in your terminal to create a new Play app:

```bash
sbt new
```

A list of templates will be shown to select from. Select the `playframework/play-scala-seed.g8` template.

- Give it a name, `helloworld`.
- Give it an organization name, `com.railwayguide`
- Hit Enter for the rest to use the latest versions of play, scala and sbt scaffold.

A new Scala Play app will be provisioned in the `helloworld` directory.

### Modify Scala Play Views and Set Up Database Config

*Step 1* : Modify the Index File

Open the project in your editor. Head over to the `app/views/index.scala.html` file.

Modify it to the following:

```scala
@()

@main("Welcome to Play") {
  <h1>Welcome to Play!</h1>
  <h1>Hello World, Railway!</h1>
}
```

This change adds a new heading, which you'll see when you run the app locally.

*Step 2* : Run the App Locally
- Now, let’s run the app locally to verify our changes. You should see the new headers appear in the browser.

*Step 3* : Add PostgreSQL Driver as a Dependency

Play doesn’t provide built-in database drivers, so we need to add the PostgreSQL JDBC driver manually to our project.

In your `build.sbt`, add the following dependency:

```scala
libraryDependencies += "org.postgresql" % "postgresql" % "42.7.4" // Always use the latest stable version
```

*Step 4* : Configure PostgreSQL in application.conf

Next, configure the PostgreSQL database connection in `conf/application.conf`:

```scala
# Default database configuration using PostgreSQL
db.default.driver = org.postgresql.Driver
db.default.url = "jdbc:postgresql://username:password@127.0.0.1:5432/scala_play"  # Replace with correct credentials
```

Make sure to replace `username` and `password` with your PostgreSQL credentials.

*Step 5* : Update Project Dependencies

To download the PostgreSQL driver and any updated dependencies, run the following:

```bash
sbt update
```

*Step 6* : Add Database Migration Tool (Flyway)

Play doesn’t include built-in support for database migrations, so we’ll use Flyway.

1. Install Flyway Plugin: Open your `project/plugin.sbt` and add the Flyway plugin:

```scala
addSbtPlugin("io.github.davidmweber" % "flyway-sbt" % "7.4.0")
```

2. Configure Flyway in `build.sbt`: Enable Flyway and configure the database connection in your `build.sbt`:

```scala
name := """helloworld"""
organization := "com.railwayguide"
version := "1.0-SNAPSHOT"
executableScriptName := "main"

lazy val root = (project in file(".")).enablePlugins(PlayScala).enablePlugins(FlywayPlugin)

scalaVersion := "2.13.15"

libraryDependencies += guice
libraryDependencies += "org.scalatestplus.play" %% "scalatestplus-play" % "7.0.1" % Test
libraryDependencies += "org.postgresql" % "postgresql" % "42.7.4" // Latest version

flywayUrl := "jdbc:postgresql://127.0.0.1:5432/scala_play?user=<username>"  # Replace with correct credentials
flywayLocations := Seq("filesystem:src/main/resources/db/migration")
```

Replace `username` with your database username.

*Step 7* : Create the Migration Files

1. **Create Migration Folder**: Create the folder structure for your migration files:
```bash
src/main/resources/db/migration
```
2. **Create Migration SQL File**: In `src/main/resources/db/migration`, create a schema migration file called `V1_0__create_employees_table.sql` with the following content:

```sql
CREATE TABLE employee (
  id VARCHAR(20) PRIMARY KEY,
  first_name VARCHAR(30),
  last_name VARCHAR(30),
  email VARCHAR(30),
  admin BOOLEAN
);
```

*Step 8* : Run Database Migrations

Once your migration file is in place, run the Flyway migration with the following command:

```bash
sbt flywayMigrate
```

This will apply the migration and create the employee table in your PostgreSQL database.

Check your database to confirm that the employee table has been successfully created. You can use a database tool like psql or any PostgreSQL client to view the table.


### Run the Play App locally

Next, run `sbt run` in the terminal to build the project, install all the dependencies and start the embedded [Pekko](https://pekko.apache.org) HTTP server.

Open your browser and go to `http://localhost:9000` to see the app.

### Prepare Scala Play App for deployment

1. **Set Application Secret**:
    - Open up the `application.conf` file and add the following to it to set the app's secret.
        ```scala
        play.http.secret.key=${?APPLICATION_SECRET}
        ```
2. **Set Database URL**:
    - Open up the `application.conf` file and add the following to it to ensure the `DATABASE_URL` is read from the environment variable.
        ```scala
        db.default.url="jdbc:${?DATABASE_URL}"
        ```
3. **Set Allowed Hosts**:
    - By default, Play ships with a list of [default Allowed Hosts filter](https://www.playframework.com/documentation/3.0.x/resources/confs/play-filters-helpers/reference.conf). This is the list of allowed valid hosts = ["localhost", ".local", "127.0.0.1"]. You need to add an option to allow Railway hosts, `[".up.railway.app"]`.
    - Add the following to the `application.conf` file:
        ```scala
        play.filters.hosts.allowed=[".up.railway.app"]
        ```
    **Note:** Railway provided domains end in `.up.railway.app`. Once you add your custom domain, please update the allowed hosts to the new URL.
4. **Add sbt-native-packager sbt plugin**:
    - Add the `sbt-native-packager` sbt plugin to `project/plugins.sbt`
        ```scala
        addSbtPlugin("com.github.sbt" % "sbt-native-packager" % "x.x.x")
        ```
    - Enable the `JavaAppPackaging` plugin in `build.sbt` and set the `executableScriptName` to `main`. Your `build.sbt` should be looking like this now:
        ```scala
        name := """helloworld"""
        organization := "com.railwayguide"

        version := "1.0-SNAPSHOT"

        executableScriptName := "main"

        lazy val root = (project in file(".")).enablePlugins(PlayScala).enablePlugins(JavaAppPackaging).enablePlugins(FlywayPlugin)

        scalaVersion := "2.13.15"

        libraryDependencies += guice
        libraryDependencies += "org.scalatestplus.play" %% "scalatestplus-play" % "7.0.1" % Test
        libraryDependencies += "org.postgresql" % "postgresql" % "42.7.4" // Always use the latest stable version

        flywayUrl := sys.env.getOrElse("DATABASE_URL", "jdbc:postgresql://127.0.0.1:5432/scala_play?user=username")

        flywayLocations := Seq("filesystem:src/main/resources/db/migration")
        ```
    - Run `sbt update` to install the `sbt-native-packager` and update the dependencies.


Now, we are ready to deploy to Railway!

## Deploy the Play App to Railway

Railway offers multiple ways to deploy your Scala app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/my9q_q)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=scala" target="_blank">variety of Scala app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Luminus app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Add a Postgres Database Service**:
    - Run `railway add -d postgres`.
    - Hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
4. **Add a Service and Environment Variable**:
	- Run `railway add`.
	- Select `Empty Service` from the list of options.
	- In the `Enter a service name` prompt, enter `app-service`.
    - In the `Enter a variable` prompt, enter `APPLICATION_SECRET=<generated-app-secret>` where `<generated-app-secret>` is the secret generated from running `playGenerateSecret` in your terminal. 
	- In the `Enter a variable` prompt, enter `DATABASE_URL=${{Postgres.DATABASE_URL}}`. 
		- The value, `${{Postgres.DATABASE_URL}}`, references the URL of your new Postgres database. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
	
	**Note:** Explore the [Railway CLI reference](/reference/cli-api#add) for a variety of options.
3. **Deploy the Application**:
    - Run `railway up` to deploy your app.
		- This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment is complete, we can proceed to generate a domain for the app service.
7. **Set Up a Public URL**:
    - Run `railway domain` to generate a public URL for your app.
	- Visit the new URL to see your app live in action!

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731046089/docs/quick-start/scala_on_railway.png"
alt="screenshot of the deployed Scala service"
layout="responsive"
width={1676} height={1490} quality={100} />

### Deploy from a GitHub Repo

To deploy a Scala Play app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. 
		- This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        -  `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
        - `APPLICATION_SECRET`: Set the value to the generated app secret.
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Scala app](https://nixpacks.com/docs/providers/scala).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the Play app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Scala sbt official image
    # https://hub.docker.com/r/sbtscala/scala-sbt/tags
    FROM sbtscala/scala-sbt:eclipse-temurin-21.0.5_11_1.10.5_3.5.2

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN sbt stage

    # Run the app
    CMD ["./target/universal/stage/bin/main"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Scala apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/postgresql.md
================================================
---
title: PostgreSQL
description: Learn how to deploy a PostgreSQL database on Railway.
---

The Railway PostgreSQL database template allows you to provision and connect to a PostgreSQL database with zero configuration.

## Deploy

Add a PostgreSQL database to your project via the `ctrl / cmd + k` menu or by clicking the `+ New` button on the Project Canvas.

<Image src="https://res.cloudinary.com/railway/image/upload/v1695934218/docs/databases/addDB_qxyctn.gif"
alt="GIF of the Adding Database"
layout="responsive"
width={450} height={396} quality={100} />

You can also deploy it via the [template](https://railway.com/template/postgres) from the template marketplace.

#### Deployed Service

Upon deployment, you will have a PostgreSQL service running in your project, deployed from Railway's [SSL-enabled Postgres image](https://github.com/railwayapp-templates/postgres-ssl/pkgs/container/postgres-ssl), which uses the official [Postgres](https://hub.docker.com/_/postgres) image from Docker Hub as its base.

### Connect

Connect to the PostgreSQL server from another service in your project by [referencing the environment variables](/guides/variables#referencing-another-services-variable) made available in the PostgreSQL service:

- `PGHOST`
- `PGPORT`
- `PGUSER`
- `PGPASSWORD`
- `PGDATABASE`
- `DATABASE_URL`

_Note, Many libraries will automatically look for the `DATABASE_URL` variable and use
it to connect to PostgreSQL but you can use these variables in whatever way works for you._

#### Connecting Externally

It is possible to connect to PostgreSQL externally (from outside of the [project](/develop/projects) in which it is deployed), by using the [TCP Proxy](/deploy/exposing-your-app#tcp-proxying) which is enabled by default.

*Keep in mind that you will be billed for [Network Egress](/reference/pricing/plans#resource-usage-pricing) when using the TCP Proxy.*

### Modify the Deployment

Since the deployed container is based on an image built from the official [PostgreSQL](https://hub.docker.com/_/postgres) image in Docker hub, you can modify the deployment based on the [instructions in Docker hub](https://hub.docker.com/_/postgres#:~:text=How%20to%20extend%20this%20image).

We also encourage you to fork the [Railway postgres-ssl repository](https://github.com/railwayapp-templates/postgres-ssl) to customize it to your needs, or feel free to open a PR in the repo!

## Backups and Observability

Especially for production environments, performing regular backups and monitoring the health of your database is essential.  Consider adding:

- **Backups**: Automate regular backups to ensure data recovery in case of failure. We suggest checking out our native [Backups](/reference/backups) feature.

- **Observability**: Implement monitoring for insights into performance and health of your databases.  If you're not already running an observability stack, check out these templates to help you get started building one:
    - [Prometheus](https://railway.com/template/KmJatA)
    - [Grafana](https://railway.com/template/anURAt)
    - [PostgreSQL Exporter](https://railway.com/template/gDzHrM)

## Extensions

In an effort to maintain simplicity in the default templates, we do not plan to add extensions to the PostgreSQL templates covered in this guide.

For some of the most popular extensions, like PostGIS and Timescale, there are several options in the template marketplace.

- <a href="https://railway.com/template/VSbF5V" target="_blank">TimescaleDB</a>
- <a href="https://railway.com/template/postgis" target="_blank">PostGIS</a>
- <a href="https://railway.com/template/timescaledb-postgis" target="_blank">TimescaleDB + PostGIS</a>
- <a href="https://railway.com/template/3jJFCA" target="_blank">pgvector</a>

## Modifying The Postgres Configuration

You can modify the Postgres configuration by using the [`ALTER SYSTEM`](https://www.postgresql.org/docs/current/sql-altersystem.html) command.

```txt
ALTER SYSTEM SET shared_buffers = '2GB';
ALTER SYSTEM SET effective_cache_size = '6GB';
ALTER SYSTEM SET maintenance_work_mem = '512MB';
ALTER SYSTEM SET work_mem = '32MB';
ALTER SYSTEM SET max_worker_processes = '8';
ALTER SYSTEM SET max_parallel_workers_per_gather = '4';
ALTER SYSTEM SET max_parallel_workers = '8';

-- Reload the configuration to save the changes
SELECT pg_reload_conf();
```

After running the SQL, you will need to restart the deployment for the changes to take effect.

You can restart the deployment by clicking the `Restart` button in the deployment's 3-dot menu.

## Increasing the SHM Size

The SHM Size is the maximum amount of shared memory available to the container.

By default it is set to 64MB.

You would need to change the SHM Size if you are experiencing the following error -

```txt
ERROR: could not resize shared memory segment "PostgresSQL.1590182853" to 182853 bytes: no space left on device
```

You can modify the SHM Size by setting the `RAILWAY_SHM_SIZE_BYTES` variable in your service variables.

This variable is a number in bytes, so you would need to convert the size you want to use.

For example, to increase the SHM Size to 500MB, you would set the variable to `524288000`.

## Additional Resources

While these templates are available for your convenience, they are considered unmanaged, meaning you have total control over their configuration and maintenance.  

We *strongly encourage you* to refer to the source documentation to gain deeper understanding of their functionality and how to use them effectively.  Here are some links to help you get started:
- [PostgreSQL Documentation](https://www.postgresql.org/)
- [PostgreSQL High Availability Documentation](https://www.postgresql.org/docs/current/high-availability.html)
- [Repmgr Documentation](https://www.repmgr.org/docs/current/getting-started.html)
- [Pgpool-II Documentation](https://www.pgpool.net/docs/latest/en/html/)


================================================
FILE: src/docs/guides/pre-deploy-command.md
================================================
---
title: Add a Pre-Deploy Command
description: Learn how to execute commands between building and deploying your application.
---

Pre-deploy commands execute between building and deploying your application, handling tasks like database migrations or data seeding before your application runs.
They execute within your private network and have access to your application's environment variables.

If your command fails, it will not be retried and the deployment will not proceed.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736533539/docs/pre-deploy-command_sp1zqh.png"
alt="Screenshot of pre-deploy command configuration"
layout="intrinsic"
width={1494} height={644} quality={80} />

For pre-deploy commands to work correctly, ensure that:

- It exits with a status code of `0` to indicate success or non-zero to indicate failure.
- It runs in a reasonable amount of time. It will occupy a slot in your build queue.
- It does not rely on the application running.
- It has the dependencies it needs to run installed in the application image.
- It does not attempt to read or write data to the volume or filesystem, that should instead be done as part of the start command.

<Banner variant="warning">Pre-deploy commands execute in a separate container from your application. Changes to the filesystem are not persisted and [volumes](/reference/volumes) are not mounted.</Banner>



================================================
FILE: src/docs/guides/private-networking.md
================================================
---
title: Private Networking
description: Learn everything about private networking on Railway.
---

Private Networking is a feature within Railway that allows you to have a private network between your services, helpful for situations where you want to have a public gateway for your API but leave internal communication private.

<Image src="https://res.cloudinary.com/railway/image/upload/v1686946888/docs/CleanShot_2023-06-16_at_16.21.08_2x_lgp9ne.png"
alt="Preview of What The Guide is Building"
layout="intrinsic"
width={1310} height={420} quality={100} />

By default, all projects have private networking enabled and services will get a new DNS name under the `railway.internal` domain. This DNS name will resolve to the internal IPv6 address of the services within a project.

## Communicating Over the Private Network

To communicate over the private network, there are some specific things to know to be successful.

### Listen on IPv6

Since the private network is an IPv6 only network, applications that will receive requests over the private network must be configured to listen on IPv6. On most web frameworks, you can do this by binding to the host `::`.

Some examples are below -

#### Node / Express

Listen on `::` to bind to both IPv4 and IPv6.

```javascript
const port = process.env.PORT || 3000;

app.listen(port, '::', () => {
    console.log(`Server listening on [::]${port}`);
});
```

#### Node / Nest

Listen on `::` to bind to both IPv4 and IPv6.

```javascript
const port = process.env.PORT || 3000;

async function bootstrap() {
  await app.listen(port, '::');
}
```

#### Node / Next

Update your start command to bind to both IPv4 and IPv6.

```bash
next start --hostname :: --port ${PORT-3000}
```

Or if you are using a custom server, set `hostname` to `::` in the configuration object passed to the `next()` function.

```javascript
const port = process.env.PORT || 3000;

const app = next({
  // ...
  hostname: '::',
  port: port
});
```

If neither of these options are viable, you can set a `HOSTNAME` [service variable](/guides/variables#service-variables) with the value `::` to listen on both IPv4 and IPv6.

#### Python / Gunicorn

Update your start command to bind to both IPv4 and IPv6.

```bash
gunicorn app:app --bind [::]:${PORT-3000}
```

#### Python / Hypercorn

Update your start command to bind to both IPv4 and IPv6.

```bash
hypercorn app:app --bind [::]:${PORT-3000}
```

#### Python / Uvicorn

Update your start command to bind to IPv6.

```bash
uvicorn app:app --host :: --port ${PORT-3000}
```

**Note:** If your application needs to be accessible over both private and public networks, your application server must support dual stack binding. Most servers handle this automatically when listening on `::`, but some, like Uvicorn, do not.

### Use Internal Hostname and Port

For applications making requests to a service over the private network, you should use the internal DNS name of the service, plus the `PORT` on which the service is listening.

For example, if you have a service called `api` listening on port 3000, and you want to communicate with it from another service, you would use `api.railway.internal` as the hostname and specify the port -

```javascript
app.get('/fetch-secret', async (req, res) => {
    axios.get('http://api.railway.internal:3000/secret')
    .then(response => {
        res.json(response.data);
    })
})
```

Note that you should use `http` in the address.

#### Using Reference Variables

Using [reference variables](/guides/variables), you can accomplish the same end as the above example.

Let's say you are setting up your frontend service to talk to the `api` service.  In the frontend service, set the following variable -
```
BACKEND_URL=http://${{api.RAILWAY_PRIVATE_DOMAIN}}:${{api.PORT}}
```
<div style={{ marginTop: '1.5em' }}><Banner variant="info">
`api.PORT` above refers to a service variable that must be set manually. It does not automatically resolve to the port the service is listening on, nor does it resolve to the `PORT` environment variable injected into the service at runtime.
</Banner></div>

Then in the frontend code, you will simply reference the `BACKEND_URL` environment variable - 

```javascript
app.get('/fetch-secret', async (req, res) => {
    axios.get(`${process.env.BACKEND_URL}/secret`)
    .then(response => {
        res.json(response.data);
    })
})
```

### Private Network Context

The private network exists in the context of a project and environment and is not accessible over the public internet.  In other words -

- A web application that makes client-side requests **cannot** communicate to another service over the private network.
- Services in one project/environment **cannot** communicate with services in another project/environment over the private network.

Check out the [FAQ](#faq) section for more information.

### Known Configuration Requirements for IPv6

Some libraries and components require you to be explicit when either listening or establishing a connection over IPv6.

<Collapse title="ioredis">

`ioredis` is a Redis client for node.js, commonly used for connecting to Redis from a node application.

When initializing a Redis client using `ioredis`, you must specify `family=0` in the connection string to support connecting to both IPv6 and IPv4 endpoints:

```javascript
import Redis from 'ioredis';

const redis = new Redis(process.env.REDIS_URL + '?family=0');

const ping = await redis.ping();
```

<a href="https://www.npmjs.com/package/ioredis" target="_blank">ioredis docs</a>

</Collapse>

<Collapse title="bullmq">

`bullmq` is a message queue and batch processing library for node.js, commonly used for processing jobs in a queue.

When initializing a bullmq client, you must specify `family: 0` in the connection object to support connecting to both IPv6 and IPv4 Redis endpoints:

```javascript
import { Queue } from "bullmq";

const redisURL = new URL(process.env.REDIS_URL);

const queue = new Queue("Queue", {
    connection: {
        family: 0,
        host: redisURL.hostname,
        port: redisURL.port,
        username: redisURL.username,
        password: redisURL.password
    }
});

const jobs = await queue.getJobs();

console.log(jobs);
```

<a href="https://docs.bullmq.io/" target="_blank">bullmq docs</a>

</Collapse>

<Collapse title="Mongo Docker image">

If you are creating a service using the official Mongo Docker image in Docker Hub and would like to connect to it over the private network, you must start the container with some options to instruct the Mongo instance to listen on IPv6. For example, this would be set in your [Start Command](/guides/start-command):

```bash
docker-entrypoint.sh mongod --ipv6 --bind_ip ::,0.0.0.0
```

**Note that the official template provided by Railway is already deployed with this Start Command.**

</Collapse>

<Collapse title="hot-shots">

`hot-shots` is a StatsD client for node.js, which can be used to ship metrics to a DataDog agent for example.  When initializing a StatsD client using `hot-shots`, you must specify that it should connect over IPv6:

```javascript
const StatsD = require('hot-shots');

const statsdClient = new StatsD({
  host: process.env.AGENT_HOST,
  port: process.env.AGENT_PORT,
  protocol: 'udp',
  cacheDns: true,
  udpSocketOptions: {
    type: 'udp6',
    reuseAddr: true,
    ipv6Only: true,
  },
});
```

<a href="https://www.npmjs.com/package/hot-shots" target="_blank">hot-shots docs</a>

</Collapse>

<Collapse title="Go Fiber">

`fiber` is a web framework for Go.  When configuring your Fiber app, you should set the Network field to `tcp` to have it listen on IPv6 as well as IPv4:

```go
app := fiber.New(fiber.Config{
    Network:       "tcp",
    ServerHeader:  "Fiber",
    AppName: "Test App v1.0.1",
})
```

<a href="https://docs.gofiber.io/api/fiber#:~:text=json.Marshal-,Network,-string" target="_blank">Fiber docs</a>

</Collapse>

## Changing the Service Name for DNS

Within the service settings you can change the service name to which you refer, e.g. `api-1.railway.internal` -> `api-2.railway.internal`

The root of the domain, `railway.internal`, is static and **cannot** be changed.

## Caveats

During the feature development process we found a few caveats that you should be aware of:

- Private networking is not available during the build phase.
- You will need to bind to a IPv6 port to receive traffic on the private network.
- We don't support IPv4 private networking

## FAQ

<Collapse title="What is a client side app, a server side app, and what kind of app am I running?">

In the context of private networking, the key distinction between client- and server-side is from where requests are being made.
- In client-side applications, requests to other resources (like other Railway services) are made from a browser, which exists on the public network and outside the private network.
- In server-side applications, requests to other resources are made from the server hosting the application, which would exist within the private network (assuming the server hosting the app is in Railway).

One way to determine whether your application is making client- or server-side requests is by inspecting the request in the Network tab of DevTools.  If the RequestURL is the resource to which the request is being made, e.g. a backend server, this is a good indication that the browser itself is making the request (client-side).

</Collapse>

<Collapse title="What if I am making a request server-side, but from Vercel?">

Since an application hosted on Vercel exists outside of the private network in Railway, requests coming from Vercel servers cannot be made over the private network.

</Collapse>



================================================
FILE: src/docs/guides/projects.md
================================================
---
title: Managing Projects
description: A guide to managing projects on Railway.
---

A Railway project contains any services, environments, and deployments that an app needs. Projects can be found on <a href="https://railway.com/dashboard" target="_blank">your project dashboard</a>.

Click on a project card to go to the project canvas:

<Image src="https://res.cloudinary.com/railway/image/upload/v1644620884/docs/ProjectPage_new_pa52tp.png"
alt="Screenshot of Project Canvas"
layout="responsive"
width={1377} height={823} quality={100} />

Project settings can be managed through the `Settings` button at the top right of the project canvas.

## Managing Project Info

A project's name and description can be changed from the General tab within a project's settings.

The project id can also be retrieved here.


## Deleting a Project

A project can be deleted by selecting the `Delete Project` button in the Danger tab. Deleting a project will delete all services, environments, and deployments associated with the project.

Specific services within a project can also be deleted from this page.

## Inviting Members

Invite members to access a project through the Members tab in your Project Settings.

You can invite a member by sending an invitation to their email address, or by generating an invite link to send to them directly.

Click [here](/reference/project-members#scope-of-permissions) to view the scope definitions for permissions.


### Invite by Email

Invite a new member via email by specifying their email address and scope of permissions, then click `Invite`.

This will send an email to the address specified containing a link to join your project.


### Invite by Link

Each project generates a project invite link. To invite someone via a link:

1. Select the desired invited member scope
2. Copy link and send to the invitee


## Transferring Projects

Depending on your plan, you can transfer Projects to other users or Teams.

#### Hobby User to Hobby User

To transfer a project from one Hobby User to another Hobby User, you must first [add the user as a member](#inviting-members) in the project.

You can then transfer the project to the new member by selecting the three dots next to the user and choosing `Transfer Ownership`.

<Image src="https://res.cloudinary.com/railway/image/upload/v1631917785/docs/project-transfer_iz4myn.png"
alt="Screenshot of Project Transfer Menu"
layout="intrinsic"
width={411} height={253} quality={80} />

The transferee receives an email requesting to transfer the project.

#### Hobby User to Team || Team to Team

You can transfer a Project in your Hobby workspace to a Team (or between Teams) in which you are an Admin.  Inside your project, visit the `Settings` page and click the `Transfer Project` button to view the project transfer modal.

<Image src="https://res.cloudinary.com/railway/image/upload/v1692378671/project-transfer_iukfwb.png" alt="Project Transfer" layout="responsive" height={968} width={1240} />

Note: If you do not see the Transfer Project section in your Project Settings, you may not be an Admin of the Team to which you wish to transfer the Project.  See the [reference page for Teams](/reference/teams#inviting-members) for more information on team member permissions.

## Viewing Recent Activity

The activity feed shows all the changes that have been made to a project. This includes changes to services and volumes. You can click on a change to see everything that was committed.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743121231/docs/recent-activity_g2hupm.png"
            alt="Commit activity feed"
            layout="responsive"
            width={1273} height={631} quality={100} />

## Updating Project Visibility

Projects are private by default and only accessible to members of the project.  However, you can make your projects public to share in a read-only state by changing the visibility in project settings - 

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743121306/docs/project-visiblity_ksafj3.png"
alt="Screenshot of Project Visibility Setting"
layout="intrinsic"
width={1273} height={451} quality={80} />



================================================
FILE: src/docs/guides/public-api.md
================================================
---
title: Use the Public API
description: Discover the Railway GraphQL Public API.
---

The Railway public API is built with GraphQL and is the same API that powers the Railway dashboard.

Use the Public API to integrate Railway into your CI/CD pipelines and other workflows.

## Understanding GraphQL

If you haven't used GraphQL before, here are a few resources to get started:

1. The official [Introduction to GraphQL](https://graphql.org/learn/)
2. The [GraphQL Basics](https://hasura.io/learn/graphql/intro-graphql/introduction/) course by Hasura
3. [GraphQL is the better REST](https://www.howtographql.com/basics/1-graphql-is-the-better-rest/) to understand how it is different from a REST API


## Connecting to the Public API

To connect to and query the Public API, you will need the endpoint URL and a token for authentication.

### Endpoint

The public API is accessible at the following endpoint:

```bash
https://backboard.railway.com/graphql/v2
```

### Creating a Token

To use the API, you will need an API token. There are three types of tokens you can create.

#### Team Tokens and Account Tokens

You can create an API token from the [tokens page](https://railway.com/account/tokens) in your account settings.

<Image src="https://res.cloudinary.com/railway/image/upload/v1667386744/docs/new-token-form_rhrbw8.png"
alt="New token form"
layout="responsive"
width={1618 } height={378} quality={80} />

- **Team token** - Select a team in the `Team` dropdown to create a token tied to a team. A team token has access to all the team's resources, and cannot be used to access your personal resources on Railway. Feel free to share this token with your teammates.
- **Account token** - If you do not select a team, the token will be tied to your Railway account and will have access to all your resources including the teams you are a part of. Do not share this token with anyone else.

*Note that Teams are a Pro feature.*

#### Project Token

You can create a project token from the tokens page in your project settings.

Project tokens are scoped to a specific environment within a project and can only be used to authenticate requests to that environment.

### Execute a Test Query

Once you have your token, you can pass it within the Authorization header of your request.

#### Using an Account Token

You can try the query below in the terminal of your choice. It should return your name and email on Railway:

```bash
curl --request POST \
  --url https://backboard.railway.com/graphql/v2 \
  --header 'Authorization: Bearer <API_TOKEN_GOES_HERE>' \
  --header 'Content-Type: application/json' \
  --data '{"query":"query { me { name email } }"}'
```

**Note:** This query **cannot** be used with a team or project token because the data returned is scoped to your personal account.

#### Using a Team Token

If you have a team token, you can use it to authenticate requests to a specific team. The query below should return the team name and ID:

```bash
curl --request POST \
  --url https://backboard.railway.com/graphql/v2 \
  --header 'Team-Access-Token: <TEAM_TOKEN_GOES_HERE>' \
  --header 'Content-Type: application/json' \
  --data '{"query":"query { team(id: \"<TEAM_ID_GOES_HERE>\") { name id } }"}'
```

**Note:** This query **can** also be used with an account token as long as you are a member of the team.

#### Using a Project Token

If you have a project token, you can use it to authenticate requests to a specific environment within a project.  The query below should return the project and environment IDs:

```bash
curl --request POST \
  --url https://backboard.railway.com/graphql/v2 \
  --header 'Project-Access-Token: <PROJECT_TOKEN_GOES_HERE>' \
  --header 'Content-Type: application/json' \
  --data '{"query":"query { projectToken { projectId environmentId } }"}'
```

## Viewing the Schema

Use popular tools like [Postman](https://www.postman.com/) or [Insomnia](https://insomnia.rest/) to connect to the API and query the schema.  Simply set up your connection with the endpoint and Authorization token, and fetch the schema.

### API Collection File

We also provide a collection file which can be imported into your preferred API client.  Click [here](https://gql-collection-server.up.railway.app/railway_graphql_collection.json) to download it.

Once imported, you should only need to add your API token to get connected and start executing queries in the collection.

### GraphiQL Playground

Alternatively, you can use our [GraphiQL playground](https://railway.com/graphiql) to view the schema and test your queries.

<Image src="https://res.cloudinary.com/railway/image/upload/v1694611003/rw-graphiql_zs2l28.png" alt="GraphiQL Playground" layout="responsive" width={6568} height={3886} quality={80} />

Make sure to set an Authorization header with an [auth token](/reference/public-api#authentication). Click the "Headers" tab at the bottom of the GraphiQL page and enter this json, using your own token:

```json
{"Authorization": "Bearer <API_TOKEN_GOES_HERE>"}
```

## Tips and Tricks

### Resource IDs

While building your queries, if you quickly need to copy resource IDs, you can hit `Cmd/Ctrl + K` within your project and copy the project/service/environment ID.

<Image src="https://res.cloudinary.com/railway/image/upload/v1694616111/rw-cmd-palette_s5yilj.png" alt="Railway Command Palette" height={678} width={1176} quality={80} />

### The Network Tab

If you're unsure about what query/mutation to use for what you are trying to achieve, you can always do the action in the dashboard and look for the request in the network tab. As we use the same API internally, you can simply grab the name and then look for specific query in the introspected schema.

### External Resources

1. The [awesome-graphql](https://github.com/chentsulin/awesome-graphql) repository is a great resource for all things GraphQL with implementations available across a variety of languages.
2. The [GraphQL Discord](https://discord.graphql.org/) is the official Discord channel for graphql.org with a lot of active members and specific help channels.

## Examples

To help you get started, we have provided some example queries in the guides within this section - 

- [Manage Projects](/guides/manage-projects)
- [Manage Services](/guides/manage-services)
- [Manage Deployments](/guides/manage-deployments)
- [Manage Variables](/guides/manage-variables)

## Support

If you run into problems using the API or have any suggestions, feel free to join our [Discord server](https://discord.gg/railway) where you can interact with the engineers working on the API directly.

### Rate Limits

Rate limits are enforced on the Public API.  For details on the limits visit the [Public API reference page](/reference/public-api#rate-limits).



================================================
FILE: src/docs/guides/public-networking.md
================================================
---
title: Public Networking
description: Learn everything about public networking on Railway.
---

Public Networking refers to exposing your application to the internet, to be accessible from the public network.

## Port Variable

An essential part of connecting to your service from the internet, is properly handling the `PORT` variable.

The easiest way to get up and running is by using the Railway-provided port.

### Railway-provided port

As long as you have not defined a `PORT` variable, Railway will provide and expose one for you.

To have your application use the Railway-provided port, you should ensure it is listening on `0.0.0.0:$PORT`, where `PORT` is the Railway-provided environment variable.

**Examples** -

```python
# python web server
if __name__ == '__main__':
    app.run(debug=True, port=os.getenv("PORT", default=5000))
```

```javascript
// node web server
const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`App listening on port: ${port}`);
});
```

More information and examples for this can be found in the [Fixing Common Errors guide](/guides/fixing-common-errors).

**Note:** If your application needs to be accessible over both public and private networks, your application server must support dual stack binding. Most servers handle this automatically when listening on `::`, but some, like Uvicorn, do not.

### User-defined port

If you prefer to explicitly set a port, you can set the `PORT` variable in your service variables to the port on which your service is listening.

If your domain does not have a [target port set](/guides/public-networking#target-ports), Railway will direct incoming traffic to the port specified in the `PORT` variable, this is sometimes needed when creating a template.

For information on how to configure variables, see the [Variables guide](/guides/variables).

## Railway-Provided Domain

Railway services don't obtain a domain automatically, but it is easy to set one up.

To assign a domain to your service, go to your service's settings, find the Networking -> Public Networking section, and choose `Generate Domain`.

#### Automated Prompt

If Railway detects that a deployed service is listening correctly (as described above), you will see a prompt on the service tile in the canvas, and within the service panel.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1654560212/docs/add-domain_prffyh.png"
alt="Screenshot of adding Service Domain"
layout="responsive"
width={1396} height={628} quality={80} />

Simply follow the prompts to generate a domain and your app will be exposed to the internet.

**Don't see the Generate Domain Button?**

If you have previously assigned a TCP Proxy to your service, you will not see the `Generate Domain` option.  You must remove the TCP Proxy (click the Trashcan icon), then you can add a domain.

## Custom Domains

Custom domains can be added to a Railway service and once setup we will automatically issue an SSL certificate for you.

1. Navigate to the [Settings tab](/overview/the-basics#service-settings) of your desired [service](/overview/the-basics#services).

2. Click `+ Custom Domain` in the Public Networking section of Settings

3. Type in the custom domain (wildcard domains are supported, [see below](#wildcard-domains) for more details)

    You will be provided with a CNAME domain to use, e.g., `g05ns7.up.railway.app`.

4. In your DNS provider (Cloudflare, DNSimple, Namecheap, etc), create a CNAME record with the CNAME value provided by Railway.

4. Wait for Railway to verify your domain.  When verified, you will see a greencheck mark next to the domain(s) -

    <Image
    src="https://res.cloudinary.com/railway/image/upload/v1654563209/docs/domains_uhchsu.png"
    alt="Screenshot of Custom Domain"
    layout="responsive"
    width={1338} height={808} quality={80} />

    You will also see a `Cloudflare proxy detected` message if we have detected that you are using Cloudflare.

    **Note:** Changes to DNS settings may take up to 72 hours to propagate worldwide.

**Important Considerations**
- Freenom domains are not allowed and not supported.
- The Trial Plan is limited to 1 custom domain. It is therefore not possible to use both `yourdomain.com` and `www.yourdomain.com` as these are considered two distinct custom domains.
- The [Hobby Plan](/reference/pricing#plans) is limited to 2 custom domains per service.
- The [Pro Plan]() is limited to 20 domains per service by default.  This limit can be increased for Pro users on request, simply reach out to us via a [private thread](/reference/support#private-threads).

## Wildcard Domains

Wildcard domains allow for flexible subdomain management. There are a few important things to know when using them -

- Ensure that the CNAME record for `authorize.railwaydns.net` is not proxied by your provider (eg: Cloudflare). This is required for the verification process to work.

- Wildcards cannot be nested (e.g., \*.\*.yourdomain.com).

- Wildcards can be used for any subdomain level (e.g., `*.example.com` or `*.subdomain.example.com`).

### Subdomains

E.g. `*.example.com`

- Make sure [Universal SSL is enabled](https://developers.cloudflare.com/ssl/edge-certificates/universal-ssl/enable-universal-ssl/).

- Enable [Full SSL/TLS encryption](https://developers.cloudflare.com/ssl/troubleshooting/too-many-redirects/#full-or-full-strict-encryption-mode).

- Add CNAME records for the wildcard subdomain.

### Nested Subdomains

E.g. `*.nested.example.com`

- [Disable Universal SSL](https://developers.cloudflare.com/ssl/edge-certificates/universal-ssl/disable-universal-ssl/).

- Purchase Cloudflare's [Advanced Certificate Manager](https://developers.cloudflare.com/ssl/edge-certificates/advanced-certificate-manager/).

- Enable [Edge Certificates](https://developers.cloudflare.com/ssl/edge-certificates/).

- Enable [Full SSL/TLS encryption](https://developers.cloudflare.com/ssl/troubleshooting/too-many-redirects/#full-or-full-strict-encryption-mode).

- Add CNAME records for the wildcard nested subdomain.

When you add a wildcard domain, you will be provided with two domains for which you should add two CNAME records -

<Image
src="https://res.cloudinary.com/railway/image/upload/v1679693511/wildcard_domains_zdguqs.png"
alt="Screenshot of Wildcard Domain"
layout="responsive"
width={1048} height={842} quality={80} />

One record is for the wildcard domain, and one for the \_acme-challenge. The \_acme-challenge CNAME is required for Railway to issue the SSL Certificate for your domain.

### Wildcard Domains on Cloudflare

If you have a wildcard domain on Cloudflare, you must:

- Turn off Cloudflare proxying is on the `_acme-challenge` record (disable the orange cloud)

- Enable Cloudflare's [Universal SSL](https://developers.cloudflare.com/ssl/edge-certificates/universal-ssl/enable-universal-ssl/)

## Target Ports

Target Ports, or Magic Ports, correlate a single domain to a specific internal port that the application listens on, enabling you to expose multiple HTTP ports through the use of multiple domains.

Example -

`https://example.com/` → `:8080`

`https://management.example.com/` → `:9000`

When you first generate a Railway-provided domain, if your application listens on a single port, Railway's magic automatically detects and sets it as the domain's target port. If your app listens on multiple ports, you're provided with a list to choose from.

When you add a custom domain, you're given a list of ports to choose from, and the selected port will handle all traffic routed to the domain. You can also specify a custom port if needed.

These target ports inform Railway which public domain corresponds to each internal port, ensuring that traffic from a specific domain is correctly routed to your application.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743196226/docs/custom-domain_ulvgap.png"
alt="Screenshot of target port selection on a custom domain"
layout="intrinsic"
width={1200} height={1035}
quality={100} />

You can change the automatically detected or manually set port at any time by clicking the edit icon next to the domain.

## Adding a Custom Domain

When adding a root or apex domain to your Railway service, you must ensure that you add the appropriate DNS record to the domain within your DNS provider.  At this time, Railway supports <a href="https://developers.cloudflare.com/dns/cname-flattening/" target="_blank">CNAME Flattening</a> and dynamic ALIAS records.

**Additional context**

Generally, direct CNAME records at the root or apex level are incompatible with DNS standards (which assert that you should use an "A" or "AAAA" record).  However, given the dynamic nature of the modern web and PaaS providers like Railway, some DNS providers have incorporated workarounds enabling CNAME-like records to be associated with root domains.
*Check out <a href="https://www.ietf.org/rfc/rfc1912.txt#:~:text=root%20zone%20data).-,2.4%20CNAME%20records,-A%20CNAME%20record" target="_blank">RFC 1912</a> if you're interested in digging into this topic.*

**Choosing the correct record type**

The type of record to create is entirely dependent on your DNS provider.  Here are some examples -

- <a href="https://developers.cloudflare.com/dns/zone-setups/partial-setup" target="_blank">Cloudflare CNAME</a> - Simply set up a CNAME record for your root domain in Cloudflare, and they take care of the rest under the hood.  Refer to <a href="https://support.cloudflare.com/hc/en-us/articles/205893698-Configure-Cloudflare-and-Heroku-over-HTTPS" target="_blank">this guide</a> for more detailed instructions.
- <a href="https://support.dnsimple.com/articles/domain-apex-heroku/" target="_blank">DNSimple ALIAS</a> - Set up an dynamic ALIAS in DNSimple for your root domain.
- <a href="https://www.namecheap.com/support/knowledgebase/article.aspx/9646/2237/how-to-create-a-cname-record-for-your-domain/" target="_blank">Namecheap CNAME</a> - Set up an CNAME in Namecheap for your root domain.
- <a href="https://bunny.net/blog/how-aname-dns-records-affect-cdn-routing/" target="_blank">bunny.net</a> - Set up a ANAME in bunny.net for your root domain.

In contrast there are many nameservers that don't support CNAME flattening or dynamic ALIAS records -

- <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register-other-dns-service.html" target="_blank">AWS Route 53</a>
- <a href="https://support.hostinger.com/en/articles/1696789-how-to-change-nameservers-at-hostinger" target="_blank">Hostinger</a>
- <a href="https://www.godaddy.com/en-ca/help/edit-my-domain-nameservers-664" target="_blank">GoDaddy</a>
- <a href="https://www.namesilo.com/support/v2/articles/domain-manager/dns-manager" target="_blank">NameSilo</a>
- <a href="https://dns.he.net/" target="_blank">Hurricane Electric</a>
- <a href="https://support.squarespace.com/hc/en-us/articles/4404183898125-Nameservers-and-DNSSEC-for-Squarespace-managed-domains#toc-open-the-domain-s-advanced-settings" target="_blank">SquareSpace</a>

**Workaround - Changing your Domain's Nameservers**

If your DNS provider doesn't support CNAME Flattening or dynamic ALIAS records at the root, you can also change your domain's nameservers to point to Cloudflare's nameservers. This will allow you to use a CNAME record for the root domain. Follow the instructions listed on Cloudflare's documentation to <a href="https://developers.cloudflare.com/dns/zone-setups/full-setup/setup/" target="_blank">change your nameservers</a>.

## Adding a Root Domain With www Subdomain to Cloudflare

If you want to add your root domain (e.g., `mydomain.com`) and the `www.` subdomain to Cloudflare and redirect all `www.` traffic to the root domain:

1. Create a Custom Domain in Railway for your root domain (e.g., `mydomain.com`). Copy the `value` field. This will be in the form: `abc123.up.railway.app`.
2. Add a `CNAME` DNS record to Cloudflare:
    - `Name` → `@`.
    - `Target` → the `value` field from Railway.
    - `Proxy status` → `on`, should display an orange cloud.
    - Note: Due to domain flattening, `Name` will automatically update to your root domain (e.g., `mydomain.com`).
3. Add another `CNAME` DNS record to Cloudflare:
    - `Name` → `www`.
    - `Target` → `@`
    - `Proxy status:` → on, should display an orange cloud.
    - Note: Cloudflare will automatically change the `Target` value to your root domain.
4. Enable Full SSL/TLS encryption in Cloudflare:
    - Go to your domain on Cloudflare.
    - Navigate to `SSL/TLS -> Overview`.
    - Select `Full`. **Not** `Full (Strict)` **Strict mode will not work as intended**.
5. Enable Universal SSL in Cloudflare:
    - Go to your domain on Cloudflare.
    - Navigate to `SSL/TLS -> Edge Certificates`.
    - Enable `Universal SSL`.
6. After doing this, you should see `Cloudflare proxy detected` on your Custom Domain in Railway with a green cloud.
7. Create a Bulk Redirect in Cloudflare:
    - Go to your [Cloudflare dashboard](https://dash.cloudflare.com/).
    - Navigate to `Bulk Redirects`.
    - Click `Create Bulk Redirect List`.
    - Give it a name, e.g., `www-redirect`.
    - Click `Or, manually add URL redirects`.
    - Add a `Source URL`: `https://www.mydomain.com`.
    - Add `Target URL`: `https://mydomain.com` with status `301`.
    - Tick all the parameter options: (`Preserve query string`, `Include subdomains`, `Subpath matching`, `Preserve path suffix`)
    - Click `Next`, then `Save and Deploy`.

**Note:** DNS changes may take some time to propagate. You may want to refresh your DNS cache by using commands like `ipconfig /flushdns` on Windows or `dscacheutil -flushcache` on macOS. Testing the URLs in an incognito window can also help verify changes.

## TCP Proxying

You can proxy TCP traffic to your service by creating a TCP proxy in the service settings. Enter the port that you want traffic proxied to, Railway will generate a domain and port for you to use. All traffic sent to `domain:port` will be proxied to your service. This is useful for services that don't support HTTP, such as databases.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743194081/docs/tcp-proxy_edctub.png"
alt="Screenshot of TCP proxy configuration"
layout="responsive"
width={1200} height={822} quality={100} />

Incoming traffic will be distributed across all replicas in the closest region using a random algorithm.

## Using HTTP and TCP Together

Railway does support exposing both HTTP and TCP over public networking, in a single service. Therefore, if you have a domain assigned, you will still see the option to enable TCP Proxy, and vice-versa.

If you have a usecase that requires exposing both HTTP and TCP over public networking, in one service, <a href="https://station.railway.com/feedback" target="_blank">let us know</a>!

## Let's Encrypt SSL Certificates

Once a custom domain has been correctly configured, Railway will automatically
generate and apply a Let's Encrypt certificate. This means that any custom
domain on Railway will automatically be accessible
via `https://`.

### External SSL Certificates

We currently do not support external SSL certificates since we provision one for you.

## Provider Specific Instructions

If you have proxying enabled on Cloudflare (the orange cloud), you MUST set your
SSL/TLS settings to **Full** -- Full (Strict) **will not work as intended**.

<Image src="https://res.cloudinary.com/railway/image/upload/v1631917785/docs/cloudflare_zgeycj.png"
alt="Screenshot of Custom Domain"
layout="responsive"
width={1205} height={901} quality={80} />

If proxying is not enabled, Cloudflare will not associate the domain with your Railway project.  In this case, you will encounter the following error message:

```
ERR_TOO_MANY_REDIRECTS
```

Also note that if proxying is enabled, you can NOT use a domain deeper than a first level subdomain without Cloudflare's Advanced Certificate Manager. For example, anything falling under \*.yourdomain.com can be proxied through Cloudflare without issue, however if you have a custom domain under \*.subdomain.yourdomain.com, you MUST disable Cloudflare Proxying and set the CNAME record to DNS Only (the grey cloud), unless you have Cloudflare's Advanced Certificate Manager.

## Support

Looking for the technical specs like timeouts, TLS information, rate limits etc? Check out the [Public Networking reference page](/reference/public-networking).

Having trouble connecting to your app from the internet? Check out the [Fixing Common Errors guide](/guides/fixing-common-errors) or reach out on our <a href="https://discord.gg/railway" target="_blank">Discord</a>.



================================================
FILE: src/docs/guides/publish-and-share.md
================================================
---
title: Publish and Share Templates
description: Learn how to publish and share your Railway templates.
---

Once you create a template, you have the option to publish it. Publishing a template will add it to our <a href="https://railway.com/templates" target="_blank">template marketplace</a> for other users to deploy.

## Publishing a Template

After you create your template, simply click the publish button and fill out the form to publish your template.

<Image src="https://res.cloudinary.com/railway/image/upload/v1680281251/CleanShot_2023-03-31_at_20.46.28_2x_tjjpna.png"
  alt="Template publishing form"
  layout="intrinsic"
  width={510}
  height={800}
  quality={80}
/>

You can always publish your template by going to the <a href="https://railway.com/workspace/templates" target="_blank">Templates page in your Workspace settings</a> and choose `Publish` next to the template you'd like to publish.

## Sharing your Templates

After you create your template, you may want to share your work with the public and let others clone your project. You are provided with the Template URL where your template can be found and deployed.

### Deploy on Railway Button 

To complement your template, we also provide a `Deploy on Railway` button which you can include in your README or embed it into a website.

<Image src="https://res.cloudinary.com/railway/image/upload/v1676438967/docs/deploy-on-railway-readme_iwcjjw.png" width={714} height={467} alt="Example README with Deploy on Railway button" />

![https://railway.com/button.svg](https://railway.com/button.svg)
The button is located at [https://railway.com/button.svg](https://railway.com/button.svg).

#### Markdown
To render the button in Markdown, copy the following code and replace the link with your desired template:
```md
[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/ZweBXA)
```

#### HTML
To render the button in HTML, copy the following code and replace the link with your desired template:
```html
<a href="https://railway.com/new/template/ZweBXA"><img src="https://railway.com/button.svg" alt="Deploy on Railway" /></a>
```

### Examples

Here are some example templates from the <a href="https://railway.com/templates" target="_blank">template marketplace</a> in button form:
|Icon|Template|Button|
|----|--------|------|
|<img src="https://devicons.railway.com/i/nodejs.svg" alt="Node" width="25" height="25" />|Node|[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/ZweBXA)|
|<img src="https://devicons.railway.com/i/deno.svg" alt="Deno" width="25" height="25" />|Deno|[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/LsaSsU)|
|<img src="https://devicons.railway.com/i/bun.svg" alt="Bun" width="25" height="25" />|Bun|[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/gxxk5g)|
|<img src="https://devicons.railway.com/i/go.svg" alt="Gin" width="25" height="25" />|Gin|[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/dTvvSf)|
|<img src="https://devicons.railway.com/i/flask-dark.svg" alt="Flask" width="25" height="25" />|Flask|[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/zUcpux)|


## Kickback program

If your published template is deployed into other users' projects, you are immediately eligible for a 50% kickback, in the form of Railway credits. Refer to the [template reference page](/reference/templates#kickback-program) for more information.


================================================
FILE: src/docs/guides/rails.md
================================================
---
title: Deploy a Ruby on Rails App
description: Learn how to deploy a Rails app to Railway with this step-by-step guide. It covers quick setup, database integration, cron and sidekiq setups, one-click deploys and other deployment strategies.
---

Rails is a Ruby full-stack framework designed to compress the complexity of modern web apps. It ships with all the tools needed to build amazing web apps on both the front and back end.

## Create a Rails App

**Note:** If you already have a Rails app locally or on GitHub, you can skip this step and go straight to the [Deploy Ruby on Rails App on Railway](#deploy-ruby-on-rails-app-on-railway).

To create a new Rails app, ensure that you have [Ruby](https://www.ruby-lang.org/en/documentation/installation) and [Rails](https://guides.rubyonrails.org/getting_started.html#creating-a-new-rails-project-installing-rails-installing-rails) installed on your machine. Once everything is set up, run the following command in your terminal:

```bash
rails new blog --database=postgresql
```

This command will create a new Rails app named `blog` with PostgreSQL as the database config. Now, let’s create a simple "Hello World" page to ensure everything is working correctly.

1. **Generate a Controller**: Run the following command to create a new controller named `HelloWorld` with an `index` action:
    ```bash
        rails g controller HelloWorld index
    ```

    This will generate the necessary files for the controller, along with a view, route, and test files.

2. **Update the Routes File**: Open the `config/routes.rb` file and modify it to set the root route to the `hello_world#index` action:

    ```ruby
    Rails.application.routes.draw do
        get "hello_world/index"
        # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html

        # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.
        # Can be used by load balancers and uptime monitors to verify that the app is live.
        get "up" => "rails/health#show", as: :rails_health_check

        # Render dynamic PWA files from app/views/pwa/*
        get "service-worker" => "rails/pwa#service_worker", as: :pwa_service_worker
        get "manifest" => "rails/pwa#manifest", as: :pwa_manifest

        # Defines the root path route ("/")
        root "hello_world#index"
    end
    ```
3. **Modify the View**: Open the `app/views/hello_world/index.html.erb` file and replace its content with the following:

    ```ruby
    <h1>Hello World</h1>

    <p> This is a Rails app running on Railway</p>
    ```
4. **Run the Application Locally**: Start the Rails server by running:

    ```bash
        bin/rails server
    ```

    Open your browser and go to `http://localhost:3000` to see your "Hello World" page in action.

Now that your app is running locally, let’s move on to deploying it to Railway!

## Deploy Ruby on Rails App on Railway

Railway offers multiple ways to deploy your Rails app, depending on your setup and preference. Choose any of the following methods:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [Using the CLI](#deploy-from-the-cli).
3. [From a GitHub repository](#deploy-from-a-github-repo).

## One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. It sets up a Rails app along with a Postgres database and Redis.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/sibk1f)

After deploying, we recommend that you [eject from the template](/guides/deploy#eject-from-template-repository) to create a copy of the repository under your own GitHub account. This will give you full control over the source code and project.

## Deploy from the CLI

To deploy the Rails app using the Railway CLI, please follow the steps:

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Rails app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
 - **Note:** If you see an error about a missing `secret_key_base` for the production environment, don’t worry. We’ll fix this in the next step.
4. **Add a Database Service**:
    - Run `railway add`.
    - Select `PostgreSQL` by pressing space and hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
5. **Configure Environment Variables**:
    - Go to your app service <a href="/overview/the-basics#service-variables">**Variables**</a> section and add the following:
        - `SECRET_KEY_BASE` or `RAILS_MASTER_KEY`: Set the value to the key from your local app's `config/master.key`.
        - `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_PUBLIC_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).  
    - Use the **Raw Editor** to add any other required environment variables in one go.
6. **Redeploy the Service**:
    - Click **Deploy** on the Railway dashboard to apply your changes.
7. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.

**Note:** If your app has a `Dockerfile` (which newer Rails apps typically include by default), Railway will [automatically detect and use it to build](/reference/dockerfiles) your app. If not, Railway will still handle the deployment process for you.

8. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1728049734/docs/quick-start/railsapp_on_railway.png"
alt="screenshot of the deployed Rails service showing the Hello world page"
layout="responsive"
width={2375} height={1151} quality={100} />


## Deploy from a GitHub Repo

To deploy the Rails app to Railway, start by pushing the app to a GitHub repo. Once that’s set up, follow the steps below to complete the deployment process.

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables**:
    - Click **Add Variables** and configure all the necessary environment variables for your app.
        - E.g `RAILS_ENV`: Set the value to `production`.
        - E.g `SECRET_KEY_BASE` or `RAILS_MASTER_KEY`: Set the value to the key from your app's `config/master.key`.
4. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
5. **Add a Database Service**:
    - Right-click on the Railway project canvas or click the **Create** button.
    - Select **Database**.
    - Select **Add PostgreSQL** from the available databases.
        - This will create and deploy a new Postgres database service for your project.
6. **Configure Environment Variables**:
    - Go to your app service <a href="/overview/the-basics#service-variables">**Variables**</a> section and add the following:
        - `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).  
    - Use the **Raw Editor** to add any other required environment variables in one go.
7. **Prepare Database and Start Server**:
    - Go to your app service <a href="/overview/the-basics#service-settings">**Settings**</a> section.
        - In the **Deploy** section, set `bin/rails db:prepare && bin/rails server -b ::` as the <a href="/guides/start-command">**Custom Start Command**</a>. This command will run your database migrations and start the server.
8. **Redeploy the Service**:
    - Click **Deploy** on the Railway dashboard to apply your changes.
9. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.

**Note:** During the deployment process, Railway will automatically [detect that it’s a Rails app](https://nixpacks.com/docs/providers/ruby).

10. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Rails apps effortlessly!

Next, we'll cover how to set up workers and cron jobs for your Rails app on Railway.

## Set Up Workers & Cron Jobs with Sidekiq

Sidekiq is a powerful and efficient background job processor for Ruby apps, and it integrates seamlessly with Rails. Follow the instructions below to configure and run Sidekiq in your Rails app on Railway:

1. **Install Sidekiq**
    - Start by adding `sidekiq` and `sidekiq-cron` to your Rails app. In your terminal, run the following command:
        ```bash
        bundle add sidekiq
        bundle add sidekiq-cron
        ```
2. **Add a Redis Database Service**
    - Sidekiq uses Redis as a job queue. To set this up:
        - Right-click on the Railway project canvas or click the **Create** button.
        - Select **Database**.
        - Select **Add Redis** from the available databases.
            - This will create and deploy a new Redis service for your app.
3. **Create and Configure a Worker Service**
    - Now, set up a <a href="/guides/services#creating-a-service">separate service</a> to run your Sidekiq workers.
        - Create a new <a href="/overview/the-basics#service-settings">**Empty Service**</a> and name it **Worker Service**.
        - Go to the <a href="/overview/the-basics#service-settings">**Settings**</a> tab of this service to configure it.
        - In the **Source** section, connect your GitHub repository to the **Source Repo**.
        - Under the <a href="/guides/build-configuration#customize-the-build-command">**Build**</a> section, set `bundle install` as the **Custom Build Command**. This installs the necessary dependencies.
        - In the **Deploy** section, set `bundle exec sidekiq` as the <a href="/guides/start-command">**Custom Start Command**</a>. This command will start Sidekiq and begin processing jobs.
        - Click on <a href="/overview/the-basics#service-variables">**Variables**</a> at the top of the service settings.
        - Add the following environment variables:
            - `RAILS_ENV`: Set the value to `production`.
            - `SECRET_KEY_BASE` or `RAILS_MASTER_KEY`: Set this to the value of your Rails app’s secret key.
            - `REDIS_URL`: Set this to `${{Redis.REDIS_URL}}` to reference the Redis database URL. This tells Sidekiq where to find the job queue. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
            - Include any other environment variables your app might need.
        - Click **Deploy** to apply the changes and start the deployment.
4. **Verify the Deployment**:
    - Once the deployment is complete, click on **View Logs**. If everything is set up correctly, you should see Sidekiq starting up and processing any queued jobs.

    <Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1728065286/docs/quick-start/worker_service.png" alt="screenshot of the worker service running Sidekiq" 
    layout="responsive" width={2210} height={1696} quality={100} />
5. **Confirm All Services Are Connected**:
    - At this stage, your application should have the following services set up and connected:
        - **App Service**: Running the main Rails application.
        - **Worker Service**: Running Sidekiq to process background jobs.
        - **Postgres Service**: The database for your Rails app.
        - **Redis Service**: Used by Sidekiq to manage background jobs

Here’s how your setup should look:

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1728065005/docs/quick-start/rails_all_services_connected.png" alt="Diagram showing all Rails services connected on Railway" layout="responsive" width={3308} height={1920} quality={100} />

By following these steps, you’ll have a fully functional Rails app with background job processing using Sidekiq on Railway. If you run into any issues or need to make adjustments, check the logs and revisit your environment variable configurations.
 
## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Monitoring](/guides/monitoring)
- [Deployments](/guides/deployments)


================================================
FILE: src/docs/guides/react.md
================================================
---
title: Deploy a React App
description: Learn how to deploy a React app to Railway with this step-by-step guide. It covers quick setup, caddy server setup, one-click deploys and other deployment strategies.
---

[React](https://react.dev), also known as React.js or ReactJS, is a popular JavaScript library developed by Meta for building user interfaces, especially for web and native applications. 

React simplifies the process of creating interactive and dynamic UIs by breaking them down into reusable components.

This guide covers how to deploy a React app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a React app!

## Create a React App

**Note:** If you already have a React app locally or on GitHub, you can skip this step and go straight to the [Deploy React App on Railway](#deploy-the-react-app-to-railway).

To create a new React app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to create a new React app using [Vite](https://vite.dev/guide/#scaffolding-your-first-vite-project):

```bash
npm create vite@latest helloworld -- --template react
```

A new React app will be provisioned for you in the `helloworld` directory.

### Run the React App locally

Next, `cd` into the directory and install the dependencies.

```bash
npm install
```

Start the Vite development server by running the following command:

```bash
npm run dev
```

Open your browser and go to `http://localhost:5173` to see your app.

## Deploy the React App to Railway

Railway offers multiple ways to deploy your React app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. It sets up a React app with [Caddy](https://caddyserver.com) to serve the dist folder.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/NeiLty)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=react" target="_blank">variety of React app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your React app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729182225/docs/quick-start/vite_react_app.png"
alt="screenshot of the deployed React service"
layout="responsive"
width={2431} height={2051} quality={100} />

### Deploy from a GitHub Repo

To deploy a React app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `helloworld` or React app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine AS build

    # Set config
    ENV NPM_CONFIG_UPDATE_NOTIFIER=false
    ENV NPM_CONFIG_FUND=false

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build

    # Use the Caddy image
    FROM caddy

    # Create and change to the app directory.
    WORKDIR /app

    # Copy Caddyfile to the container image.
    COPY Caddyfile ./

    # Copy local code to the container image.
    RUN caddy fmt Caddyfile --overwrite

    # Copy files to the container image.
    COPY --from=build /app/dist ./dist

    # Use Caddy to run/serve the app
    CMD ["caddy", "run", "--config", "Caddyfile", "--adapter", "caddyfile"]
    ```
    The `Dockerfile` will use Caddy to serve the React app.
3. Add a `Caddyfile` to the app's root directory:
    ```bash
    # global options
    {
        admin off # theres no need for the admin api in railway's environment
        persist_config off # storage isn't persistent anyway
        auto_https off # railway handles https for us, this would cause issues if left enabled
        # runtime logs
        log {
            format json # set runtime log format to json mode 
        }
        # server options
        servers {
            trusted_proxies static private_ranges 100.0.0.0/8 # trust railway's proxy
        }
    }

    # site block, listens on the $PORT environment variable, automatically assigned by railway
    :{$PORT:3000} {
        # access logs
        log {
            format json # set access log format to json mode
        }

        # health check for railway
        rewrite /health /*

        # serve from the 'dist' folder (Vite builds into the 'dist' folder)
        root * dist

        # enable gzipping responses
        encode gzip

        # serve files from 'dist'
        file_server

        # if path doesn't exist, redirect it to 'index.html' for client side routing
        try_files {path} /index.html
    }
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your React apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/redis.md
================================================
---
title: Redis
description: Learn how to deploy a Redis database on Railway.
---

The Railway Redis database template allows you to provision and connect to a Redis database with zero configuration.

## Deploy

Add a Redis database to your project via the `ctrl / cmd + k` menu or by clicking the `+ New` button on the Project Canvas.

<Image src="https://res.cloudinary.com/railway/image/upload/v1695934218/docs/databases/addDB_qxyctn.gif"
alt="GIF of the Adding Database"
layout="responsive"
width={450} height={396} quality={100} />

You can also deploy it via the [template](https://railway.com/template/redis) from the template marketplace.

#### Deployed Service

Upon deployment, you will have a Redis service running in your project, deployed from the [bitnami/redis](https://hub.docker.com/r/bitnami/redis) Docker image.

### Connect

Connect to the Redis server from another service in your project by [referencing the environment variables](/guides/variables#referencing-another-services-variable) made available in the Redis service:

- `REDISHOST`
- `REDISUSER`
- `REDISPORT`
- `REDISPASSWORD`
- `REDIS_URL`

#### Connecting Externally

It is possible to connect to Redis externally (from outside of the [project](/develop/projects) in which it is deployed), by using the [TCP Proxy](/deploy/exposing-your-app#tcp-proxying) which is enabled by default.

*Keep in mind that you will be billed for [Network Egress](/reference/pricing/plans#resource-usage-pricing) when using the TCP Proxy.*

### Modify the Deployment

Since the deployed container is pulled from the [bitnami Redis](https://hub.docker.com/r/bitnami/redis) image in Docker Hub, you can modify the deployment based on the [instructions in Docker Hub](https://hub.docker.com/r/bitnami/redis).

## Backup and Monitoring

Especially for production environments, performing backups and monitoring the health of your data is essential. Consider adding:

- **Backups**: Automate regular backups to ensure data recovery in case of failure. We suggest checking out our native [Backups](/reference/backups) feature.

- **Observability**: Implement monitoring for insights into performance and health of your Redis cluster. You can integrate a Redis exporter for Prometheus, although we do not provide a specific template at this time.

## Additional Resources

While these templates are available for your convenience, they are considered unmanaged, meaning you have total control over their configuration and maintenance.  

We *strongly encourage you* to refer to the source documentation to gain deeper understanding of their functionality and how to use them effectively.  Here are some links to help you get started:

- [Redis Documentation](https://redis.io/docs/latest/operate/oss_and_stack/)
- [Redis Replication](https://redis.io/docs/latest/operate/oss_and_stack/management/replication/)
- [High Availability with Redis Sentinel](https://redis.io/docs/latest/operate/oss_and_stack/management/sentinel/)
- [Understanding Sentinels](https://redis.io/learn/operate/redis-at-scale/high-availability/understanding-sentinels)


================================================
FILE: src/docs/guides/remix.md
================================================
---
title: Deploy a Remix App
description: Learn how to deploy a Remix app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Remix](https://remix.run) is a full-stack web framework that empowers you to build fast, elegant, and resilient user experiences by focusing on the interface and working seamlessly with web standards. Your users will enjoy every moment spent with your product.

This guide covers how to deploy a Remix app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Remix app!

## Create a Remix App

**Note:** If you already have a Remix app locally or on GitHub, you can skip this step and go straight to the [Deploy Remix App on Railway](#deploy-the-remix-app-to-railway).

To create a new Remix app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to create a new Remix app:

```bash
npx create-remix@latest
```

Follow the prompts by giving a directory name, like `helloworld`, where you want your app to be set up. When asked, select **Yes** to automatically install all the necessary dependencies.

A new Remix app will be provisioned for you in the `helloworld` directory.

### Run the Remix App locally

Start the Vite development server by running the following command:

```bash
npm run dev
```

Open your browser and go to `http://localhost:5173` to see your app.

## Deploy the Remix App to Railway

Railway offers multiple ways to deploy your Remix app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/remix)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=remix" target="_blank">variety of Remix app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Vue app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729528294/remix_app_on_railway.png"
alt="screenshot of the deployed Remix service"
layout="responsive"
width={2266} height={2040} quality={100} />

### Deploy from a GitHub Repo

To deploy a Remix app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `helloworld` or Remix app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build
    
    # Serve the app
    CMD ["npm", "run", "start"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Remix apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/restart-policy.md
================================================
---
title: Restart Policy
description: Learn how to configure the restart policy so that Railway can automatically restart your service if it crashes.
---

The restart policy dictates what action Railway should take if a deployed service stops, e.g., exits with a non-zero exit code.

**Note:** For services with multiple replicas, a restart will only affect the replica that crashed, while the other replica(s) continue handling the workload until the restarted replica is back online.

The default is `On Failure` with a maximum of 10 restarts.

To configure a different restart policy, go to the Service settings and select a different policy from the dropdown.

#### What does each policy mean?

- `Always`: Railway will automatically restart your service every time it stops, regardless of the reason.

- `On Failure`: Railway will only restart your service if it stops due to an error (e.g., crashes, exits with a non-zero code).

- `Never`: Railway will never automatically restart your service, even if it crashes.

#### Plan limitations

Users on the Free plan and those trialing the platform have some limitations on the restart policy:

- `Always` Is not available.

- `On Failure` is limited to 10 restarts.

Users on paid plans can set any restart policy with any number of restarts.



================================================
FILE: src/docs/guides/rocket.md
================================================
---
title: Deploy a Rust Rocket App
description: Learn how to deploy a Rust Rocket app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Rocket](https://rocket.rs) is a web framework for Rust that makes it simple to write fast, type-safe, secure web applications with incredible usability, productivity and performance.

This guide covers how to deploy a Rocket app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Rocket app! 🚀

## Create a Rocket App

**Note:** If you already have a Rocket app locally or on GitHub, you can skip this step and go straight to the [Deploy Rocket App to Railway](#deploy-the-rocket-app-to-railway).

To create a new Rocket app, ensure that you have [Rust](https://www.rust-lang.org/tools/install) installed on your machine.

Run the following command in your terminal to create a new Rust app:

```bash
cargo new helloworld --bin
```

The command creates a new binary-based Cargo project in a `helloworld` directory.

Next, `cd` into the directory and add Rocket as a dependency by running the following command:

```bash
cargo add rocket
```

This will add Rocket as a dependency, and you’ll see it listed in your `Cargo.toml` file.

### Modify the Application File

Next, open the app in your IDE and navigate to the `src/main.rs` file.

Replace the content with the code below:

```rust
#[macro_use] 
extern crate rocket;

#[get("/")]
fn index() -> &'static str {
    "Hello world, Rocket!"
}

#[launch]
fn rocket() -> _ {
    rocket::build().mount("/", routes![index])
}
```

The code above uses the Rocket framework to create a basic web server that responds to HTTP requests. It defines a simple route using the `#[get("/")]` macro, which tells Rocket to handle GET requests to the root URL `(/)`. 

The `index()` function is the handler for this route and returns a static string, **"Hello world, Rocket!"**, which will be sent as the response when the root URL is accessed.

The `#[launch]` attribute on the `rocket()` function marks it as the entry point to launch the application. Inside `rocket()`, the server is built with `rocket::build()` and the index route is mounted to the root path `/` using `mount()`. 

When the application runs, it listens for incoming requests and serves the "Hello world, Rocket!" response for requests made to the root URL, demonstrating a simple routing and response mechanism in Rocket.

### Run the Rocket App locally

Run the following command in the `helloworld` directory via the terminal:

```bash
cargo run
```

All the dependencies will be installed and your app will be launched.

Open your browser and go to `http://localhost:8000` to see your app.

## Deploy the Rocket App to Railway

Railway offers multiple ways to deploy your Rocket app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. 

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/FkW8oU)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=rocket" target="_blank">variety of Rocket templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Rocket app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

    **Note:** You'll come across a 502 error where your application doesn't respond. We'll fix that in the next step.
5. **Configure Rocket app to accept non-local connections**:
    - Rocket apps need to be configured to accept external connections by listening on the correct address, which is typically `0.0.0.0`. You can easily do this by setting the address through the environment variable.
    Run the following command to set the Rocket address to `0.0.0.0`:
        ```bash
        railway variables --set "ROCKET_ADDRESS=0.0.0.0"
        ```
6. **Redeploy the Service**:
    - Run `railway up` again to trigger a redeployment of the service.
7. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully. Access your public URL again and you should see your app working well.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729858389/docs/quick-start/rocket_app_service.png"
alt="screenshot of the deployed Rocket service"
layout="responsive"
width={2038} height={1698} quality={100} />

### Deploy from a GitHub Repo

To deploy a Rocket app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables**:
    - Click **Add Variables**, then add `ROCKET_ADDRESS` with the value `0.0.0.0`. This allows your Rocket app to accept external connections by listening on `0.0.0.0`.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Rust app](https://nixpacks.com/docs/providers/rust).
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `helloworld` or Rocket app's root directory.
2. Add the content below to the `Dockerfile`:
    ```docker
    FROM lukemathwalker/cargo-chef:latest-rust-1 AS chef

    # Create and change to the app directory.
    WORKDIR /app

    FROM chef AS planner
    COPY . ./
    RUN cargo chef prepare --recipe-path recipe.json

    FROM chef AS builder 
    COPY --from=planner /app/recipe.json recipe.json

    # Build dependencies - this is the caching Docker layer!
    RUN cargo chef cook --release --recipe-path recipe.json

    # Build application
    COPY . ./
    RUN cargo build --release

    CMD ["./target/release/helloworld"]
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Rocket apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)


================================================
FILE: src/docs/guides/sails.md
================================================
---
title: Deploy a Sails App
description: Learn how to deploy a Sails app to Railway with this step-by-step guide. It covers quick setup, database integration, the Boring JavaScript stack, one-click deploys and other deployment strategies.
---

[Sails](https://sailsjs.com) is a MVC framework for Node.js. It is designed to emulate the familiar MVC pattern of frameworks like Ruby on Rails, but with support for the requirements of modern apps: data-driven APIs with a scalable, service-oriented architecture.

Sails makes it easy to build custom, enterprise-grade Node.js apps.

## Create a Sails App

**Note:** If you already have a Sails app locally or on GitHub, you can skip this step and go straight to the [Deploy Sails App on Railway](#deploy-sails-app-on-railway).

To create a new Sails app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to install Sails:

```bash
npm install sails -g
```

Next, run the command below to create a new Sails app

```bash
sails new workapp
```

Select `Web App` as the template for your new Sails app. Once the dependencies have been installed, `cd` into the `workapp` directory and run `sails lift` to start your app.

Open your browser and go to `http://localhost:1337` to see your app.

Now, let's deploy to Railway!

## Deploy Sails App on Railway

Railway offers multiple ways to deploy your Sails app, depending on your setup and preference. Choose any of the following methods:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [Using the CLI](#deploy-from-the-cli).
3. [From a GitHub repository](#deploy-from-a-github-repo).

## One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. It sets up a Sails app along with a Postgres database and Redis.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/t3sAEH)

After deploying, we recommend that you [eject from the template](/guides/deploy#eject-from-template-repository) to create a copy of the repository under your own GitHub account. This will give you full control over the source code and project.

## Deploy from the CLI

To deploy the Sails app using the Railway CLI, please follow the steps:

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Sails app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Modify Sails Config**:
    - Open up `config/env/production.js` file and make some changes:
        - Set `http.trustProxy` to `true` because our app will be behind a proxy.
        - Set `session.cookie.secure` to `true`
        - Add this function to the `socket` object just after the `onlyAllowOrigins` array:
            ```js
            beforeConnect: function(handshake, proceed) {
                // Send back `true` to allow the socket to connect.
                // (Or send back `false` to reject the attempt.)
                return proceed(undefined, false);
            },
            ```
       **Note:** We only added this because we don't need sockets now. If you do, skip this step and add your public app URL to the `onlyAllowOrigins` array. The function simply rejects socket connection attempts.
4. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
 - **Note:** You'll come across an error about how the default `sails-disk` adapter and `connect.session()` MemoryStore  is not designed for use as a production database, don’t worry. We’ll fix this in the next step.
5. **Add PostgreSQL & Redis Database Services**:
    - Run `railway add`.
    - Select `PostgreSQL` by pressing space
    - Select `Redis` by also pressing space and hit **Enter** to add both database services to your project.
6. **Modify Sails Database Config**:
    - Open up `config/env/production.js` file and make some changes to let your app know what database to connect to and where to save sessions:
        - In the `datastores:` section,
            - Add `adapter: 'sails-postgresql'`,
            - Add `url: process.env.DATABASE_URL`
        - In the `session:` section, 
            - Add `adapter: '@sailshq/connect-redis'`,
            - Add `url: process.env.REDIS_URL`,
    - Run `npm install sails-postgresql --save` to add the new adapter to your app locally.
7. **Configure Environment Variables on Railway**:
    - Go to your app service <a href="/overview/the-basics#service-variables">**Variables**</a> section and add the following:
        - `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
        - `REDIS_URL`: Set the value to  `${{Redis.REDIS_URL}}` (this references the URL of your new Redis Database)
    - Use the **Raw Editor** to add any other required environment variables in one go.
8. **Redeploy the Service**:
    - Click **Deploy** on the Railway dashboard to apply your changes.
9. **Upload Local Changes**:
    - Run `railway up` to upload all the changes we made locally and redeploy our service.
10. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
11. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1728580600/docs/quick-start/new_sails_service.png"
alt="screenshot of the deployed Sails service"
layout="responsive"
width={2986} height={2140} quality={100} />


## Deploy from a GitHub Repo

To deploy the Sails app to Railway, start by pushing the app to a GitHub repo. Once that’s set up, follow the steps below to complete the deployment process.

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables**:
    - Click **Add Variables** and configure all the necessary environment variables for your app.
4. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
5. **Add a Database Service**:
    - Right-click on the Railway project canvas or click the **Create** button.
    - Select **Database**.
    - Select **Add PostgreSQL** from the available databases.
        - This will create and deploy a new Postgres database service for your project.
6. **Add a Redis Database Service**:
    - Right-click on the Railway project canvas or click the **Create** button.
    - Select **Database**.
    - Select **Add Redis** from the available databases.
        - This will create and deploy a new Redis database service for your project.
7. **Configure Environment Variables**:
    - Go to your app service <a href="/overview/the-basics#service-variables">**Variables**</a> section and add the following:
        - `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
        - `REDIS_URL`: Set the value to  `${{Redis.REDIS_URL}}` (this references the URL of your new Redis Database) 
    - Use the **Raw Editor** to add any other required environment variables in one go.
8. **Modify Sails Config**:
    - Follow [steps 3 & 5 mentioned in the CLI guide](#deploy-from-the-cli).
8. **Redeploy the Service**:
    - Click **Deploy** on the Railway dashboard to apply your changes.
9. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
10. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Sails apps effortlessly!

Here’s how your setup should look:

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1728580319/docs/quick-start/all_services_connected.png" alt="Diagram showing all sails services connected on Railway" layout="responsive" width={2985} height={1815} quality={100} />

By following these steps, you’ll have a fully functional Sails app. If you run into any issues or need to make adjustments, check the logs and revisit your environment variable configurations.

## The Boring JavaScript Stack Sails Starter

If you're a fan of [The Boring JavaScript Stack](https://github.com/sailscastshq/boring-stack), we’ve got a one-click deploy option for you.

Simply click the button below to get started:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/ia84_3)

**Note:** After deploying, we recommend [ejecting from the template](/guides/deploy#eject-from-template-repository) to create your own GitHub repository. This will give you full control over the project and source code.
 
## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Monitoring](/guides/monitoring)
- [Deployments](/guides/deployments)


================================================
FILE: src/docs/guides/services.md
================================================
---
title: Managing Services
description: A step by step guide to managing services on Railway.
---

A Railway Service is a deployment target for your application.

_As you create and manage your services, your changes will be collected in a set of [staged changes](/guides/staged-changes) that you must review and deploy, in order to apply them._

## Creating a Service

Create a service by clicking the `New` button in the top right corner of your project canvas, or by typing new service from the **command palette**, accessible via `CMD + K` (Mac) or `Ctrl + K`(Windows).

<Image src="https://res.cloudinary.com/railway/image/upload/v1656640995/docs/CleanShot_2022-06-30_at_18.17.31_cl0wlr.gif"
alt="GIF of the Services view"
layout="responsive"
width={370} height={300} quality={100} />

Services on Railway can be deployed from a GitHub repository, a local directory, or a Docker image.

## Accessing Service Settings

To access a service's settings, simply click on the service tile from your project canvas and go to the Settings tab.

## Defining a Deployment Source

If you've created an empty service, or would like to update the source for a deployed service, you can do so in the Service settings.

Click on the service, go to the Settings tab, and find the **Service Source** setting.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743121798/docs/deployment-source_sir4mo.png"
alt="Screenshot of how to connect a service to a GitHub repo or Docker image"
layout="responsive"
width={1200} height={421} quality={80} />

### Deploying From a GitHub Repo

Define a GitHub repository as your service source by selecting `Connect Repo` and choosing the repository you'd like to deploy.

When a new commit is pushed to the linked branch, Railway will automatically build and deploy the new code.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743121857/docs/github-repo_z8qkst.png"
alt="Screenshot of a GitHub deployment trigger"
layout="responsive"
width={1200} height={371} quality={80} />

You must link your Railway account to GitHub, to enable Railway to connect to your GitHub repositories. <a href="https://github.com/apps/railway-app/installations/new" target="_blank">You can configure the Railway App in GitHub by clicking this link.</a>

### Deploying a Public Docker Image

To deploy a public Docker image, specify the path of the image when prompted in the creation flow.

Railway can deploy images from <a href="https://hub.docker.com/" target="_blank">Docker Hub</a>, <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry" target="_blank">GitHub Container Registry</a>, <a href="https://quay.io/" target="_blank">Quay.io</a>, or <a href="https://docs.gitlab.com/ee/user/packages/container_registry/">GitLab Container Registry</a>. Example paths -

Docker Hub:

- `bitnami/redis`

GitHub Container Registry:

- `ghcr.io/railwayapp-templates/postgres-ssl:latest`

GitLab Container Registry:

- `registry.gitlab.com/gitlab-cicd15/django-project`

Microsoft Container Registry:

- `mcr.microsoft.com/dotnet/aspire-dashboard`

Quay.io:

- `quay.io/username/repo:tag`

### Deploying a Private Docker Image

If you'd like to deploy from a private Docker registry, ensure you're on the [Pro plan](pricing/plans#plans).

To deploy from a private Docker registry, specify the path of the image when prompted in the creation flow, as well as authentication credentials (username, password) to the registry.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743197249/docs/source-image_gn52ff.png"
alt="GIF of the Services view"
layout="intrinsic"
width={1200} height={746} quality={100} />

If deploying an image from <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry" target="_blank">GitHub Container Registry</a>, provide a <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-to-the-container-registry" target="_blank">personal access token (classic)</a>.

## Deploying From a Local Directory

[Use the CLI](/guides/cli) to deploy a local directory to a service -

1. Create an Empty Service by choosing `Empty Service` during the service creation flow.
2. In a Terminal, navigate to the directory you would like to deploy.
3. Link to your Railway project using the `railway link` CLI command.
4. Deploy the directory using `railway up`. The CLI will prompt you to choose a service target, be sure to choose the empty service you created.

## Deploying a Monorepo

For information on how to deploy a Monorepo click [here](/guides/monorepo).

## Monitoring

Logs, metrics, and usage information is available for services and projects. Check out the [monitoring guides](/guides/monitoring) for information on how to track this data.

## Changing the Service Icon

Customize your project canvas for easier readability by changing the service icon.

1. Right click on the service
2. Choose `Update Info`
3. Choose `Icon`
4. Begin typing to see a list of available icons, pulled from our <a href="https://devicons.railway.com/" target="_blank">devicons</a>service.

You can also access this configuration from the command palette.

## Approving a Deployment

If a member of a GitHub repo doesn't have a linked Railway account. Railway by default will not deploy any pushes to a connected GitHub branch within Railway.

Railway will then create a Deployment Approval within a Service prompting a user to determine if they want to deploy their commit or not.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724222405/CleanShot_2024-08-21_at_02.38.25_2x_vxurvb.png"
alt="screenshot of the deployment approval ui"
layout="responsive"
width={874} height={302} quality={100} />

Deploy the queued deployment by clicking the "Approve" button. You can dismiss the request by clicking the three dots menu and clicking "Reject".

## Storing Data

Every service has access to 10GB of ephemeral storage. If your service requires data to persist between deployments, or needs more than 10GB of storage, you should add a [volume](/guides/volumes).

## Deleting a Service

Delete a service by opening the project's settings and scrolling to the danger section.



================================================
FILE: src/docs/guides/solid.md
================================================
---
title: Deploy a SolidJS App
description: Learn how to deploy a SolidJS app to Railway with this step-by-step guide. It covers quick setup, one-click deploys and other deployment strategies.
---

[SolidJS](https://www.solidjs.com) is a modern JavaScript library for building responsive and high-performing user interfaces for web applications. 

It uses fine-grained reactivity, meaning it updates only when the data your app actually depends on changes. This minimizes unnecessary work, leading to faster load times and a seamless user experience.

This guide covers how to deploy a Solid app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Solid app!

## Create a Solid App

**Note:** If you already have a Solid app locally or on GitHub, you can skip this step and go straight to the [Deploy Solid App on Railway](#deploy-the-solid-app-to-railway).

To create a new Solid app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to create a new Solid app from a template:

```bash
npx degit solidjs/templates/js solidjsapp
```

A new Solid app will be provisioned for you in the `solidjsapp` directory.

### Run the Solid App locally

Next, `cd` into the directory and install the dependencies.

```bash
npm install
```

Start the Vite development server by running the following command:

```bash
npm run dev
```

Open your browser and go to `http://localhost:3000` to see your app.

## Deploy the Solid App to Railway

Railway offers multiple ways to deploy your Solid app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/w5OSVq)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Solid app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/v1741198862/CleanShot_2025-03-05_at_18.19.11_2x_isjut5.png"
alt="screenshot of the deployed Solid service"
layout="responsive"
width={2610} height={2110} quality={100} />

### Deploy from a GitHub Repo

To deploy a Solid app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
8. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `solidjsapp` or Solid app's root directory.
2. Add the content below to the `Dockerfile`:
    ```dockerfile
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine AS build

    # Set config
    ENV NPM_CONFIG_UPDATE_NOTIFIER=false
    ENV NPM_CONFIG_FUND=false

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build

    # Use the Caddy image
    FROM caddy

    # Create and change to the app directory.
    WORKDIR /app

    # Copy Caddyfile to the container image.
    COPY Caddyfile ./

    # Copy local code to the container image.
    RUN caddy fmt Caddyfile --overwrite

    # Copy files to the container image.
    COPY --from=build /app/dist ./dist

    # Use Caddy to run/serve the app
    CMD ["caddy", "run", "--config", "Caddyfile", "--adapter", "caddyfile"]
    ```
    The `Dockerfile` will use Caddy to serve the Solid app.
3. Add a `Caddyfile` to the app's root directory:
    ```bash
    {
        # global options
        admin off # theres no need for the admin api in railway's environment
        persist_config off # storage isn't persistent anyway
        auto_https off # railway handles https for us, this would cause issues if left enabled
        # runtime logs
        log {
            format json # set runtime log format to json mode 
        }
        # server options
        servers {
            trusted_proxies static private_ranges 100.0.0.0/8 # trust railway's proxy
        }
    }

    # site block, listens on the $PORT environment variable, automatically assigned by railway
    :{$PORT:3000} {
        # access logs
        log {
            format json # set access log format to json mode
        }

        # health check for railway
        rewrite /health /*

        # serve from the 'dist' folder (Vite builds into the 'dist' folder)
        root * dist

        # enable gzipping responses
        encode gzip

        # serve files from 'dist'
        file_server

        # if path doesn't exist, redirect it to 'index.html' for client side routing
        try_files {path} /index.html
    }
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Solid apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/spring-boot.md
================================================
---
title: Deploy a Spring Boot App
description: Learn how to deploy a Spring Boot app to Railway with this step-by-step guide. It covers quick setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Spring Boot](https://spring.io/projects/spring-boot) is a Java framework designed to simplify the creation of stand-alone, production-ready Spring applications that are easy to run right out of the box.

This guide covers how to deploy a Spring Boot app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Spring Boot app!

## Create a Spring Boot App

**Note:** If you already have a Spring Boot app locally or on GitHub, you can skip this step and go straight to the [Deploy Spring Boot App to Railway](#deploy-the-spring-boot-app-to-railway).

To create a new Spring Boot app, ensure that you have [JDK](https://www.oracle.com/java/technologies/downloads/) installed on your machine.

Go to [start.spring.io](https://start.spring.io) to initialize a new Spring Boot app. Select the options below to customize and generate your starter app.

- Project: Maven
- Language: Java
- Spring Boot: 3.3.4
- Project Metadata:
    - Group: com.railwayguide
    - Artifact: helloworld
    - Name: helloworld
    - Description: Demo project for Railway Guide
    - Package name: com.railwayguide.helloworld
    - Packaging: jar
    - Java: 17
- Dependencies: 
    - Click the **Add Dependencies** button and search for **Spring Web**. Select it.

![Spring Boot App Initializer](https://res.cloudinary.com/railway/image/upload/v1729619101/springboot_app_on_railway.png)
_Config to initialize our new app_

Now, click on the **Generate** button, download the zipped file and unpack it into a folder on your machine. 

### Modify the Application File

Next, open the app in your IDE and navigate to the `src/main/java/com/railwayguide/helloworld/HelloWorldApplication.java` file.

Replace the content with the code below:

```java
package com.railwayguide.helloworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@RestController
public class HelloworldApplication {

	public static void main(String[] args) {
		SpringApplication.run(HelloworldApplication.class, args);
	}

	@GetMapping("/")
    public String hello() {
      return String.format("Hello world from Java Spring Boot!");
    }

}
```

We added a `hello()` method that returns the response: `Hello world from Java Spring Boot!`.

The `@RestController` annotation designates this class as a web controller, while `@GetMapping("/")` maps the `hello()` method to handle requests sent to the root URL, `/`.

### Run the Spring Boot App locally

Next, `cd` into the `helloworld` directory via the terminal and run the following Maven command:

```bash
./mvnw spring-boot:run
```

**Note:** This is a Maven wrapper for Linux and macOS, which uses a bundled version of Maven from **.mvn/wrapper/maven-wrapper.jar** instead of relying on the system-installed version.

Open your browser and go to `http://localhost:8080` to see your app.

## Deploy the Spring Boot App to Railway

Railway offers multiple ways to deploy your Spring Boot app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. 

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/-NFGrr)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=spring boot" target="_blank">variety of Spring Boot app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Spring Boot app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729621960/springboot_service_on_railway.png"
alt="screenshot of the deployed Spring Boot service"
layout="responsive"
width={2172} height={1590} quality={100} />

### Deploy from a GitHub Repo

To deploy a Spring Boot app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a Java app](https://nixpacks.com/docs/providers/java).
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `helloworld` or Spring Boot app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Eclipse temurin alpine official image
    # https://hub.docker.com/_/eclipse-temurin
    FROM eclipse-temurin:21-jdk-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN ./mvnw -DoutputFile=target/mvn-dependency-list.log -B -DskipTests clean dependency:list install

    # Run the app by dynamically finding the JAR file in the target directory
    CMD ["sh", "-c", "java -jar target/*.jar"]
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Spring Boot apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)


================================================
FILE: src/docs/guides/staged-changes.md
================================================
---
title: Staged Changes
description: Discover how to use staged changes in Railway to deploy updates gradually.
---

Changes made in your Railway project, like adding, removing, or making changes to components, will be staged in a changeset for you to review and apply.

It is important to be familiar with this flow as you explore the upcoming guides.

### What to Expect

As you create or update components within your project:

1. The number of staged changes will be displayed in a banner on the canvas
2. Staged changes will appear as purple in the UI

<Image src="https://res.cloudinary.com/railway/image/upload/v1743124823/docs/what-to-expect_geldie.png"
            alt="Staged changes on Railway canvas"
            layout="responsive"
            width={1400} height={720} quality={100} />

### Review and Deploy Changes

To review the staged changes, click the "Details" button in the banner.  Here, you will see a diff of old and new values.  You can discard a change by clicking the "x" to the right of the change.

You can optionally add a commit message that will appear in the [activity feed](/guides/projects#viewing-recent-activity).
 
<Image src="https://res.cloudinary.com/railway/image/upload/v1743123181/docs/changes_qn15ls.png"
            alt="Staged changes on Railway canvas"
            layout="responsive"
            width={1200} height={792} quality={100} />

Clicking "Deploy" will deploy all of the changes at once. Any services that are affected will be redeployed.

Holding the "Alt" key while clicking the "Deploy" button allows you to commit the changes without triggering a redeploy.

### Caveats

- Networking changes are not yet staged and are applied immediately
- Adding databases or templates will only affect the current environment. However, they do not yet create a commit in the history



================================================
FILE: src/docs/guides/start-command.md
================================================
---
title: Set a Start Command
description: Learn how to set up a start command in your service to run your deployments on Railway.
---

A start command is the process used to run a Deployment's code, for example `python main.py` or `npm run start`.

Railway automatically configures the start command based on the code being
deployed, see [Build and Start Commands](/reference/build-and-start-commands) for more details

## Configure the Start Command

When necessary, start commands may be overridden, like for advanced use-cases such as deploying multiple projects from a single [monorepo](/guides/monorepo).

When specifying a start command, the behavior depends on the type of deployment:
- **Dockerfile / Image**: the start command overrides the image's `ENTRYPOINT` in <a href="https://docs.docker.com/reference/dockerfile/#shell-and-exec-form" target="_blank">exec form</a>.

    If you need to use environment variables in the start command for services deployed from a Dockerfile or image you will need to wrap your command in a shell -

    ```shell
    /bin/sh -c "exec python main.py --port $PORT"
    ```

    This is because commands ran in exec form do not support variable expansion.

- **Nixpacks**: the start command is ran in a shell process.

    This supports the use of environment variables without needing to wrap your command in a shell.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1637798815/docs/custom-start-command_a8vcxs.png"
alt="Screenshot of custom start command configuration"
layout="intrinsic"
width={1302} height={408} quality={80} />

## Dockerfiles & Images

If your service deploys with a Dockerfile or from an image, the start command defaults to the `ENTRYPOINT` and / or `CMD` defined in the Dockerfile.


================================================
FILE: src/docs/guides/sveltekit.md
================================================
---
title: Deploy a SvelteKit App
description: Learn how to deploy a Sveltekit app to Railway with this step-by-step guide. It covers quick setup, adapter configuration, one-click deploys and other deployment strategies.
---

[SvelteKit](https://svelte.dev/docs/kit/introduction) is a framework for rapidly developing robust, performant web applications using Svelte.

This guide covers how to deploy a SvelteKit app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a SvelteKit app!

## Create a SvelteKit App

**Note:** If you already have a SvelteKit app locally or on GitHub, you can skip this step and go straight to the [Deploy SvelteKit App to Railway](#deploy-sveltekit-app-to-railway).

To create a new SvelteKit app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to create a new SvelteKit app using [Vite](https://vite.dev/guide/#scaffolding-your-first-vite-project):

```bash
npx sv create svelteapp
```

Follow the prompts:
1. Select the `SvelteKit demo` template.
2. Add typechecking with Typescript.
3. Add prettier, eslint, and tailwindcss.
4. No tailwindcss plugins. Hit enter and move on.
5. Select `npm` as the package manager to install dependencies.

A new SvelteKit app will be provisioned for you in the `svelteapp` directory.

### Run the SvelteKit App locally

Next, `cd` into the directory and start the Vite development server by running the following command:

```bash
npm run dev
```

Open your browser and go to `http://localhost:5173` to see the app. You can play the demo game by visiting the `/sverdle` route.

### Prepare SvelteKit App for deployment

First, we need to enable SvelteKit Node adapter.

[SvelteKit adapters](https://svelte.dev/docs/kit/adapters) are plugins that take the built app as input and generate output for deployment. These adapters are used to run your project on deployment platforms.

Let's add the Node adapter to the app. Run the command below in your terminal:

```bash
npm i -D @sveltejs/adapter-node
```

Once it is installed, add the adapter to the app's `svelte.config.js` file.

The `svelte.config.js` file should look like this:

```js
import adapter from '@sveltejs/adapter-node';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;
```

Next, we need to add the start script to the `package.json` file. 

Svelte builds your project into a `build` directory. The server starts when the server entry point is executed, which is by default located at `build/index.js`. 

Open up the `package.json` file and add the start script. Set it to `node build/index.js` like so:

```js
{
	"name": "svelteapp",
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"start": "node build/index.js",
		"preview": "vite preview",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"format": "prettier --write .",
		"lint": "prettier --check . && eslint ."
	},
	"devDependencies": {
		"@fontsource/fira-mono": "^5.0.0",
		"@neoconfetti/svelte": "^2.0.0",
		"@sveltejs/adapter-auto": "^3.0.0",
		"@sveltejs/adapter-node": "^5.2.9",
		"@sveltejs/kit": "^2.0.0",
		"@sveltejs/vite-plugin-svelte": "^4.0.0",
		"@types/eslint": "^9.6.0",
		"autoprefixer": "^10.4.20",
		"eslint": "^9.7.0",
		"eslint-config-prettier": "^9.1.0",
		"eslint-plugin-svelte": "^2.36.0",
		"globals": "^15.0.0",
		"prettier": "^3.3.2",
		"prettier-plugin-svelte": "^3.2.6",
		"prettier-plugin-tailwindcss": "^0.6.5",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^3.4.9",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.0.0",
		"vite": "^5.0.3"
	}
}
```
_package.json_

Now, we are ready to deploy!

## Deploy the SvelteKit App to Railway

Railway offers multiple ways to deploy your SvelteKit app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/svelte-kit)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=sveltekit" target="_blank">variety of Svelte app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your SvelteKit app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1730489695/docs/quick-start/sveltekit_on_railway.png"
alt="screenshot of the deployed SvelteKit service"
layout="responsive"
width={2695} height={2199} quality={100} />

### Deploy from a GitHub Repo

To deploy a SvelteKit app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the SvelteKit app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build
    
    # Serve the app
    CMD ["npm", "run", "start"]
    ```
3. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your SvelteKit apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/symfony.md
================================================
---
title: Deploy a Symfony App
description: Learn how to deploy a Symfony app to Railway with this step-by-step guide. It covers quick setup, database integration, cron and workers, one-click deploys and other deployment strategies.
---

[Symfony](https://symfony.com) is a PHP web framework composed of a set of decoupled and reusable components all working together in harmony to create websites and web applications.

This guide covers how to deploy a Symfony app to Railway in three ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).

Now, let's create a Symfony app!

## Create a Symfony App

**Note:** If you already have a Symfony app locally or on GitHub, you can skip this step and go straight to the [Deploy Symfony App to Railway](#deploy-the-symfony-app-to-railway).

To create a new Symfony app, ensure that you have [Composer](https://getcomposer.org/download/), [PHP](https://www.php.net/manual/en/install.php) and [Symfony](https://symfony.com/download) installed on your machine.

Run the following command in your terminal to create a new Symfony app:

```bash
symfony new --webapp apphelloworld
```

A new Symfony app will be provisioned for you in the `apphelloworld` directory.

### Run the Symfony App locally

To start your app, run:

```bash
symfony server:start
```

Once the app is running, open your browser and navigate to `http://localhost:8000` to view it in action.

## Deploy the Symfony App to Railway

Railway offers multiple ways to deploy your Symfony app, depending on your setup and preference. 

## One-Click Deploy from a Template

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/4tnH_D)

This template sets up a starter Symfony application along with a Postgres database on Railway. You can also choose from a <a href="https://railway.com/templates?q=symfony" target="_blank">variety of Symfony app templates</a> created by the community.

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

## Deploy from the CLI

If you have your Symfony app locally, you can follow these steps:

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Symfony app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Add a Postgres Database Service**:
    - Run `railway add -d postgres`.
    - Hit **Enter** to add it to your project.
    - A database service will be added to your Railway project.
4. **Add a Service and Environment Variable**:
    - Run `railway add`.
    - Select `Empty Service` from the list of options.
    - In the `Enter a service name` prompt, enter `app-service`.
    - In the `Enter a variable` prompt, enter `DATABASE_URL=${{Postgres.DATABASE_URL}}`. 
        - The value, `${{Postgres.DATABASE_URL}}`, references the URL of your new Postgres database. Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable). 
    - Set the other environment variables:
        - `APP_ENV=prod` - This setting informs Symfony that the app is running in a production environment, optimizing it for performance.
        - `APP_SECRET=secret` where _secret_ is your generated app secret.
        - `COMPOSER_ALLOW_SUPERUSER="1"` - This is necessary to allow Composer to run as root, enabling the plugins that Symfony requires during installation.
        - `NIXPACKS_PHP_ROOT_DIR="/app/public"` - This ensures the Nginx configuration points to the correct [root directory path to serve the app](https://nixpacks.com/docs/providers/php).
    **Note:** Explore the [Railway CLI reference](/reference/cli-api#add) for a variety of options.
5. **Deploy the Application**:
    - Run `railway up` to deploy your app.
        - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment is complete, we can proceed to generate a domain for the app service.
6. **Set Up a Public URL**:
    - Run `railway domain` to generate a public URL for your app.
    - Visit the new URL to see your app live in action!

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731432139/docs/quick-start/symfony7_on_railway.png"
alt="screenshot of the deployed Symfony service"
layout="responsive"
width={2741} height={2193} quality={100} />

## Deploy from a GitHub Repo

To deploy a Symfony app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Add Environment Variables and Provision a Database Service**:
    - Click **Add Variables**, but hold off on adding anything just yet. First, proceed with the next step. 
    - Right-click on the Railway project canvas or click the **Create** button, then select **Database** and choose **Add PostgreSQL**. 
        - This will create and deploy a new PostgreSQL database for your project.
    - Once the database is deployed, you can return to adding the necessary environment variables:
        -  `DATABASE_URL`: Set the value to `${{Postgres.DATABASE_URL}}` (this references the URL of your new Postgres database). Learn more about [referencing service variables](/guides/variables#referencing-another-services-variable).
        - `APP_ENV=prod` - This setting informs Symfony that the app is running in a production environment, optimizing it for performance.
        - `APP_SECRET=secret` where _secret_ is your generated app secret.
        - `COMPOSER_ALLOW_SUPERUSER="1"` - This is necessary to allow Composer to run as root, enabling the plugins that Symfony requires during installation.
        - `NIXPACKS_PHP_ROOT_DIR="/app/public"` - This ensures the Nginx configuration points to the correct [root directory path to serve the app](https://nixpacks.com/docs/providers/php).
4. **Deploy the App Service**:
    - Click **Deploy** on the Railway project canvas to apply your changes.
5. **Verify the Deployment**:
    - Once the deployment completes, go to [**View logs**](/guides/logs#build--deploy-panel) to check if the server is running successfully.

    **Note:** During the deployment process, Railway will automatically [detect that it’s a PHP app via Nixpacks](https://nixpacks.com/docs/providers/php).
6. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.


**Note:** The next step shows how to run your Symfony app along with a database, migrations, cron jobs, and workers.

## Set Up Database, Migrations, Crons and Workers

This setup deploys your Symfony app on Railway, ensuring that your database, scheduled tasks (crons), and queue workers are all fully operational.

The deployment structure follows a "majestic monolith" architecture, where the entire Symfony app is managed as a single codebase but split into four separate services on Railway:
- **App Service**: Handles HTTP requests and user interactions.
- **Cron Service**: Manages scheduled tasks (e.g., sending emails or running reports).
- **Worker Service**: Processes background jobs from the queue.
- **Database Service**: Stores and retrieves your application's data.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731432227/docs/quick-start/symfony_architecture.png"
alt="screenshot of the deploy architecture of the Symfony app"
layout="responsive"
width={3294} height={2048} quality={100} />
_My Majestic Monolith Symfony app_


Please follow these steps to get started:

1. Create three bash scripts in the root directory of your Symfony app: `run-app.sh`, `run-worker.sh`, and `run-cron.sh`. 

    These scripts will contain the commands needed to deploy and run the app, worker, and cron services for your Symfony app on Railway.
    - Add the content below to the `run-app.sh` file:

        **Note:** This is required to start your app service after the build phase is complete. This script will execute the migrations and then start the Nginx server.
        ```bash
        #!/bin/bash
        # Make sure this file has executable permissions, run `chmod +x run-app.sh`
        # Run migrations, process the Nginx configuration template and start Nginx
        php bin/console doctrine:migrations:migrate --no-interaction && node /assets/scripts/prestart.mjs /assets/nginx.template.conf /nginx.conf && (php-fpm -y /assets/php-fpm.conf & nginx -c /nginx.conf)
        ```
    -  Add the content below to the `run-worker.sh` file. This script will run the queue worker:
        ```bash
        #!/bin/bash
        # Make sure this file has executable permissions, run `chmod +x run-worker.sh`

        # This command runs the queue worker. 
        php bin/console messenger:consume async --time-limit=3600 --memory-limit=128M &     
        ```
    -  Symfony doesn't natively include a scheduler. So, please install the [CronBundle](https://github.com/Cron/Symfony-Bundle) to define and run scheduled tasks. With that set up, add the content below to the `run-cron.sh` file:
        ```bash
        #!/bin/bash
        # Make sure this file has executable permissions, run `chmod +x run-cron.sh`

        # This block of code runs the scheduler every minute
        while [ true ]
            do
                echo "Running the scheduler..."
                php bin/console cron:start [--blocking] --no-interaction &
                sleep 60
            done
        ```
2. Create a Postgres Database service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas.</a>
     - Click on **Deploy**.
3. Create a new service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas.</a>
    -  Name the service **App Service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a> to configure it.
    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.
    - Add `chmod +x ./run-app.sh && sh ./run-app.sh` to the <a href="/guides/start-command">**Custom Start Command**</a> in the **Deploy** section.
    - Head back to the top of the service and click on <a href="/overview/the-basics#service-variables">**Variables**</a>.
    - Add all the necessary environment variables required for the Symfony app especially the ones listed below.
        - `APP_ENV=prod`
        - `APP_SECRET=secret` where _secret_ is your generated app secret.
        - `COMPOSER_ALLOW_SUPERUSER="1"` - This is necessary to allow Composer to run as root, enabling the plugins that Symfony requires during installation.
        - `NIXPACKS_PHP_ROOT_DIR="/app/public"` - This ensures the Nginx configuration points to the correct [root directory path to serve the app](https://nixpacks.com/docs/providers/php).
        - `DATABASE_URL=${{Postgres.DATABASE_URL}}` (this references the URL of your Postgres database).
    - Click **Deploy**.
4. Create a new service on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a>. 
    - Name the service **Cron Service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a>.
    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.
    - Add `chmod +x ./run-cron.sh && sh ./run-cron.sh` to the <a href="/guides/start-command">**Custom Start Command**</a> in the **Deploy** section.
    - Head back to the top of the service and click on  <a href="/overview/the-basics#service-variables">**Variables**</a>.
    - Add all the necessary environment variables especially those highlighted already in step 3.
    - Click **Deploy**.
5. Create a new service again on the <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a>. 
    - Name the service **Worker Service**, and click on <a href="/overview/the-basics#service-settings">**Settings**</a>.
    - Connect your GitHub repo to the  **Source Repo** in the **Source** section.
    - Add `chmod +x ./run-worker.sh && sh ./run-worker.sh` to the <a href="/guides/start-command">**Custom Start Command**</a> in the **Deploy** section.
    - Head back to the top of the service and click on <a href="/overview/the-basics#service-variables">**Variables**</a>.
    - Add all the necessary environment variables especially those highlighted already in step 3.
    - Click **Deploy**.

At this point, you should have all three services deployed and connected to the Postgres Database service:

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731432227/docs/quick-start/symfony_architecture.png"
alt="screenshot of the deploy architecture of the Symfony app"
layout="responsive"
width={3294} height={2048} quality={100} />

- **Cron Service**: This service should run the cron bundler Scheduler to manage scheduled tasks.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731432857/docs/quick-start/cron_service.png"
alt="screenshot of the cron service of the Symfony app"
layout="responsive"
width={2547} height={2057} quality={100} />

- **Worker Service**: This service should be running and ready to process jobs from the queue.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731432862/docs/quick-start/worker_service_symfony.png"
alt="screenshot of the worker service of the Symfony app"
layout="responsive"
width={2545} height={2069} quality={100} />

- **App Service**: This service should be running and is the only one that should have a public domain, allowing users to access your application.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1731432139/docs/quick-start/symfony7_on_railway.png"
alt="screenshot of the deployed Symfony service"
layout="responsive"
width={2741} height={2193} quality={100} />
_App service_


**Note:** There is a [community template](https://railway.com/template/4tnH_D) available that demonstrates this deployment approach. You can easily deploy this template and then connect it to your own GitHub repository for your application.


## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Monitoring](/guides/monitoring)
- [Deployments](/guides/deployments)




================================================
FILE: src/docs/guides/templates-best-practices.md
================================================
---
title: Template Best Practices
description: Learn the best practices for template creation.
---

Creating templates can get complex, but these best practices will help you create templates that are easy to use and maintain.

## Checklist

Depending on the type of template, there are different things to consider:

- [Template and Service Icons](#template-and-service-icons)
- [Naming Conventions](#naming-conventions)
- [Environment Variables](#environment-variables)
- [Health Checks](#health-checks)
- [Overview](#overview)

### Template and Service Icons

Template and service icons are important for branding and recognition, they give the template a more professional look and feel.

Always use 1:1 Aspect Ratio icons with transparent backgrounds, for both the template itself and the services it includes.

### Naming Conventions

Naming conventions are important for readability and consistency; using proper names enhances the overall quality and credibility of your template.

Always follow the naming conventions for the software that the template is made for.

Example, if the template is for ClickHouse, the service and template name should be named `ClickHouse` with a capital C and H, since that is how the brand name is spelled.

For anything else, such as custom software:

- Use capital case
- Avoid using special characters or dashes, space-delimited is the way to go
- Prefer shorter names over longer names for better readability
- Keep names concise while maintaining clarity

### Environment Variables

Properly set up environment variables are a great way to increase the usability of your template.

When using environment variables:

- Always include a description of what the variable is for.

- For any secrets, passwords, keys, etc., use [template variable functions](/guides/create#template-variable-functions) to generate them.

- Use [reference variables](/guides/variables#referencing-another-services-variable) when possible.

- Include helpful pre-built variables that the user may need, such as database connection strings, API keys, ports, etc.

### Health Checks

Health checks are important for ensuring that the service is running properly, before traffic is routed to it.

Although a health check might not be needed for all software, such as Discord bots, when it is applicable, it is a good idea to include a health check.

A readiness probe is the best option; if that's not possible, then a liveness probe should be used.

### Authentication

Authentication is a common feature for many software applications, and it is crucial to properly configure it to prevent unauthorized access.

If the software provides a way to configure authentication, such as a username and password, or an API key, you should always configure it in the template.

For example, ClickHouse can operate without authentication, but authentication should always be configured.

Passwords, API keys, etc. should be generated using [template variable functions](/guides/create#template-variable-functions).

### Dry Code

This is most applicable to templates that deploy from GitHub.

When creating templates that deploy from GitHub, include only the essential files needed for deployment. Avoid unnecessary documentation, example files, or unused code and configurations that don't contribute to the core functionality.

A clean, minimal repository helps users quickly understand the template's structure and make customizations when needed.

### Overview

The overview is the first thing users will see when they click on the template, so it is important to make it count.

The overview should include the following:

- **H1: Deploy and Host [X] with Railway**

    What is X? Your description in roughly ~ 50 words.

- **H2: About Hosting [X]**

    Roughly 100 word description what's involved in hosting/deploying X

- **H2: Common Use Cases**

    In 3-5 bullets, what are the most common use cases for [X]?

- **H2: Dependencies for [X] Hosting**

    In bullet form, what other technologies are incorporated in using this template besides [X]?

- **H3: Deployment Dependencies**

    Include any external links relevant to the template.

- **H3: Implementation Details (Optional)**

    Include any code snippets or implementation details. This section is optional. Exclude if nothing to add.

- **H3: Why Deploy [X] on Railway?**

    Railway is a singular platform to deploy your infrastructure stack. Railway will host your infrastructure so you don't have to deal with configuration, while allowing you to vertically and horizontally scale it.

    By deploying [X] on Railway, you are one step closer to supporting a complete full-stack application with minimal burden. Host your servers, databases, AI agents, and more on Railway.


================================================
FILE: src/docs/guides/templates.md
================================================
---
title: Templates
description: Everything you need to know about Railway templates.
---

Let's talk templates!

Templates provide a way to jumpstart a project by giving users the means to package a service or set of services into a reusable and distributable format.

#### Highlights
|||
|-|-|
| **Bootstrap Projects** | Templates are the best way to bootstrap a project by enabling you to provision a service or set of services in a matter of clicks.  Choose a template to deploy from the marketplace, or create your own from your personal scaffold. |
| **Best Practices** | Creating templates can get complex, but these best practices will help you create templates that are easy to use and maintain. |
| **Community Clout** | When you publish a template, it is placed into our template marketplace for all users of the Railway community to take advantage. |
| [**Kickback Program**](/reference/templates#kickback-program) | Usage incurred by deployed templates from the marketplace are automatically eligible for a 50% kickback of the usage. In short, get paid for building templates! |
|||

Excited about templates?  Dig into the next pages to learn how to create, publish, and deploy them.


================================================
FILE: src/docs/guides/variables.md
================================================
---
title: Using Variables
description: Learn how to use variables and secrets across services on Railway.
---

Variables provide a way to manage configuration and secrets across services in Railway.

When defined, they are made available to your application as environment variables in the following scenarios:

- The build process for each service deployment.
- The running service deployment.
- The command invoked by `railway run <COMMAND>`
- The local shell via `railway shell`

In Railway, there is also a notion of configuration variables which allow you to control the behavior of the platform.

_Adding, updating, or removing variables, results in a set of [staged changes](/guides/staged-changes) that you must review and deploy, in order to apply them._

## Service Variables

Variables scoped to individual services can be defined by navigating to a service's "Variables" tab.

<Image src="https://res.cloudinary.com/railway/image/upload/c_scale,w_2026/v1678820924/docs/CleanShot_2023-03-14_at_12.07.44_2x_rpesxd.png"
alt="Screenshot of Variables Pane"
layout="responsive"
width={2026} height={933} quality={100} />

#### Define a Service Variable

From a service's variables tab, click on `New Variable` to enter your variable into a form field, or use the `RAW Editor` to paste the contents of your `.env` or json-formatted file.

## Shared Variables

Shared variables help reduce duplication of variables across multiple services within the same project.

<Image src="https://res.cloudinary.com/railway/image/upload/v1669678393/docs/shared-variables-settings_vchmzn.png"
alt="Screenshot of Shared Variables Settings"
layout="responsive"
width={2402} height={1388} quality={100} />

#### Define a Shared Variable

From your Project Settings -> Shared Variables page, choose the Environment, enter the variable name and value, and click `Add`.

#### Use a Shared Variable

To use a shared variable, either click the Share button from the Project Settings -> Shared Variables menu and select the services with which to share, or visit the Variables tab within the service itself and click "Shared Variable".

Adding a shared variables to a service creates a [Reference Variable](/guides/variables#referencing-a-shared-variable) in the service.

## Reference Variables

Reference variables are those defined by referencing variables in other services, shared variables, or even variables in the same service.

When using reference variables, you also have access to [Railway-provided variables](#railway-provided-variables).

Railway's [template syntax](/reference/variables#template-syntax) is used when defining reference variables.

### Referencing a Shared Variable

Use the following syntax to reference a shared variable:

- `${{ shared.VARIABLE_KEY }}`

<Collapse slug="referencing-a-shared-variable-example" title="Example">
- You have a shared variable defined in your project called `API_KEY`, and you need to make the API key available to a service.  Go to the service's variables tab, and add a variable with the following value:
  - `API_KEY=${{shared.API_KEY}}`
</Collapse>

### Referencing Another Service's Variable

Use the following syntax to reference variables in another service:

- `${{SERVICE_NAME.VAR}}`

<Collapse slug="referencing-another-services-variable-example" title="Example">
- You have a variable set on your database service called `DATABASE_URL` which contains the connection string to connect to the database.  The database service name is **Clickhouse**.

- You need to make this connection string available to another service in the project. Go to the service's variables that needs the connection string and add a variable with the following value:

  - `DATABASE_URL=${{ Clickhouse.DATABASE_URL }}`

- Your frontend service needs to make requests to your backend. You do not want to hardcode the backend URL in your frontend code. Go to your frontend service settings and add the [Railway-provided variable](/develop/variables#railway-provided-variables) for the backend URL

  - `API_URL=https://${{ backend.RAILWAY_PUBLIC_DOMAIN }}`

</Collapse>

### Referencing Variables in the Same Service

Use the following syntax to reference variables in the same service:

- `${{ VARIABLE_NAME }}`

<Collapse slug="referencing-variables-in-the-same-service-example" title="Example">
- You have the variables needed to construct an API endpoint already defined in your service - `BASE_URL` and `AUTH_PATH` - and you would like to combine them to create a single variable.  Go to your service variables and add a new variable referencing other variables in the same service -
  - `AUTH_ENDPOINT=https://${{ BASE_URL }}/${{ AUTH_PATH }}`
</Collapse>

### Autocomplete Dropdown

The Railway dashboard provides an autocomplete dropdown in both the name and value fields to help create reference variables.

<Image src="https://res.cloudinary.com/railway/image/upload/c_scale,w_2000/v1678823846/docs/CleanShot_2023-03-14_at_12.56.56_2x_mbb6hu.png"
alt="Screenshot of Variables Pane"
layout="responsive"
width={2408} height={1150} quality={100} />

## Sealed Variables

Railway provides the ability to seal variable values for extra security. When a variable is sealed, its value is provided to builds and deployments but is never visible in the UI nor can it be retrieved via the API.

### Sealing a Variable

To seal an existing variable, click the 3-dot menu on the right-side of the variable and choose the "Seal" option.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743199483/docs/seal_ky7w4s.png"
alt="Seal an existing variable"
layout="responsive"
width={1200} height={552} quality={100} />

### Updating a Sealed Variable

Sealed variables can be updated by clicking the edit option in the 3-dot menu just like normal variables but they cannot be updated via the Raw Editor.

### Caveats

Sealed variables are a security-first feature and with that come some constraints:

- Sealed variables cannot be un-sealed.
- Sealed variable values are not provided when using `railway variables` or `railway run` via the CLI.
- Sealed variables are not copied over when creating PR environments.
- Sealed variables are not copied when duplicating an environment.
- Sealed variables are not copied when duplicating a service.
- Sealed variables are not shown as part of the diff when syncing environment changes.
- Sealed variables are not synced with external integrations.

## Railway-provided Variables

Railway provides many variables to help with development operations. Some of the commonly used variables include -

- `RAILWAY_PUBLIC_DOMAIN`
- `RAILWAY_PRIVATE_DOMAIN`
- `RAILWAY_TCP_PROXY_PORT`

For an exhaustive list, please check out the [Variables Reference](/reference/variables#railway-provided-variables) page.

## Multiline Variables

Variables can span multiple lines. Press `Control + Enter` (`Cmd + Enter` on Mac) in the variable value input field to add a newline, or simply type a newline in the Raw Editor.

## Using Variables in Your Services

Variables are made available at runtime as environment variables. To use them in your application, simply use the interface appropriate for your language to retrieve environment variables.

For example, in a node app -

```node
process.env.VARIABLE_NAME;
```

#### Local Development

Using the Railway CLI, you can run your code locally with the environment variables configured in your Railway project.

- Ensure that you have the Railway CLI installed and linked to your project
- In your terminal, execute `railway run <run command>`
  -> for example, `railway run npm run dev`

Check out the [CLI guide](/guides/cli#local-development) for more information on using the CLI.

## Import Variables from Heroku

You can import variables from an existing Heroku app using the command palette
on the service variables page. After connecting your Heroku account you can
select any of your Heroku apps and the config variables will be added to the current service and environment.

<Image src="/images/connect-heroku-account.png"
alt="Screenshot of connect Heroku account modal"
layout="responsive"
width={521} height={404} quality={100} />

## Using Doppler for Secrets Management

Our friends at Doppler maintain an integration that makes it easy to sync your secrets in Doppler to your project(s) in Railway.

You can get instructions on how to use Doppler with Railway on the <a href="https://docs.doppler.com/docs/railway" target="_blank">Doppler Docs
integration</a>.



================================================
FILE: src/docs/guides/volumes.md
================================================
---
title: Using Volumes
description: Use volumes on Railway to securely store and persist your data permanently.
---

Volumes allow you to store persistent data for services on Railway.

<Image
    layout="intrinsic"
    quality={100}
    width={574}
    height={454}
    src="https://res.cloudinary.com/railway/image/upload/v1687540596/docs/volumes/volumes_su6dly.png"
    alt="Volume"
/>

## Creating A Volume

You can create a new volume through the Command Palette (`⌘K`)
or by right-clicking the project canvas to bring up a menu:
<div style={{ display: 'flex', flexDirection: 'row', gap: '5px' }}>
    <div>
        <Image
            layout="intrinsic"
            quality={100}
            width={1118}
            height={476}
            src="https://res.cloudinary.com/railway/image/upload/v1687539860/docs/volumes/creating-volume-cmdk_w3wsv1.png"
            alt="Creating a volume via command palette"
        />
        <p style={{ marginTop: '-0.2em', fontSize: '0.8em', opacity: '0.6' }}>via command palette</p>
    </div>
    <div>
        <Image
            layout="intrinsic"
            quality={100}
            width={582}
            height={476}
            src="https://res.cloudinary.com/railway/image/upload/v1687539860/docs/volumes/creating-volume-menu_lqax4n.png"
            alt="Creating a volume via context menu"
        />
        <p style={{ marginTop: '-0.2em', fontSize: '0.8em', opacity: '0.6' }}>via right-click menu</p>
    </div>
</div>

When creating a volume, you will be prompted to select a service to connect the volume to:
<Image
    layout="intrinsic"
    quality={100}
    width={1148}
    height={524}
    src="https://res.cloudinary.com/railway/image/upload/v1687542048/docs/volumes/connect-volume-to-service_ao4s5h.png"
    alt="Connect volume to service"
/>

You must configure the mount path of the volume in your service:
<Image
    layout="intrinsic"
    quality={100}
    width={1136}
    height={400}
    src="https://res.cloudinary.com/railway/image/upload/v1687542048/docs/volumes/mount-point_kedfak.png"
    alt="Connect volume to service"
/>

## Using the Volume

The volume mount point you specify will be available in your service as a directory to which you can read/write.  If you mount a volume to `/foobar`, your application will be able to access it at the absolute path `/foobar`.

### Relative Paths

Nixpacks, the default buildpack used by Railway, puts your application files in an `/app` folder at the root of the container.  If your application writes to a directory at a relative path, and you need to persist that data on the volume, your mount path should include the app path.

For example, if your application writes data to `./data`, you should mount the volume to `/app/data`.

### Provided Variables

Attaching a Volume to a service will automatically make these environment variables available
to the service at runtime:
- `RAILWAY_VOLUME_NAME`: Name of the volume (e.g. `foobar`)
- `RAILWAY_VOLUME_MOUNT_PATH`: Mount path of the volume (e.g. `/foobar`)

You do not need to define these variables on the service, they are automatically set by Railway at runtime.

### Volume Availability

Volumes are mounted to your service's container when it is started, not during build time.

If you write data to a directory at build time, it will not persist on the volume, even if it writes to the directory to which you have mounted the volume.

**Note:** Volumes are not mounted during pre-deploy time, if your pre-deploy command attempts to read or write data to a volume, it should be done as part of the start command.

Volumes are not mounted as overlays.

### Permissions

Volumes are mounted as the `root` user.  If you run an image that uses a non-root user, you should set the following variable on your service:
```
RAILWAY_RUN_UID=0
```

## Growing the Volume

***Only available to Pro users and above.***

To increase capacity in a volume, you can "grow" it from the volume settings.
- Click on the volume to open the settings
- Click `Grow`
- Follow the prompts to grow the volume

<Image
    layout="intrinsic"
    quality={100}
    width={1148}
    height={584}
    src="https://res.cloudinary.com/railway/image/upload/v1730326473/docs/volumes/growvolume_zbsjjq.png"
    alt="Grow volume"
/>

Note: growing a volume requires a restart of the attached service.

## Backups

Services with volumes support manual and automated backups, backups are covered in the [backups](/reference/backups) reference guide.


================================================
FILE: src/docs/guides/vue.md
================================================
---
title: Deploy a Vue App
description: Learn how to deploy a Vue app to Railway with this step-by-step guide. It covers quick setup, caddy server setup, one-click deploys, Dockerfile and other deployment strategies.
---

[Vue](https://vuejs.org), also known as Vue.js or VueJS, is a popular JavaScript library for building snappy, performant and versatile user interfaces for web applications. 

Vue prides itself as **The Progressive JavaScript Framework**.

This guide covers how to deploy a Vue app to Railway in four ways:

1. [One-click deploy from a template](#one-click-deploy-from-a-template).
2. [From a GitHub repository](#deploy-from-a-github-repo).
3. [Using the CLI](#deploy-from-the-cli).
4. [Using a Dockerfile](#use-a-dockerfile).

Now, let's create a Vue app!

## Create a Vue App

**Note:** If you already have a Vue app locally or on GitHub, you can skip this step and go straight to the [Deploy Vue App on Railway](#deploy-the-vue-app-to-railway).

To create a new Vue app, ensure that you have [Node](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs) installed on your machine.

Run the following command in your terminal to create a new Vue app using [Vite](https://vite.dev/guide/#scaffolding-your-first-vite-project):

```bash
npm create vue@latest
```

You'll be presented with choices for different options in the prompts. Give the app a name, `helloworld` and answer `Yes` to the other options or select what you want.

A new Vue app will be provisioned for you in the `helloworld` directory.

### Run the Vue App locally

Next, `cd` into the directory and install the dependencies.

```bash
npm install
```

Start the Vite development server by running the following command:

```bash
npm run dev
```

Open your browser and go to `http://localhost:5173` to see your app.

## Deploy the Vue App to Railway

Railway offers multiple ways to deploy your Vue app, depending on your setup and preference. 

### One-Click Deploy from a Template

If you’re looking for the fastest way to get started, the one-click deploy option is ideal. It sets up a Vue app with [Caddy](https://caddyserver.com) to serve the dist folder.

Click the button below to begin:

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/new/template/Qh0OAU)

We highly recommend that [you eject from the template after deployment](/guides/deploy#eject-from-template-repository) to create a copy of the repo on your GitHub account.

**Note:** You can also choose from a <a href="https://railway.com/templates?q=vue" target="_blank">variety of Vue app templates</a> created by the community.

### Deploy from the CLI

1. **Install the Railway CLI**:
    - <a href="/guides/cli#installing-the-cli" target="_blank">Install the CLI</a> and <a href="/guides/cli#authenticating-with-the-cli" target="_blank">authenticate it</a> using your Railway account.
2. **Initialize a Railway Project**:
    - Run the command below in your Vue app directory. 
        ```bash
        railway init
        ```
    - Follow the prompts to name your project.
    - After the project is created, click the provided link to view it in your browser.
3. **Deploy the Application**:
    - Use the command below to deploy your app:
        ```bash
        railway up
        ```
    - This command will scan, compress and upload your app's files to Railway. You’ll see real-time deployment logs in your terminal.
    - Once the deployment completes, go to **View logs** to check if the service is running successfully.
4. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

<Image src="https://res.cloudinary.com/railway/image/upload/f_auto,q_auto/v1729252336/docs/quick-start/vue_app_on_railway.png"
alt="screenshot of the deployed Vue service"
layout="responsive"
width={2642} height={2080} quality={100} />

### Deploy from a GitHub Repo

To deploy a Vue app to Railway directly from GitHub, follow the steps below:

1. **Create a New Project on Railway**:
    - Go to <a href="https://railway.com/new" target="_blank">Railway</a> to create a new project.
2. **Deploy from GitHub**: 
    - Select **Deploy from GitHub repo** and choose your repository.
        - If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.
3. **Deploy the App**: 
    - Click **Deploy** to start the deployment process.
    - Once the deployed, a Railway [service](/guides/services) will be created for your app, but it won’t be publicly accessible by default.
4. **Verify the Deployment**:
    - Once the deployment completes, go to **View logs** to check if the server is running successfully.
5. **Set Up a Public URL**:
    - Navigate to the **Networking** section under the [Settings](/overview/the-basics#service-settings) tab of your new service.
    - Click [Generate Domain](/guides/public-networking#railway-provided-domain) to create a public URL for your app.

### Use a Dockerfile

1. Create a `Dockerfile` in the `helloworld` or Vue app's root directory.
2. Add the content below to the `Dockerfile`:
    ```bash
    # Use the Node alpine official image
    # https://hub.docker.com/_/node
    FROM node:lts-alpine AS build

    # Set config
    ENV NPM_CONFIG_UPDATE_NOTIFIER=false
    ENV NPM_CONFIG_FUND=false

    # Create and change to the app directory.
    WORKDIR /app

    # Copy the files to the container image
    COPY package*.json ./

    # Install packages
    RUN npm ci

    # Copy local code to the container image.
    COPY . ./

    # Build the app.
    RUN npm run build

    # Use the Caddy image
    FROM caddy

    # Create and change to the app directory.
    WORKDIR /app

    # Copy Caddyfile to the container image.
    COPY Caddyfile ./

    # Copy local code to the container image.
    RUN caddy fmt Caddyfile --overwrite

    # Copy files to the container image.
    COPY --from=build /app/dist ./dist

    # Use Caddy to run/serve the app
    CMD ["caddy", "run", "--config", "Caddyfile", "--adapter", "caddyfile"]
    ```
    The `Dockerfile` will use Caddy to serve the Vue app.
3. Add a `Caddyfile` to the app's root directory:
    ```bash
    # global options
    {
        admin off # theres no need for the admin api in railway's environment
        persist_config off # storage isn't persistent anyway
        auto_https off # railway handles https for us, this would cause issues if left enabled
        # runtime logs
        log {
            format json # set runtime log format to json mode 
        }
        # server options
        servers {
            trusted_proxies static private_ranges 100.0.0.0/8 # trust railway's proxy
        }
    }

    # site block, listens on the $PORT environment variable, automatically assigned by railway
    :{$PORT:3000} {
        # access logs
        log {
            format json # set access log format to json mode
        }

        # health check for railway
        rewrite /health /*

        # serve from the 'dist' folder (Vite builds into the 'dist' folder)
        root * dist

        # enable gzipping responses
        encode gzip

        # serve files from 'dist'
        file_server

        # if path doesn't exist, redirect it to 'index.html' for client side routing
        try_files {path} /index.html
    }
    ```
4. Either deploy via the CLI or from GitHub.

Railway automatically detects the `Dockerfile`, [and uses it to build and deploy the app.](/guides/dockerfiles)

**Note:** Railway supports also <a href="/guides/services#deploying-a-public-docker-image" target="_blank">deployment from public and private Docker images</a>.

This guide covers the main deployment options on Railway. Choose the approach that suits your setup, and start deploying your Vue apps seamlessly!

## Next Steps

Explore these resources to learn how you can maximize your experience with Railway:

- [Add a Database Service](/guides/build-a-database-service)
- [Monitor your app](/guides/monitoring)




================================================
FILE: src/docs/guides/webhooks.md
================================================
---
title: Webhooks
description: Learn how to set up webhooks on Railway to receive real-time updates for deployments and events.
---

Webhooks can be used to notify your own application of deployment status changes.  They are configured per project.

## Setup a Webhook

<Image src="https://res.cloudinary.com/railway/image/upload/v1743196876/docs/new-webhook_lrfxxa.png"
alt="New Webhook"
layout="responsive"
width={1200} height={754} quality={80} />

Complete the following steps to setup a webhook:
1. Open an existing Project on Railway.
1. Click on the `Settings` button in the top right-hand corner.
1. Navigate to the Webhooks tab.
1. Input your desired webhook URL.
1. Optional: specify which events to recieve notifications for.
1. Click `Save Webhook`.

The URL you provide will receive a webhook payload when any service's deployment status changes or an alert is triggered. This will be executed across all environments in the project.

#### Example Payload

```json
{
  "type": "DEPLOY",
  "timestamp": "2025-02-01T00:00:00.000Z",
  "project": {
    "id": "[project ID]",
    "name": "[project name]",
    "description": "...",
    "createdAt": "2025-02-01T00:00:00.000Z"
  },
  "environment": {
    "id": "[environment ID]",
    "name": "[environment name]"
  },
  "deployment": {
    "id": "[deploy ID]",
    "creator": {
      "id": "[user id]",
      "name": "...",
      "avatar": "..."
    },
    "meta": {}
  }
}

```

## Muxers: Provider-specific Webhooks

For certain webhook URLs, Railway will automatically transform the payload to match the destination (we call the Muxers). This makes it easy to use webhooks without having to write your own middleware to format the request body. Below are the currently supported providers:
- Discord
- Slack

### Setting Up a Webhook for Discord

Discord supports integrating directly with webhooks. To enable this on a server you will need to be an admin or otherwise have the appropriate permissions.

1. On Discord, open the settings for a server text channel. This menu can be accessed via the cogwheel/gear icon where the channel is listed on the server.
2. Click on the integrations tab.
3. Click on the webhooks option.
4. You will see an option to create a new webhook, click this button and fill out your preferred bot name and channel.
5. Once created, you will have the option to copy the new webhook URL. Copy that URL.
6. Back in Railway, open the project you wish to integrate with.
7. Click on the project's deployments menu.
8. Navigate to the settings tab.
9. Input the copied webhook URL into the input under "Build and Deploy Webhooks".
10. Click the checkmark to the right of the input to save.

At this point, the Discord Muxer will identify the URL and change the payload to accommodate the Discord integration. You can see this if you expand the payload preview panel.

You are now done! When your project deploys again, that Discord channel will get updates on the deployment!

### Setting Up a Webhook for Slack

Slack supports integrating directly with webhooks.

1. Enable incoming webhooks for your Slack instance (Tutorial <a href="https://api.slack.com/messaging/webhooks#enable_webhooks" target="_blank">here</a>)
1. Generate a `hooks.slack.com` webhook URL for your channel (Tutorial <a href="https://api.slack.com/messaging/webhooks#create_a_webhook" target="_blank">here</a>)
1. Open up Railway, navigate to your project's Webhook tab.
1. Paste the url from slack


<Image
src="https://res.cloudinary.com/railway/image/upload/v1737947755/docs/webhooks/wo4tuyv9dy7gjgiq2j7j.png"
alt="Slack Webhook"
layout="responsive"
width={1466} height={810} quality={80} />



================================================
FILE: src/docs/maturity/compare-to-digitalocean.md
================================================
---
title: Railway vs. DigitalOcean
description: Looking for the best deployment platform? This guide breaks down Railway vs. DigitalOcean—covering scalability, pricing, features, and why Railway is the superior choice.
---

Railway is a modern, developer-centric cloud platform that streamlines the deployment process while maintaining the power and flexibility of traditional cloud providers. We focus on making infrastructure management intuitive and efficient.

## Summary

Railway offers a comprehensive platform that combines the best aspects of traditional cloud providers with modern developer workflows. While DigitalOcean provides robust infrastructure, Railway simplifies the deployment and management process significantly.

### Railway also offers

- **Zero configuration required** - We automatically detect your language and deploy your application without complex setup.

- **OSS templates** - Access our extensive collection of templates for popular frameworks and software.

- **Zero maintenance** - We handle infrastructure management, updates, and scaling automatically.

- **Persistent storage** - Built-in support for persistent disks and volumes.

- **Universal deployment support** - Deploy any type of application, from static sites to complex microservices.

- **Container flexibility** - Support for Dockerfiles and container images.

### Railway excels with

- **Resource-based pricing** - Pay only for the resources you use, with no hidden fees or complex billing structures.

- **Cron jobs** - Built-in scheduling system that runs as a native service.

- **Rich OSS ecosystem** - Extensive collection of templates for popular open-source projects.

- **Developer-centric experience** - Intuitive interface with real-time collaboration features.

- **Global distribution** - Deploy your applications across multiple regions with automatic routing.

- **Best in Class Support** - Active community and dedicated support channels.

- **Private networking** - Secure, global network for service communication.

## Key Differences

### Developer Experience

While DigitalOcean requires extensive DevOps knowledge and manual configuration, Railway offers an intuitive interface that makes deployment and management accessible to developers at any skill level.

Our Project Canvas offers a visual representation of your connected infrastructure, making it easy to understand and manage service relationships. This modern approach stands in stark contrast to DigitalOcean's traditional dashboard.

Our **real-time collaboration** feature lets you see exactly who's working with you on the Project Canvas, making teamwork seamless and intuitive.

### Build Process

DigitalOcean requires manual configuration of build processes and deployment pipelines. Railway's [Railpack](https://railpack.com/) automatically detects your application's requirements and handles the build process seamlessly.

With more coming soon, we support 5+ languages out of the box, with automatic dependency detection and build optimization. This eliminates the need for complex build configurations or custom Dockerfiles that are often required with DigitalOcean.

### Runtime Environment

On Railway your applications only use the resources they, your bill is based on actual resource usage, not machine size.

If they need more resources, they can scale up vertically, if they need less, they can scale down.

In contrast, DigitalOcean requires you to pay for fixed-size droplets or VMs, which often leads to overprovisioning and higher costs due to manual scaling requirements.

### PR Environments

Railway's PR Environments allow you to deploy and test your code in a staging environment for each pull request.

### Database Deployment

Railway offers native support for multiple database types (PostgreSQL, MySQL, Redis, MongoDB) with built-in UI. DigitalOcean requires separate setup and management of database services.

Our database UI provides direct access to your data without needing external tools, while DigitalOcean users often solely rely on third-party software.

### Networking

Railway's private networking operates globally, allowing services in different regions to communicate securely. DigitalOcean's networking is more traditional and requires manual configuration for cross-region communication.

We handle SSL/TLS certificates automatically, while DigitalOcean users need to manage certificates separately.

### Pricing

Railway's pricing is based on actual resource usage. You can find [specific per-minute pricing here](/reference/pricing/plans#resource-usage-pricing).

DigitalOcean's pricing is based on fixed-size droplets or VMs and requires manual scaling, which will lead to overprovisioning and higher costs.

### Support and Community

Railway provides immediate support through our active Discord community and Central Station. DigitalOcean's support varies by plan, with basic support limited to community forums.

## Ready to Switch?

Thinking about migrating from DigitalOcean to Railway? We've created a [migration guide](/migration/migrate-from-digital-ocean) to help you transition smoothly.

[Sign up on Railway](https://railway.com/new) today and get $5 in free credits to explore the platform.

For companies and large organizations, we'd love to chat! [Book a call with us](https://cal.com/team/railway/work-with-railway) to see how Railway will fit your needs. 


================================================
FILE: src/docs/maturity/compare-to-fly.md
================================================
---
title: Railway vs. Fly
description: Looking for the best deployment platform? This guide breaks down Railway vs. Fly.io—covering scalability, pricing, features, and why Railway is the superior choice.
---

Railway is a modern, developer-centric cloud platform designed to simplify app deployment, scaling, and management—all while optimizing for developer happiness and efficiency.

We provide a robust, feature-rich platform comparable to other cloud providers, with a focus on ease of use and developer productivity.

Railway offers:

- **Broad Language and Framework Support**: Deploy apps in [any language or framework](https://docs.railway.com/guides/languages-frameworks).
- **Flexible Deployment Options**: Use GitHub, Dockerfiles, Docker images from any registry, or local deployments via the Railway CLI.
- **Integrated Tools**: Simplify environment variable management, CI/CD, observability, and service scaling.
- **Networking Features:** Public and private networking.
- **Best in Class Support:** Very active community and support on Slack, [Discord](https://discord.gg/railway) and our [Central Station](https://station.railway.com/).

We differ in the following:

- A vibrant, highly engaged community with fast, reliable support.
- A superior developer experience designed for simplicity and efficiency.
- Transparent, flexible pricing that scales with your needs.
- And much more...

## Differences

### Product and Deploy UX

At Railway, we believe DevOps should be effortless, intuitive, and even enjoyable. From the instant simplicity of [dev.new](http://dev.new/) to managing interconnected services with ease on your Project Canvas, our platform is designed to be both powerful and visually refined. Who says DevOps has to be ugly or boring? On our platform, it’s fluid, engaging, and a pleasure to use.

One of our standout features is **real-time collaboration**. See exactly which teammates are working alongside you on the Project Canvas, fostering seamless teamwork and collaboration.

### Deploy UI and GitHub Repo Deployments

Fly.io currently supports GitHub repository deployments for Node.js, Phoenix, Laravel, Django, Python, and Golang via their Launch UI, but these are still considered experimental. They strongly recommend using the CLI for more reliable and flexible deployments.

At Railway, you can deploy any language repository seamlessly through our fast and intuitive deploy UI. Additionally, you have the flexibility to use our CLI whenever it suits your workflow.

We make it incredibly simple to deploy exactly what you need—whether it's a template, database, Docker image, or even an empty service—all from the dashboard. With just a right-click on the Project Canvas or a tap on the Create button, you can instantly spin up new resources. Fly.io does not offer this level of convenience in its dashboard.

### Native Crons

Railway provides [native cron jobs](https://docs.railway.com/reference/cron-jobs) directly in the dashboard—no setup, no extra packages, just seamless scheduling. Simply define a cron schedule in your service settings, and Railway will automatically execute the start command at the specified times.

With Railway’s built-in cron management, you can:

- Easily create and manage cron jobs from the dashboard
- View all past and running jobs in one place
- Avoid unnecessary installations and configurations—just set and go!

Fly.io does not offer native crons. To schedule tasks, you’ll need to manually configure crontab using supercronic, adding extra setup and maintenance overhead.

With Railway, scheduled tasks are simple, streamlined, and built-in. No extra steps—just reliable automation.

### PR Environments

Railway offers a [powerful environments feature](https://docs.railway.com/guides/environments) that makes managing complex development workflows seamless—all from the dashboard. With just a few clicks, you can enable multiple environments such as **staging, development, QA,** **and more**, ensuring your project scales efficiently with your workflow.

Additionally, Railway provides [PR environments](https://docs.railway.com/guides/environments#enable-pr-environments)—ephemeral environments automatically created when a pull request is opened and cleaned up when it’s closed. No need to manually configure or integrate with GitHub Actions—Railway handles everything for you, so you can focus on building and shipping faster.

Fly.io recommends setting up Git branch preview environments manually via GitHub Actions and workflows, requiring additional setup and maintenance.

### Webhooks

Railway provides native support for [webhooks](https://docs.railway.com/guides/webhooks), allowing you to receive real-time notifications about key project events such as **deployments, build status changes, and more**. Stay in sync with your workflow effortlessly and build anything on top of it!

Fly.io does not offer built-in webhook support, meaning users must rely on external integrations or manual setups to track application events.

With Railway, webhooks are built-in and ready to go—no extra setup required.

### Variables and Secrets

Railway offers an intuitive and delightful variable management feature where you can [easily reference variables(a.k.a shared variables) in the same service or from another service](https://docs.railway.com/guides/variables#reference-variables) within your project. We also provide the ability to [seal variable values](https://docs.railway.com/guides/variables#sealed-variables) for extra security.

Additionally, Railway offers [variable functions](https://docs.railway.com/guides/create#template-variable-functions) that automatically generate secure secrets for your environment variables—eliminating the need for manual secret creation.

- Need a random secret? Simply use: `${{ secret() }}`
- Need a hex-encoded secret of a specific length? Just specify the length and character set: `${{ secret(128, "abcdef0123456789") }}`

Fly.io provides a basic secrets management feature, allowing users to store secrets with a digest. However, it lacks the advanced functionality of Railway’s shared variables and dynamic secret generation.

### Databases

Many applications rely on databases, and we believe managing them should be seamless and hassle-free. That’s why Railway allows you to natively provision and deploy PostgreSQL, MySQL, Redis, and MongoDB directly within the platform—no external setup required.

Fly.io, on the other hand, provisions Postgres, Upstash Redis, Upstash Kafka, and Upstash Vector. If you need MySQL or MongoDB, you’ll have to manually set up and manage them via Docker. Alternatively, Fly recommends several external providers for these databases.

Railway goes further by offering a built-in database UI, making management effortless. You can view tables, add and edit data directly from the platform—no need for third-party tools. Fly does not provide an equivalent UI, requiring external tools for database management.

### Templates

Railway's [Templates Marketplace](https://railway.com/templates) is rapidly expanding, with 940+ templates and counting. Any user can create and publish pre-configured starter setups or templates, making it effortless for developers to deploy apps and services with just one click—eliminating the hassle of manual setup.

Our templates cover a wide range of frameworks and tools, including [Django](https://railway.com/new/template/GB6Eki), [Laravel](https://railway.com/new/template/Gkzn4k), [Metabase](https://railway.com/new/template/metabase), [Strapi](https://railway.com/template/strapi), [MinIO](https://railway.com/new/template/SMKOEA), [ClickHouse](https://railway.com/new/template/clickhouse), [Redash](https://railway.com/new/template/mb8XJA), and [Prometheus](https://railway.com/new/template/KmJatA)—all deployable in seconds. From your dashboard, you can turn your project into a reusable template in under two minutes.

We also reward our creators through the [Kickback Program](https://railway.com/open-source-kickback). When you publish a template and it’s deployed by other users, you receive 50% of the usage costs as a kickback, credited either as cash (USD) or Railway credits—allowing you to earn while supporting the developer community.

Fly.io offers a selection of official and community-contributed application templates, mainly available through their GitHub fly-apps repositories. However, Fly does not have a centralized marketplace like Railway, nor does it provide any incentives for community templates.

### Pricing

At Railway, we believe in transparent, [flexible pricing](https://railway.com/pricing)—**you only pay for what you use**. With our pay-as-you-go model, you get an affordable flat fee for your selected plan, plus usage-based billing that scales with your needs. No overpaying, no hidden fees—just straightforward pricing.

- **Trial:** Free + a one-time $5 credit for resource usage
- **Hobby:** $5/month, includes $5 in usage credits every month
- **Pro:** $20 per teammate/month
- **Enterprise:** Custom pricing

Fly.io follows a pure usage-based pricing model—there are no subscription tiers, meaning you pay based on the exact resources you consume. Check out [Fly’s pricing here](https://fly.io/pricing/).

### Want to see the savings?

Explore our [detailed pricing breakdown](https://docs.railway.com/reference/pricing/plans) to see how Railway keeps costs predictable while still giving you the flexibility to scale as needed.

### Customer Support and Community

At Railway, we take pride in offering best-in-class support through our [vibrant Discord community](https://discord.gg/railway) and our custom-built [Central Station](https://station.railway.com/)—a support platform powered by Railway itself. We believe that every project matters, no matter how big or small. If you run into an issue, we’re here to help, and our engineers are always available to ensure you get the support you need.

With over [880,000 users](https://railway.com/stats) who love what we do, we’re committed to continuous improvement. [Every week](https://railway.com/changelog), we ship new features and updates to make Railway even better—because great support isn’t just about answering questions, it’s about building a platform that just works.

Fly.io offers paid support plans starting at $29/month for standard support, $199/month for premium, and $2,500+ for enterprise-level assistance. If you can’t afford these plans, your only option is their community forum for help.

## We are similar to Fly.io in the following ways:

- Database Backups
- Bare Metal
- Docker Image deployments
- Dockerfile deployments
- Health checks
- Zero downtime deploys.
- Custom domains
- Stateful Services a.k.a Persistent Disks and Volumes
- Private Networking
- Instant Rollbacks
- Infrastructure as code
- CI/CD
- Monitoring, Observability and In-Dashboard logs
- Autoscaling and Scale to Zero
- Monorepo and multi-environment deployments.
- Multi-region deployments
- CLI tooling
- Programmatic deployments via API
- Serving static sites

## Migrate to Railway

Thinking about migrating from Fly.io to Railway? We’ve put together a [quick and simple guide](/migration/migrate-from-fly) to make the transition effortless and fast.

[Sign up on Railway](https://railway.com/new) today and get a $5 in free credits to explore the platform. 

For companies and large organizations, we’d love to chat! [Book a call with us](https://cal.com/team/railway/work-with-railway) to see how Railway fit your needs.


================================================
FILE: src/docs/maturity/compare-to-heroku.md
================================================
---
title: Railway vs. Heroku
description: Looking for the best deployment platform? This guide breaks down Railway vs. Heroku—covering community, pricing, features, and why Railway is the superior choice.
---

## Summary

Railway is a simple and powerful deployment platform that focuses on giving you and your team a deployment plane that radically increases developer efficiency.

We are alike in the following ways:
- GitHub repo deployments
- CLI tooling
- Built-in databases

We differ in the following:
- We have an outsized focus on support and developer experience. A highly engaged community and the Railway team stand at the ready to help you scale
- Resource-based pricing, only pay for what you use.
- Better developer experience. We offer PR deploys, variable management, rapid builds, and local development flows.
- And much more...

## Differences

### Builds

In the current era of software development, using Docker adds a large workload to the average developer. We want to offer the developer all the benefits of reproducibility, speed, and ease of use when deploying images without the clunky boilerplate of Docker.

Heroku's buildpacks are decent, but we want to offer the user a better experience. This is why we built Nixpacks.

Nixpacks is open source (https://github.com/railwayapp/nixpacks). It detects more languages, builds are faster, and builds are reproducible. (A common frustration of Heroku's Buildpacks).

Those moving from Heroku to Railway will find an easy switch from Heroku's Buildpacks to Railway's Nixpacks.

### Product

Deploying a project on Railway is incredibly easy thanks to Nixpacks and our templating system. We have a [quick start guide](/quick-start) that will walk you through the process.

It's possible to go from zero → 3 services in < 30 seconds. Adding new services is trivial and meshing them together means you don't need to deal with headaches based on your infrastructure.

### Pricing

Pay only for what you use—no need to size dynos.

Containers scale vertically up to 8 GB/CPU Cores (on the Hobby Plan) and 32 GB/CPU Cores (on Teams Plans).

Did traffic spike for an hour? Only pay for that hour, no manual scaling intervention required.

For those who prefer to pay upfront. We offer credit-based Developer plans who wish to load their account with credits.

### Develop and Deploy

You can use the CLI to run every service locally, hooking in with your cloud infrastructure.

For example, running `railway run yarn start` in a project with Postgres will automatically inject required enviroment variables such as `DATABASE_URL`.

If your changes look good, you can even run `railway up` from the terminal to trigger a new deployment on demand.

### Lifecycle Management

We offer guardrails to prevent new deployments from knocking your app offline, such as [Healthchecks](/deploy/healthchecks). By providing an endpoint for Railway to hit, we will make a series of requests, checking for a 200 OK response before we switch deploys to the most recent one.

Want to revert a change? Because we image all builds, you can [rollback](/deploy/deployments#rollback) to an earlier working deploy in just one click.

### Support + Community

Railway serves hundreds of thousands of thousands of builders who deploy applications that bring tremendous impact to themselves, their friends, and their customers.

We feel no project, big or small- is never not important. This is our guiding philosophy to our users.

As a result, we make great pains to be very communicative in our support channels, [optimistically gather feedback](https://station.railway.com/feedback), provide informative docs, and encourage our community to help each other.

Having an issue with a deployment? [Join over 25k Railway users on our Discord Server!](https://discord.gg/railway) With our dedicated support channels, you can get help from the Railway team and our community of builders.


================================================
FILE: src/docs/maturity/compare-to-render.md
================================================
---
title: Railway vs. Render
description: Looking for the best deployment platform? This guide breaks down Railway vs. Render—covering scalability, pricing, features, and why Railway is the superior choice.
---

Railway is a modern, developer-focused cloud platform that simplifies app deployment and scaling. We are optimised for developer happiness and efficiency!

**Note:** [Migrate your app from Render to Railway in less than 4 steps.](/migration/migrate-from-render)

We are similar in the following ways:

- GitHub repo deployments
- Docker Image deployments
- Dockerfile deployments
- Health checks
- Zero downtime deploys.
- Custom domains
- Stateful Services a.k.a Persistent Disks and Volumes.
- Private Networking
- Instant Rollbacks
- Infrastructure as code
- Monitoring, Observability and In-Dashboard logs
- Autoscaling
- Preview environments
- Native Crons
- Multi-region deployments
- CLI tooling
- Programmatic deployments via API

## Differences

### Product and Deploy UX

At Railway, we take pride in delivering a superior user experience—from the simplicity of starting with [dev.new](http://dev.new/) to managing multiple interconnected services on your Project Canvas. The interface is not only functional but visually appealing, redefining how DevOps can feel. Who says DevOps has to be ugly or boring? On our platform, it’s intuitive, refreshing, and even fun.

One delightful feature we offer is real-time collaboration. You can see exactly which of your teammates are working on the same Project Canvas, fostering seamless teamwork and collaboration.

### Builds

Render includes a build pipeline where each task consumes pipeline minutes. These minutes are allocated monthly based on your pricing tier and are billable. If you exceed your allotted pipeline minutes within a month, additional charges may apply, or your builds may be canceled.

At Railway, there’s no need to worry about managing build costs or minutes. Builds are always free—no matter how often you run them. It’s one less thing to plan, letting you focus entirely on building and deploying your apps.

We provide an exceptional deployment experience through [Nixpacks](https://github.com/railwayapp/nixpacks)—our custom-built, open-source solution that delivers incredibly fast, reproducible builds while automatically detecting and supporting over 22 languages. For advanced and customizable deployments, we also automatically detect and utilize your Dockerfile, giving you complete control.

### Databases

Many apps require the use of databases. We want to ensure that it’s very convenient and easy to use and deploy as part of your services so we offer the ability to provision PostgreSQL, MySQL, Redis and MongoDB natively in the platform. Render only offers PostgreSQL and Redis natively and allows you install other alternatives via blueprints.

Render charges a base amount for compute (CPU and Memory) for using a managed database plus storage while we charge **for only what you use** in compute and storage. For example, if you use only 2 GB (RAM) and 1 CPU, we will charge you for only that plus storage.

If you’re aware that there will be periods of inactivity, you can also enable [App Sleeping](https://docs.railway.com/reference/app-sleeping) which reduces [the cost of usage](https://docs.railway.com/guides/optimize-usage#resource-limits) by ensuring it runs only when absolutely necessary!

There’s a resource-based calculator on our [pricing page](https://railway.com/pricing) that you can use to estimate how much you’ll be charged based on **CPU**, **Memory**, **Volume** and **Network Egress**.

We also provide built-in UI for managing your database easily without the need for external tools. You can see your tables, add and edit data. Render does not.

### Database Backups

We provide [native database backups](https://docs.railway.com/reference/backups) for users on our platform. Customers can create, delete and restore backups for services with volumes (or persistent disks) directly from the dashboard.

Render provides a Point-in-Time Recovery to restore your database from 3 or 7 days max and on-demand logical backups.

### Templates

We have an increasingly [growing templates marketplace (850+)](https://railway.com/templates) where any user can build and publish a pre-configured starter app setup or template to help developers quickly deploy apps or services on Railway.

They simplify the deployment process by providing one-click deploy buttons for popular frameworks, tools, saving developers the time and effort of setting up projects from scratch. From your dashboard, you can turn your project into a reusable template in less than 2 minutes. For example, you can deploy [Django](https://railway.com/new/template/GB6Eki), [Laravel](https://railway.com/new/template/Gkzn4k), [Metabase](https://railway.com/new/template/metabase), [Strapi](https://railway.com/template/strapi), [MinIO](https://railway.com/new/template/SMKOEA), [ClickHouse](https://railway.com/new/template/clickhouse), [Redash](https://railway.com/new/template/mb8XJA), [Prometheus](https://railway.com/new/template/KmJatA) instantly just by clicking on these links.

We offer a rewarding [kickback program](https://railway.com/open-source-kickback) for our creators. When you publish a template and it’s deployed into other users’ projects, you become instantly eligible for a 50% kickback of the usage costs incurred—credited to you either as cash in USD or as Railway credits added to your account.

Render has example templates on GitHub that you can deploy and no incentives for community templates.

### Private Networking

Render’s private network is regional. Services in different regions can’t communicate directly over a private network.

At Railway, private networking operates globally. This means services in different regions can communicate with each other privately without any barriers or extra configuration. Additionally, you have the flexibility to move services between regions effortlessly.

### Pricing

We believe in the principle of **pay only for what you use**. With Railway, you pay an affordable flat fee for the plan you choose, and additional costs are based solely on the resources (compute) you consume each month. In summary, a flexible pay-as-you-go model!

- **Trial**: Free, plus one-time $5 credit for resource usage
- **Hobby**: $5/month, plus $5 credit for resource usage monthly
- **Pro**: $20 per teammate/month
- **Enterprise**: Custom pricing

**Render Pricing**:

- **Hobby**: Free
- **Pro**: $19/month
- **Org**: $29 per teammate/month
- **Enterprise**: Custom pricing

Curious about the savings? Check out a [detailed breakdown of our pricing](https://docs.railway.com/reference/pricing/plans) and see how much you can save by running your workloads on Railway. It’s more cost-effective than [Render](https://render.com/pricing).

### Customer Support and Community

At Railway, we take pride in providing best-in-class support through our [vibrant Discord community](https://discord.gg/railway) and our custom-built [Central Station](https://station.railway.com/)—a platform powered by Railway itself. We firmly believe that no project is too small or unimportant when it comes to addressing support needs. If an issue arises, we’re here to help.

With over [900,000 users](https://railway.com/stats) who think we’re the best thing since sliced bread, we’re committed to continuously improving. [Week after week](https://railway.com/changelog), we ship new features and updates to better support our customers.

To meet the unique needs of our customers, we offer tailored [support tiers](https://docs.railway.com/reference/support#support-tiers), ensuring users receive the assistance they need at every step.



================================================
FILE: src/docs/maturity/compare-to-vercel.md
================================================
---
title: Railway vs. Vercel
description: Looking for the best deployment platform? This guide breaks down Railway vs. Vercel, covering scalability, pricing, features, and why Railway is the superior choice.
---

## Summary

Railway is an intuitive cloud platform that streamlines your deployment workflow, letting developers focus on building great products instead of managing infrastructure.

### Railway also offers

- **Zero configuration required** - We automatically detect your language and deploy your application.

- **Framework templates** - We have templates for many popular frameworks, including Next.js, Nuxt, Express, [and more](https://railway.com/templates).

- **Zero maintenance** - We handle the underlying infrastructure, so you don't have to.

- **Global distribution** - We deploy your application to multiple regions, so you can serve your users faster.

- **Cron jobs** - Cron jobs are just another service that run on a schedule, no extra packages, no extra setup.

This is just scratching the surface of the similarities between Railway and Vercel!

### Railway excels with

- **Straightforward pricing** - We charge based on the resources your application uses, rather than function invocations, config reads, observability, etc.

- **Universal deployment support** - Deploy any application or service, from static sites to complex backends.

- **Rich OSS ecosystem** - We have templates for many popular OSS projects, including Supabase, N8N, and Typebot.

- **Developer-centric experience** - We prioritize intuitive workflows, providing a unique dashboard to manage your services, including scaling, logs, and more.

- **Persistent Disks** - We provide persistent disks for your application, so you don't have to worry about data loss.

- **Best in Class Support** - Incredibly fast personalized support on Slack, and the [Central Station](https://station.railway.com/).

- **Private networking** - Seamlessly and securely connect your services together through the global wireguard network.

- **Deploy any container** - We support Dockerfiles, and we also support deploying container images from both public and private registries.

## Improvements over Vercel

### Product and Deploy UX

We offer a unique dashboard to manage your many projects, the services within them, and the collaborators on your projects.

Within each project can be found the **Project Canvas** which is a real-time collaborative canvas that lets you see all your services and the connections between them. This visual approach makes it easy to understand your entire infrastructure at a glance - from databases and APIs to frontend services and their relationships.

It is your mission control center, where all aspects of your project come together. Monitor your services in real-time, manage environment variables, scale resources up or down, and view logs - all from one unified interface. The Project Canvas makes infrastructure management intuitive by showing you exactly how your services connect and interact, while enabling real-time collaboration with your team.

This unified view eliminates the need to jump between different dashboards and tools, making infrastructure management more intuitive and efficient.

### Builds

We provide native support for 22 languages (including Node.js, Python, Ruby, Go, and more) with our custom-built, open-source solution, [Nixpacks](https://github.com/railwayapp/nixpacks), delivering incredibly fast, reproducible builds.

Simply give us a GitHub repository and we'll automatically detect the language and build it for you, completely hands off.

For advanced and customizable deployments, we also automatically detect and utilize your Dockerfile, giving you complete control over your deployment.

### Runtime

We run with a serverfull container runtime for maximum compatibility and performance, this allows for greater flexibility in what you can deploy since you aren't limited by available runtimes.

A container runtime also means your application will be ran as-is, meaning you don't have to worry about how a runtime will modify your application or its state, we just run your application as-is.

Since we are serverfull, there are no cold starts, or pre-warming, your application will be up and running to handle requests at all times instantaneously.

There are so many benefits to a serverfull runtime, and we are just scratching the surface of what benefits you get from it.

### Multi-Region Deployments

With a few clicks, you can deploy your application to multiple regions globally, and we'll automatically route your users to the closest region.

This is incredibly useful for reducing latency and improving the performance of your application, and it is all managed from the dashboard and transparently handled by us.

### Use Cases

While Vercel's focus is on frontend, Railway is a complete platform for both frontend and backend deployments.

This very website is built with Next.js and deployed on Railway, let alone [railway.com](http://railway.com/) itself is deployed on Railway, and it is also built with Next.js.

You can deploy anything from a simple static site to a complex backend built out with microservices all connected privately through our global wireguard network.

### Databases

Instead of 3rd party integrations, we natively support PostgreSQL, MySQL, Redis, MongoDB, and more — all manageable directly from our platform without external providers, and best of all, they are billed the same as any other service on Railway.

Our built-in database UI lets you view tables and manage data directly from the dashboard, eliminating the need for third-party tools. Plus, with our [native database backups](/reference/backups), you can easily create, delete, and restore backups for your databases.

### Private Networking

We provide a private wireguard network to connect your services together, this allows for private communication between services without the need for public internet, ex. between a backend and a database.

This is incredibly useful for reducing latency and improving the performance of your application, and it is all managed from the dashboard and transparently handled by us.

You don't pay egress fees for private networking, meaning you don't pay for the data that flows between your services, this is incredibly useful for reducing costs.

### Cron Jobs

Cron jobs are just another service that run on a schedule, no extra packages, no extra setup.

Only pay for the time they run, and only for the resources they use while running, this makes them outstandingly cost effective.

### Templates

Railway's [Templates Marketplace](https://railway.com/templates) features 940+ templates and counting. Any user can deploy pre-configured starter setups, making it effortless to deploy apps and services with just one click.

The template marketplace contains templates for many popular OSS projects, including Supabase, N8N, and Typebot. Deploying these templates is as easy as clicking a button, and they are all configured to deploy with the best practices for Railway.

Best of all, through our [Kickback Program](https://railway.com/open-source-kickback), template creators receive 50% of the usage costs when others deploy their templates—either as cash (USD) or Railway credits.

### Pricing

Railway offers straightforward and transparent, [resource-based pricing](/reference/pricing/plans) that scales with your needs, pay only for the resources you use. You can find [specific per-minute pricing here](/reference/pricing/plans#resource-usage-pricing).

Unlike Vercel's function-based pricing, we charge based on actual resource usage (CPU, Memory, Storage), making costs more predictable and often more economical for backend services.

And fortunately, this simple pricing model does not change based on the region you deploy to.

### Support

We offer incredibly fast and personalized support on Slack, and the [Central Station](https://station.railway.com/).

Our Central Station is built in house from the ground up to allow us to provide the best possible support to you, the user.

Enterprise users with $2,000/month committed spend get priority support within Slack, and enterprise can also book a call with our team to get direct help from the Railway team.

## Ready to Switch?

Thinking about migrating from Vercel to Railway? We've made it simple! Check out our [migration guide](/migration/migrate-from-vercel) to get started.

[Sign up on Railway](https://railway.com/new) today and get $5 in free credits to explore the platform.

For companies and large organizations, we'd love to chat! [Book a call with us](https://cal.com/team/railway/work-with-railway) to see how Railway will fit your needs.


================================================
FILE: src/docs/maturity/compliance.md
================================================
---
title: Compliance
description: Learn about Railway's compliance standards and how we ensure security and regulatory adherence.
---

Railway is designed to be used by companies of all sizes. We understand that companies have different needs when it comes to compliance and security. We are happy to work with you to ensure that Railway meets your needs. We have worked with teams in gov't, healthcare, and finance to ensure that Railway meets their needs.

Companies choose Railway so that they can speed up their development velocity while also maintaining their security and compliance posture.

We are happy to sign NDAs with your company to provide additional information about our security and compliance practices. Please reach out to us at [team@railway.com](mailto:team@railway.com) to get started, or click [here](https://cal.com/team/railway/work-with-railway?duration=30) to book some time to chat.

## Certifications

We know that your businesses need to develop strong and lasting relationships with your vendors to build confidence that we can be trusted to deliver your workloads. Part of that is through certifications, audits, and continual refinement of our practices. Railway aims to comply with all the distributions of workloads and privacy procedures.

### SOC 2

Railway is SOC 2 Type I certified.

Highly motivated customers (Pro tier and higher) who are in the process of securing SOC 2 certification can request a copy of the Railway security audit on our [Trust Center](https://trust.railway.com).

SOC 2 Type II certification is expected by the **end of July 2025**.

### HIPAA BAA

Railway follows a shared responsibility model for HIPAA compliance and PHI. Railway will make its best effort to advise your company on setting up encryption for your data, auditing the storage of keys, establishing access control, and ensuring secure storage of sensitive patient data. When a BAA is in effect, the Railway team will no longer be able to directly access your running workloads.

HIPAA BAA is an add-on with a paid monthly spend threshold. All pricing goes towards your [usage on Railway](/reference/pricing#committed-spend-tiers). Monthly thresholds for addons is found in our [commited spend pricing](/reference/pricing#committed-spend-tiers).

If your company needs a BAA, you can contact our solutions team at [team@railway.com](mailto:team@railway.com), or click [here](https://cal.com/team/railway/work-with-railway?duration=30) to schedule some time to chat.

We are working on operationalized BAAs and continually gathering requirements for health-focused workloads for Enterprises. You can share your feedback in [Central Station](https://station.railway.com/feedback).

## Privacy

Railway is committed to protecting the privacy of our users. We understand that when working with user code and data, it is important to have a clear understanding of how we handle your data. Railway, on behalf of our users, may remove offending workloads but at no point will a Railway team member modify your application without your expressed permission through an approved communication channel.

[Click here to see our Privacy Policy.](https://railway.com/legal/privacy)

## GDPR Compliance - Data Processing Agreement (DPA)

Railway provides a Data Processing Agreement (DPA) to help customers comply with GDPR requirements when processing personal data through our platform. If you operate a business in the EU or process personal data of EU residents, you may need to execute a DPA with Railway to ensure compliance with GDPR Article 28 requirements for data processor relationships.

You can access and execute Railway's standard DPA through our self-service link: [Sign Railway's DPA](https://powerforms.docusign.net/0c38a448-eda3-4139-99d6-f9c0eef94154?env=na4&acct=c0c04fce-9579-4f79-b028-7a946a40077d&accountId=c0c04fce-9579-4f79-b028-7a946a40077d)

You can also review Railway's standard DPA terms at [railway.com/legal/dpa](https://railway.com/legal/dpa).

## VAT Tax ID and Address

Customers in the EU may need to add their VAT Tax ID to their invoices for compliance and reporting purposes.

You can add your VAT Tax ID and address in [Workspace settings](https://railway.com/workspace/billing) -> Billing -> Manage Subscription.

If you have multiple workspaces, you need to add your VAT Tax information to each respective Workspace's Subscription.

After adding your information, it will appear on your future invoices.

## EU Dora

For European organizations in finance that need to comply with [EU Dora](https://www.eiopa.europa.eu/digital-operational-resilience-act-dora_en) - Railway is willing to provide documents after a click through NDA that describe disaster recovery procedures, uptime statistics, and IT controls for organizations to who need to submit compliance documents to local regulators. You can get information on our [Trust Page](https://trust.railway.com)



================================================
FILE: src/docs/maturity/incident-management.md
================================================
---
title: Incident Management
description: Learn how Railway handles incident management.
---

## Introduction

Railway understands the importance of effective incident management procedures. We do what we can to minimize downtime, mitigate the impact of incidents, and ensure the smooth operation of our systems. In the interest of transparency, we publish as much of our procedure to keep our customers in the know on how we handle and learn from incidents.

## Monitoring + Reporting

Railway has a robust monitoring system in place to proactively detect and address any potential incidents. We continuously monitor our infrastructure, including servers, networks, and applications, to ensure their smooth operation. By monitoring key metrics and performance indicators, we can identify any anomalies or potential issues before they escalate into full-blown incidents.

However, it's important to note that while we strive to stay ahead of incidents, there may be situations where unforeseen issues arise. In such cases, we rely on qualitative customer feedback to help us identify and address any issues promptly. We encourage our customers to report any problems they encounter through our [Central Station](https://station.railway.com), [Slack](/reference/support#slack), or [Discord](https://discord.gg/railway).

## Status Page + Uptime

Railway's uptime and incident retrospective can be accessed on the Railway Instatus page at https://railway.instatus.com/. On this page, you can view the historical uptime of Railway's systems and services. Additionally, you can find detailed information about past incidents, including retrospectives that provide insights into how incidents were handled and what measures were taken to prevent similar issues in the future.

For Enterprise customers, we offer SLOs and guarantees of service that may not be represented on the uptime dashboard.

## Incident Severity

Railway catalogues incident's in the following buckets.

- **High**: the incident is potentially catastrophic to Railway Corporation and/or disrupts
  Railway Corporation’s day-to-day operations; violation of contractual requirements is likely. Ex. Any business level impact to 25 percent of our customers for one hour or more. All incidents within this severity get public communications.
- **Medium**: the incident will cause harm to one or more business units within Railway
  Corporation and/or will cause delays to a customer business unit’s activities.
- **Low**: the incident is a clear failure of a component, but will not substantively impact the business. Railway still performs retrospectives within this severity.

### Responsible Disclosure

Enterprise customers get Root Cause Analysis, and we attempt to publish event retrospectives on [https://blog.railway.com/engineering](https://blog.railway.com/engineering)



================================================
FILE: src/docs/maturity/philosophy.md
================================================
---
title: Philosophy
description: Explore Railway’s core philosophy and the principles that drive our platform.
---

Railway is a deployment platform that helps developers deliver their software through the entire application life-cycle through git native tooling, composable infrastructure, and built-in instrumentation. 

We design and develop our product features to serve what we consider to be the three primary stages of software development:
- Development
- Deployment
- Diagnosis

Most developer-oriented products attempt to target one or more stages within the software development cycle. Railway provides solutions for developers for all of these stages, whereas some vendors focus on specific stages.

Railway is a company staffed with people who know developers would prefer to use tools they are familiar with. We believe software should be "take what you need, and leave what you don't." As a result, we are comfortable recommending additional vendors if they might acutely meet their needs. Our goal is for your unique need to be served so you can focus on delivering for your customers.

Companies should be as upfront as possible about their product and offerings to help you decide what is best for your team and users. 

Let's talk about the number one use case: delivering apps to users in a Production environment. Railway, the company, is sustainable, building our product, team, and company to last as your projects.

## Objective

The goal of this section is to describe the processes, internal and external that companies have requested in our years of operation to help them build confidence to determine if Railway is a good fit for their company.  Railway maintains a policy to be forthcoming and frank at all times. We would rather have a developer make the correct choice for their company than to adopt Railway and then come to regret that decision.

If you have any additional questions or if you require any additional disclosure you can contact us to set up a call at [team@railway.com](mailto:team@railway.com).

## Product Philosophy

Railway is focused on building an amazing developer experience.  Our goal is to enable developers to deploy their code and see their work in action, without thinking about CI/CD, deployments, networking, and so forth, until they need to.

### Take What You Need

To achieve our goal, we've designed Railway to "just work", with all the necessary magic built in to achieve that. Railway at a high level reads your code repo, makes a best guess effort to build it into an [OCI compliant image](https://opencontainers.org/), and runs the image with a start command.

- Have a code repository but have yet to think about deployment? We got you. Connect your code repository and let Railway take care of the rest.
- Already built the perfect Dockerfile?  Bring it.  If you have a Dockerfile in your repo, we'll find it and use that to build your image.

If you've outgrown the "magic" built into deployment platforms, or are suspicious of things that are just too magical, we are happy to provide a high level overview of our architecture.

### Leave What You Don't

Streamlined deployment workflows and sane defaults are inherited by every project in Railway out of the box; but as a team of engineers, we at Railway are very aware that what works for one project does not always work for another.  Or sometimes, you just need to be in control - maybe you already have a workflow you like, or maybe you need to layer Railway into existing infrastructure, and abstractions only get in your way.  

That's why we've designed the platform for flexibility, wherever you need it.

On Railway, you can use the default pattern for deployment or opt to use vendor. In fact, we will even support you in your effort to integrate Railway in a unique way.  Here are a couple of use cases we've helped customers take advantage of -
- Deploying to Railway from Gitlab CI/CD
- Supporting the development of a Terraform provider
- Region based routing to workloads via Cloudflare

We love working with our customers to solve interesting use cases. If you're not seeing a track for you, get in touch at [team@railway.com](mailto:team@railway.com) and we'll find it!

## High-level Architecture

As mentioned before, Railway at a high level takes your code, builds it, and throws it on running infrastructure on GCP. At a granular level Railway relies on a few systems to maintain workloads. 

- Build Layer
  - Where archived folders of code or a Dockerfile (via GitHub or `railway up`) is sent to be built into an image
  - [Nixpacks](https://nixpacks.com/docs): the OSS software that reads your code and builds it via Nix
  - Image Registry: either via Dockerhub/GitHub packages, or a previously built image from Railway's Build servers
- Deployment Layer
  - Where images are ran in containers, images are pulled from the Build Layer
  - Databases on Railway are images + volumes mounted on a machine
  - Cron services are containers ran on a defined schedule
- Routing Layer
  - This is the system that Railway maintains that routes requests into your running containers and provides private networks to suites of containers.
- Logging Layer
  - A suite of machines networked running Clickhouse that store container logs. This is accessed when you open the service logs pane.
- Dashboard Layer
  - Infrastructure and code that is used to manage the above layers.
  - This also incudes any monitors that Railway uses to maintain the state of the Deployment Layer to maintain application state. (ex. Removing a deployment.)

Your code will either be in some, or all steps depending on the amount of Railway that you choose to adopt.

### Operational Procedures

Railway uses a suite of alerting vendors, additional internal tools, and PagerDuty to ensure uptime of our services described above. You can see Railway's uptime on our [Instatus page](https://railway.instatus.com/). Operational incident management reports and RCAs are available by request for those on an Enterprise plan.

### Do I have to change how I write code?

No, Railway is a deployment platform that works with your existing code. We don't require you to change how you write code or use any specific frameworks. We support all languages and frameworks that can be run in a Docker container or within Nixpacks.

### Is Railway serverless?

No, services on Railway are deployed in stateful Docker containers. The old deployments are removed on every new deploy.

We do have a feature, [App Sleeping](/reference/app-sleeping), that allows you to configure your service to "sleep" when it is inactive, and therefore will stop it from incurring usage cost while not in use.

## Book a Demo

If you're looking to adopt Railway for your business, we'd love to chat and ensure your questions are answered.  [Click here to book some time with us](https://cal.com/team/railway/work-with-railway?duration=30).


================================================
FILE: src/docs/maturity/use-cases.md
================================================
---
title: Use Cases
description: Explore real-world use cases for deploying and managing applications on Railway.
---

Railway is suited for a variety of use-cases. This page will walk-through what the platform is perfect for today and our recommendations for apps of all sizes.

As mentioned in our philosophy document. Railway will make a best effort to provide all the information a developer needs to make the best choice for their workload. 

## Is Railway Production Ready?

Many of our customers use Railway to reliably deploy their applications to customers at scale. With that said, Production standards are going to be different depending on what your users expect. We have companies that use Railway in a variety of different verticals such as:

- Enterprise SaaS
- Consumer Social
- Education
- E-Commerce
- Crypto
- ML/AI
- Agencies

Companies on Railway range from hobby projects, to extremely fast growing startups, to publicly traded companies. Railway has been incrementally adopted from using the platform as a developer's scratchpad before writing Terraform to hand off to an Ops. team or being implemented end to end. 

Railway's been in operation for now for more than three years and we have served billions of requests, with 100s of millions of deploys serving millions of end-users simultaneously.


## Railway Scale

All of these verticals deploy workloads that may require high bandwidth operations or intensive compute.

However, service scale on the platform is not unbounded. As a foundational infrastructure company, we understand that customers may outpace our pace of improvement for the platform. Even though 32 vCPU and 32 GB of memory sounds like a lot (with up to 20 replicas) on the Pro plan, when faced with hyper-growth: throwing more resources at the issue might be your best bet until long term optimizations can be made by your team.

Railway will gladly bump up your service limits within your tier of service to meet your needs. Even so, we will be frank and honest if you may need to seek elsewhere to augment your workloads with extra compute. If your compute needs outpace our Pro offering, consider our Enterprise plans where we offer even greater limits and capacity planning, [email us to learn more](mailto:team@railway.com), or [click here](https://cal.com/team/railway/work-with-railway?duration=30) to schedule some time to chat.

### Databases

We have customers using our databases for their production environment with no issue. Railway's plugins are optimized for a batteries included development experience. They are good for applications that are prioritizing velocity and iteration speed over scale.

Our databases are provided with no SLAs, are not highly available, and scale only to the limits of your plan. We don't think they are suitable for anything mission-critical, like if you wanted to start a bank.

We advise developers to:
- [Configure backups](/reference/backups) 
- Run-book and restore their backups
- Configure secondaries to connect to in-case of a disaster situation

Included in our planned near-term work for databases on Railway are additional database metrics, and SSH access into the running database. 

As mentioned before: we don't believe in vendor lock-in here at Railway, if your needs outpace us, consider other vendors like PlanetScale (for MySQL) or Cockroach (for Postgres).

### Metrics

Railway provides up to 7 days worth of data on service information such as:
- CPU
- Memory
- Disk Usage
- Network

We also overlay commit and deployment behavior to correlate issues with application health to deployments. This is on top of the service logs that are continually delivered to users viewing a particular deployment of a service.

For service logs, we store logs for up to 90 days for Pro plan workspaces.

Included in our planned near-term work for logging and observability on Railway are improvements to structured logging, and OpenTelemetry compatible endpoints.

It is common for teams who wish to have additional observability to use an additional monitoring tool that maintains a longer time horizon of data such as New Relic, Sentry, or Datadog. Within projects, deploying a Datadog Agent is as easy as deploying the template and providing your Datadog API Keys.

### Networking

Railway doesn't have a hard bandwidth limit to the broader internet. 

We may throttle your outbound bandwidth and reach out to you when it exceeds 100GB/month to ensure the legitimacy of your workloads. If you need to control where your traffic is allowed to come from such as setting up firewall rules, we recommend setting up Cloudflare or an external load balancer/L7 application firewall to handle it.

Private networking bandwidth is un-metered.

We intend to provide advanced traffic-shaping controls within Railway in the future.


### Service Level Objectives

Railway does meet SLOs for companies who have greater need for incident, support, and business planning responsiveness. We provide this via Business Class, offered as an add-on to Pro plans and included in all Enterprise plans. [More info.](/support/business-class)


### Will Railway exist in 10 years?

A common question we get in conversations with (rightly) skeptical developers is the above question. Most documentation pages don't address the meta question of a company's existence but how we run *our* business affects yours. 

The short and simple answer is: **Yes**. 

Railway aims to exist for a very long time. Railway has presence on existing public clouds, while also building out presence on co-location providers. As a company, we have been structured sustainably with a first principles approach to every expense while growing sustainably.


### Unsupported Use-Cases

Unfortunately, our platform isn't yet well-equipped to handle the following verticals that require extensive Gov't certification or GPU compute:

- Government
- Traditional Banking
- Machine Learning Compute

## General Recommendations

A document like this can only go so far. We have a standing invitation for any team who needs an extended scale use-case to reach out to us directly by e-mailing [team@railway.com](mailto:team@railway.com), or via our [Discord server](https://discord.gg/railway).  You can also schedule some time with us directly by clicking [here](https://cal.com/team/railway/work-with-railway?duration=30).

We would be happy to answer any additional questions you may have.


================================================
FILE: src/docs/migration/migrate-from-digitalocean.md
================================================
---
title: Migrate from DigitalOcean to Railway
description: Learn how to migrate your WordPress site from DigitalOcean to Railway with this step-by-step guide. Fast, seamless, and hassle-free.
---

This guide demonstrates how to migrate your WordPress site from DigitalOcean to Railway's modern cloud platform. Railway provides a streamlined deployment experience with powerful infrastructure features.

Railway offers:

- **Modern Infrastructure**: High-performance cloud platform

- **Quick Setup**: WordPress-ready deployment template

- **Database Support**: MariaDB database capabilities

- **Integrated SSL**: Automatic SSL certificate management

- **Scalable Infrastructure**: Easily handle traffic spikes and growth

- **Collaborative Features**: Team management, deployment protection, and role-based access

- **Priority Support**: Dedicated support for Railway users

## Migration Steps

Let's walk through migrating a WordPress site from DigitalOcean to Railway. This process involves backing up your existing installation, deploying WordPress on Railway and then restoring from your backup.

### 1. Backup your WordPress site

- Ensure you have a backup of your existing site. Use a WordPress backup plugin of your choice to export your site data.

    Make sure this backup includes, All WordPress files, All WordPress database tables, All WordPress uploads.

- Document your current configuration

    - Note any custom domain settings

    - Keep track of your username and password for wp-admin.

### 2. Deploy WordPress

- Open the [WordPress Template](https://railway.com/template/EP4wIt) page

    <Image src="https://res.cloudinary.com/railway/image/upload/v1741839172/docs/do-migration-guide/wordpress_template_pqnksc.png"
    alt="Screenshot of the WordPress template"
    layout="responsive"
    width={1301} height={799} quality={100} />

- Click "Deploy Now" to Deploy the WordPress template.

- Since this template doesn’t require any configuration, Click "Deploy" and wait for the deployment to complete.

The template will automatically configure -

- A MariaDB database

- Initial WordPress setup

- Required environment variables

- A temporary service domain

<Image src="https://res.cloudinary.com/railway/image/upload/v1741839172/docs/do-migration-guide/wordpress_deployment_qwg5j1.png"
alt="Screenshot of wordpress after deployment"
layout="responsive"
width={838} height={454} quality={100} />

### 3. Restore your site content

After the template deployment completes -

1. Access your WordPress installation via the temporary service domain.

2. Configure your WordPress settings

3. Install your preferred backup plugin

4. Restore your site content from your backup

### 4. Configure Domain Settings

To set up your custom domain:

1. Open your service's Settings in Railway

2. Navigate to the "Networking" section

3. Add your custom domain

4. Update your DNS records according to the instructions given.

**Note:** You will need to redeploy your service for WordPress to pick up the new domain.

<Image src="https://res.cloudinary.com/railway/image/upload/v1741839172/docs/do-migration-guide/wordpress_service_settings_networking_meyhcs.png"
alt="Screenshot of Railway domain configuration page"
layout="responsive"
width={763} height={505} quality={100} />

### 5. Verify Migration

Before finalizing your migration - 

1. Test all WordPress functionality

2. Verify all pages and posts are displaying correctly

3. Check media files are properly loaded

4. Test user authentication

5. Verify contact forms and other interactive elements

### 6. Performance Optimization

Consider these optimization options for your WordPress deployment:

- Configure caching by placing Cloudflare or a similar CDN in front of your site.

- Optimize database performance by setting up a caching plugin.

- Set up appropriate scaling configurations.

- Implement CDN if needed

That's all you need to migrate your WordPress site from DigitalOcean to Railway! Need assistance? The [Central Station](https://station.railway.com/) is there to help you with any questions during your migration process.


================================================
FILE: src/docs/migration/migrate-from-fly.md
================================================
---
title: Migrate from Fly to Railway
description: Learn how to migrate your apps from Fly.io to Railway with this step-by-step guide. Fast, seamless, and hassle-free.
---

This guide walks you through the steps needed to seamlessly migrate your app and data from Fly.io to Railway. This process is straightforward and typically takes an average of **5 - 20 minutes**, depending on the size of your database and app complexity.

**TL;DR: Quick Migration Steps**

- Set up new app on Railway
- Export data from Fly.io and Import into Railway DB
- Deploy app (including auto-migration of app config & variables)

We provide everything Fly.io offers—and more! Check out our [comparison guide](/maturity/compare-to-fly) to see the differences and make an informed choice.

Why take our word for it? Experience the [Railway advantage yourself—give it a spin today!](https://railway.com/new)

## Migration Steps

In this guide, we will migrate a Go (Gin) app with a Postgres database from Fly.io to Railway. While we are using this app as an example, the process applies to any app, making it easy to transition your projects smoothly.

Here’s the link to the [app](https://github.com/unicodeveloper/gin).

### 1. Set Up a Railway Project

Navigate to [Railway's Project Creation Page](https://railway.com/new). 

Select the **Deploy from GitHub Repo** option and connect your repository. If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.

![Railway new project](https://res.cloudinary.com/railway/image/upload/v1737143344/railwaynewproject_d4jv8c.png)

### 2. Deploy the App

Railway auto-imports all the build configurations, deploy commands, environment variables from your Fly.io app repo—no manual setup needed.

If the environment variables are missing, you can easily add them manually by following these steps:

### Adding Environment Variables on Railway:

1. Navigate to the **Variables** section of your service.
2. Switch to the **Raw Editor** and paste the copied environment variables.
3. Deploy the changes to apply the configuration.

![Variables imported automatically from fly.toml into Railway service](https://res.cloudinary.com/railway/image/upload/v1737143351/environmentvariables_q0xmyh.png)

Railway will deploy the Gin app as a service, as shown in the image above. You can monitor the service building and deploying in the [Project Canvas](https://docs.railway.com/guides/projects#project-canvas).

[**Serverless (App Sleep) activated**](https://docs.railway.com/reference/app-sleeping): In this [**Fly.io** app](https://github.com/unicodeveloper/gin/blob/main/fly.toml), the HTTP service is configured with **`auto_stop_machines='stop'`** and **`auto_start_machines=true`**, enabling automatic stopping and restarting of machines. On Railway import, we automatically enable this setting to effortlessly optimize resource usage.

![App sleep activated to optimize resource usage and spend](https://res.cloudinary.com/railway/image/upload/v1737143360/appsleep_cszmgf.png)

### 3. Database Migration

Railway supports a variety of databases, including **PostgreSQL**, **MongoDB**, **MySQL**, and **Redis**, allowing you to deploy the one that best fits your application needs. We also support many more via our [templates marketplace](https://railway.com/templates).

If you're migrating data to Railway from Fly, you can follow these steps:

1. Provision a new database by right clicking on the dashboard canvas and selecting Postgres.
2. Export your data from Flyio
    - Use `flyctl` to connect to your Flyio Postgres instance
        - `fly postgres connect -a <postgres-app-name>`
    - Use `pg_dump` to export your database
        - `pg_dump -Fc --no-acl --no-owner -h localhost -p 5432 -U <your-db-username> -d <your-db-name> -f flyio_db_backup.dump` 
    - Use `pg_restore` to connect to your Railway database and restore the data from the dump.
        - `pg_restore -U <username> -h <host> -p <port> -W -F t -d <db_name> <dump_file_name>`

For detailed instructions, check out [this comprehensive tutorial on migrating PostgreSQL data between services.](https://blog.railway.com/p/postgre-backup)

Once the migration is complete, update the `DATABASE_URL` environment variable in your Railway app to point to the new PostgreSQL database and redeploy.

### 4. Replicas & Multi-region deployments

In this [Fly.io app](https://github.com/unicodeveloper/gin/blob/main/fly.toml), the setting **`min_machines_running=2`** ensures that at least **two instances** of the service remain active. On Railway import, we automatically translate this configuration to ensure that two **service instances** are running without any extra setup.

![Replicas](https://res.cloudinary.com/railway/image/upload/v1737143335/replicas_zwtuwr.png)

If your app needs to use multi-region deployments, you can leverage Railway’s [multi-region replicas](https://docs.railway.com/reference/scaling#multi-region-replicas). 

Enable this in the **Settings** section of your Railway service to keep your app close to users worldwide.

**Note:** Multi-region replicas is currently available to Pro users.

And that’s it. That’s all you need to migrate your app from Flyio to Railway.


================================================
FILE: src/docs/migration/migrate-from-heroku.md
================================================
---
title: Migrate from Heroku
description: Learn how to migrate your apps from Heroku to Railway with this step-by-step guide. Fast, seamless, and hassle-free.
---

Migrating your app from Heroku to Railway is very simple.  We even support Procfiles out of the box. (Only a single process is supported for now).

All you need to do is create a project in Railway, push your code, and migrate your envionment variables.

This guide will step you through the process of migrating a simple web service, using the [Railway CLI](/reference/cli-api).

<Image src="https://res.cloudinary.com/railway/image/upload/v1695765903/docs/heroku-migration/intro1_uauodg.gif"
alt="Screenshot of Railway Up"
layout="intrinsic"
width={700} height={464} quality={80} />

## Working Directory

In your terminal, ensure your current working directory is the same directory where your service code is located.

This is important so that as you complete the following steps, the [Railway CLI](/reference/cli-api) is properly linked.

## 1. Login to Railway From the CLI

Ensure your CLI is authenticated to your Railway account:
```bash
railway login
```

This command will prompt to open a browser to complete authentication.  Once authenticated, commands executed by the Railway CLI, will be performed in the context of your Railway account.

## 2. Create a New Project

Now, let's create a new [project](/reference/projects):
```bash
railway init
```

This command will prompt you to define a name for your service.


## 3. Deploy the Service

Once your project is created, you can push your code into the project and assign a domain.

### Push the Code

Push the code into a [service](/reference/services) in Railway:
```bash
railway up -d
```

At this point, the service is being deployed, but let's give it a domain.

### Assign a Domain

The service we are migrating is a web service that should be available over the Internet, so let's assign a domain:
```bash
railway domain
```

Now the service will be available over the Internet via the provided domain.

## 4. Migrate the Environment Variables

Finally, we will import the environment variables from Heroku into Railway.

<Image src="https://res.cloudinary.com/railway/image/upload/v1695765481/docs/heroku-migration/variables_hagopv.gif"
alt="Video of importing variables from Heroku"
layout="intrinsic"
width={600} height={364} quality={80} />

### Open the Project in Railway

Let's pop over to our new project in the [Railway canvas](/reference/projects#project-canvas).:
```bash
railway open
```

This will open the project in your browser.

### Add Heroku Variables to the Service

From the project canvas, import the Heroku variables into the service:
- click on the service
- click `Variables` tab
- open the command palette using `CMD + K` or `Ctrl + K`.
- search for `Import variables from Heroku`
- confirm the Heroku service and hit `Enter`

Your Heroku variables will be imported into the service, and it will automatically redeploy.

_Note: The first time you import variables from Heroku, you will be prompted to Allow Railway to connect to your Heroku account._

## Conclusion

Following this guide, we have successfully migrated a simple web service from Heroku to Railway, including importing variables from Heroku into Railway.

We have completed the migration by pushing our code directly from our local machine into a service in Railway.  Once you are comfortable with Railway, you may want to integrate [deployments](/reference/deployments) into your development workflow.

For more advanced operations, like migrating your databases from Heroku to Railway, the process will be a bit more involved, but we are happy to help work out a solution!

## Need Help?

If you run into any issues, or would like help with your migrations, we would be more than happy to answer your questions on our <a href="https://discord.gg/railway" target="_blank">Discord</a> or over email at [team@railway.com](mailto:team@railway.com).



================================================
FILE: src/docs/migration/migrate-from-render.md
================================================
---
title: Migrate from Render to Railway
description: Learn how to migrate your apps from Render to Railway with this step-by-step guide. Fast, seamless, and hassle-free.
---

This guide walks you through the steps needed to seamlessly migrate your app and data from Render to Railway.

With features like instant deployments, CI/CD integrations, private networking, observability, and effortless scaling, Railway helps developers focus on building rather than managing infrastructure.

Railway boasts of a superior and intuitive user experience that makes deploying complex workloads easy to configure and manage.

Railway offers:

- **Broad Language and Framework Support**: Deploy apps in [any language or framework](https://docs.railway.com/guides/languages-frameworks).
- **Flexible Deployment Options**: Use GitHub, Dockerfiles, Docker images from supported registries (Docker Hub, GitHub, RedHat, GitLab, Microsoft), or local deployments via the Railway CLI.
- **Integrated Tools**: Simplify environment variable management, CI/CD, observability, and service scaling.
- **Networking Features:** Public and private networking.
- **Best in Class Support:** Very active community on [Discord](https://discord.gg/railway) and our [Central Station](https://station.railway.com/).

..and so much more. Want to see for yourself? [Try Railway for a spin today!](https://railway.com/new)

## Migration Steps

In this guide, we will migrate a Go (Beego) app with a Postgres database from Render to Railway. 

Here’s the link to the app. A simple chat app that have the options of Long polling and Web socket — https://github.com/unicodeveloper/beego-WebIM 

### 1. Set Up a Railway Project

Navigate to [Railway's Project Creation Page](https://railway.com/new). 

Select the **Deploy from GitHub Repo** option and connect your repository. If your Railway account isn’t linked to GitHub yet, you’ll be prompted to do so.

![Set up a Railway Project](https://res.cloudinary.com/railway/image/upload/v1736366540/newproject_ljvsqp.png)

### 2. Deploy the App

Railway automatically detects a `render.yaml` file in your repository and provisions the corresponding services, including databases, web (both public and private), crons, and workers.

If environment variables are defined in your `render.yaml`, Railway will import them automatically to the appropriate services. If they are not defined, you can manually migrate them by following these steps:

**On Render**:

1. Go to the **Environment Variables** page of your service.
2. Copy all the variables and their values.

**On Railway**:

1. Open the **Variables** section for the relevant service.
2. Switch to the **Raw Editor** and paste the copied environment variables.
3. Deploy the changes to apply the configuration.

![Deploy on Railway](https://res.cloudinary.com/railway/image/upload/v1736366539/deployapp_rlhvzx.png)

Railway will deploy both the Go app as a service and the database, as shown in the image above. You can monitor the service building and deploying in the [Project Canvas](https://docs.railway.com/guides/projects#project-canvas).

### 3. Database Migration

Railway supports a variety of databases, including **PostgreSQL**, **MongoDB**, **MySQL**, and **Redis**, allowing you to deploy the one that best fits your application needs.

When a `render.yaml` file includes a `databases` section, Railway will automatically provision a **PostgreSQL database** for your app. If you're migrating data to Railway, you can follow these steps:

1. Export your database from Render using tools like `pg_dump`.
2. Import the data into Railway using `psql`.

For detailed instructions, check out [this comprehensive tutorial on migrating PostgreSQL data between services.](https://blog.railway.com/p/postgre-backup)

Once the migration is complete, update the `DATABASE_URL` environment variable in your Railway app to point to the new PostgreSQL database.

### 4. Multi-region deployments

If your app needs to use multi-region deployments, you can leverage Railway’s [multi-region replicas](https://docs.railway.com/reference/scaling#multi-region-replicas). 

Enable this in the **Settings** section of your Railway service to keep your app close to users worldwide.

**Note:** Multi-region replicas is currently available to Pro users.

![Multi-region deployments](https://res.cloudinary.com/railway/image/upload/v1736366540/multiregiondeployments_pojcyf.png)

And that’s it. That’s all you need to migrate your app from Render to Railway.


================================================
FILE: src/docs/migration/migrate-from-vercel.md
================================================
---
title: Migrate from Vercel to Railway
description: Learn how to migrate your Next.js app from Vercel to Railway with this step-by-step guide. Fast, seamless, and hassle-free.
---

This guide demonstrates how to transition your application from Vercel to Railway's developer-centric platform. Whether you're running a simple static site or a complex full-stack application, Railway streamlines your deployment workflow.

With features like instant rollbacks, integrated observability, and seamless environment management, Railway empowers developers to focus on building great applications rather than managing infrastructure.

Railway offers -

- **Next.js Optimization**: Built-in support for all Next.js features including ISR, SSR, and API routes

- **Zero Config Deployments**: Automatic framework detection and build optimization

- **Enhanced Development Flow**: Local development with production parity

- **Collaborative Features**: Team management, deployment protection, and role-based access

- **Priority Support**: Dedicated support for Railway users

## Migration Steps

Let's walk through migrating a Next.js application to Railway. For this guide, we'll use a sample e-commerce app that showcases common Next.js features and configurations.

### Deploying Your Application

To get started deploying our NextJS app, we will first make a new <a href="/overview/the-basics#project--project-canvas" target="_blank">project</a>.

- Open up the <a href="/overview/the-basics#dashboard--projects" target="_blank">dashboard</a> → Click **New Project**.
- Choose the **GitHub repo** option.

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752559/docs/quick-start/new_project_uyqqpx.png"
alt="screenshot of new project menu with deploy from github selected"
layout="responsive"
width={836} height={860} quality={100} />

*Railway requires a valid GitHub account to be linked. If your Railway account isn't associated with one, you will be prompted to link it.*

- Search for your GitHub project and click on it.

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752559/docs/quick-start/new_github_project_pzvabz.png"
alt="screenshot of new project menu with nextjs repo selected"
layout="responsive"
width={836} height={596} quality={100} />

- Choose either **Deploy Now** or **Add variables**.
    
    **Deploy Now** will immediately start to build and deploy your selected repo.
    
    **Add Variables** will bring you to your service and ask you to add variables, when done you will need to click the **Deploy** button at the top of your canvas to initiate the first deployment.
    
    *For brevity we will choose **Deploy Now**.*
    

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752558/docs/quick-start/deploy_now_pmrqow.png"
alt="screenshot of new project menu with deploy now option selected"
layout="responsive"
width={836} height={620} quality={100} />

When you click **Deploy Now**, Railway will create a new project for you and kick off an initial deploy after the project is created.

**Once the project is created you will land on your <a href="/overview/the-basics#project--project-canvas" target="_blank">Project Canvas</a>**.

<Image src="https://res.cloudinary.com/railway/image/upload/v1723752560/docs/quick-start/project_canvas_nextjs_c6bjbq.png"
alt="screenshot of the project canvas showing environment variables configuration"
layout="responsive"
width={1363} height={817} quality={100} />

From here Railway will automatically -

- Detect your Next.js configuration

- Configure the appropriate Node.js version

- Build your application

- Run your application

### Environment Configuration

Next.js applications often rely on environment variables for API keys, database connections, and feature flags. Here's how to transfer them -

**From Vercel -**

1. Visit your Vercel project settings

2. Navigate to the Environment Variables tab

3. Export your variables (you can copy them directly)

**To Railway -**

1. Select your service in the Project Canvas

2. Open the Variables tab

3. Use the Raw Editor for bulk variable import

4. Click Deploy to apply changes

### Domain Configuration

Railway makes it simple to set up custom domains or use our provided domains -

1. Open your service's Settings

2. Navigate to the Public Networking section

3. Choose between:

    - Generating a Railway service domain

    - Adding your custom domain

4. Follow the DNS configuration steps if using a custom domain

### Deployment Verification

Before finalizing your migration:

1. Check your application's core functionality

2. Verify environment variables are properly set

3. Test dynamic routes and API endpoints

4. Confirm image optimization is working

5. Monitor build and runtime logs

Railway's integrated observability helps you catch any issues early in the migration process.

### Local Development

Railway makes local development seamless with your production environment:

1. Install the Railway CLI: `npm i -g @railway/cli`

2. Run `railway link` to connect to your project

3. Use `railway run` to start your app locally with production variables

This ensures development/production parity and helps catch issues before they reach production.

That's all it takes to move your Next.js application to Railway! Need help? Our [team and community](https://station.railway.com/) are always ready to assist.

Need more information on how we compare to Vercel? Check out our [comparison page](/maturity/compare-to-vercel).


================================================
FILE: src/docs/overview/about-railway.md
================================================
---
title: About Railway
description: Railway is a modern cloud deployment platform designed to help developers deploy instantly and scale apps effortlessly. Learn about our platform.
---

Railway is a deployment platform designed to streamline the software development life-cycle, starting with instant deployments and effortless scale, extending to CI/CD integrations and built-in observability.

## Deploying on Railway

Point Railway to your deployment source and let the platform handle the rest.

#### Flexible Deployment Sources
- **Code Repositories**: With or without Dockerfiles.  Railway will build an [OCI compliant image](https://opencontainers.org/) based on what you provide.
- **Docker Images**: Directly from Docker Hub, GitHub Container Registry, GitLab Container Registry, Microsoft Container Registry, or Quay.io.  We support public and private image registries.

#### Hassle-Free Setup
- **Sane Defaults**: Out of the box, your project is deployed with sane defaults to get you up and running as fast as possible.
- **Configuration Tuning**: When you're ready, there are plenty of knobs and switches to optimize as needed.

## Development Lifecycle

Software development extends far beyond code deployment.  Railway's feature set is tailor-made, and continuously evolving, to provide the best developer experience we can imagine.

#### Configuration Management
- **Variables & Secrets**: Easily manage configuration values and sensitive data with variable management tools.

#### Environment and Workflow
- **Environment Management**: Create both static and ephemeral environments to create workflows that complement your processes.
- **Orchestration & Tooling**: Build Railway into any workflow using our CLI or API.

#### Deployment Monitoring
- **Observability**: Keep a pulse on your deployments with Railway's built-in observability tools.

## Operational Model

Railway operates with an emphasis on reliability and transparency. We utilize a combination of alerting tools, internal systems, and operational procedures to maintain high uptime.  Read more about product philosophy and maturity [here](/maturity/philosophy).

## Book a Demo

Looking to adopt Railway for your business?  We'd love to chat!  [Click here to book some time with us](https://cal.com/team/railway/work-with-railway?duration=30).



================================================
FILE: src/docs/overview/advanced-concepts.md
================================================
---
title: Advanced Usage
description: A guide that outlines the advanced concepts of Railway.
---

This document outlines the more advanced concepts of Railway.  It covers things like build and deploy options, networking, integrations, and observability.

## Build and Deploy Options

Out of the box, many defaults are applied to builds and deployments.  However, there are several ways to tailor things to your project spec.

### Build Options

Railway uses <a href="https://nixpacks.com" target="_blank">Nixpacks</a> to build and deploy your code with zero configuration.  When your needs require adjustments to the defaults, we make it easy to configure things like install, build, and start commands.

### Deploy Options

Deployments are created with some default options that can be overridden.  Some of the options available are - 
- **Replicas**:  By default, your deployment will go out with a single instance.  With replicas, you have the ability to scale up your deployment instances.
- **Deployment Region**: Deployments by default are pushed to your [preferred region](https://railway.com/workspace).
- **Scheduled Executions**:  Your deployment will be run once by default.  If the service is intended to be a scheduled task of sorts, you can create a cron schedule.
- **App Sleep**:  Services are serverful and always-on.  You can control this behavior, to spin down resources when they're not being used, by enabling App Sleep.

## Networking

Networking can be tricky and time-consuming. We wanted to provide the best-in-class experience when it came to wiring things up.  There are two basic ways we accomplish this.

### Private Networking

Private Networking is a feature within Railway that will open network communication through a IPv6 wireguard mesh only accessible to your Railway services within a project.

All projects have private networking enabled and services are assigned a DNS name under the `railway.internal` domain. This DNS name resolves to the internal IPv6 address of the services in a project.

### Railway-Provided Domains

With the click of a button, Railway will expose your service to the internet and provide you with a domain.  In order to make this work, you must configure your application appropriately to ensure we know the port it is listening on.  Instructions for how to do this can be found in the [Public Networking guide](/guides/public-networking).

#### Custom Domains

If you have a custom domain, you can easily add it to your Railway service.

## Integration Tools

A <a href="https://docs.railway.com/guides/cli" target="_blank">CLI</a> and an <a href="https://docs.railway.com/guides/public-api" target="_blank">API</a> are available to wire your Railway projects into any workflow.

### CLI

The Railway Command Line Interface (CLI) lets you interact with your Railway project from the command line, allowing you to do things like:
- Trigger deployments programmatically.
- Run services locally using environment variables from your Railway project.
- Create new Railway projects from the Terminal.
- Deploy <a href="https://docs.railway.com/reference/templates" target="_blank">templates</a>.

### Public API

The Railway <a href="https://docs.railway.com/guides/public-api" target="_blank">public API</a> is built with GraphQL and is the same API that powers the Railway dashboard.  Similar to the CLI, you can interact with your Railway project programmatically by communicating with the API.

## Environments

Railway environments give you an isolated instance of all databases and services in a project. You can use them to

- Have development environments for each team member that are identical to the production environment
- Have separate staging and production environments

Within a service and environment, you can specify which branch to auto-deploy to that environment when a change is merged.

## Observability

Any build or deployment logs emitted to standard output or standard error `( eg. console.log(...))` are captured by Railway so you can view or search for it later.

### Service Logs

Logs for a specific service deployment are available from a service's view in your project, useful when debugging build or deployment failures.

### Centralized Logs

Logs for all of the services in a project can be viewed together in our Observability tool within a project. This is useful for debugging more general problems that may span multiple services.



================================================
FILE: src/docs/overview/best-practices.md
================================================
---
title: Best Practices
description: Learn the best practices to maximize performance, efficiency, and scalability of your apps on Railway.
---
{/**
To keep consistency we want each topic to follow the same convention -
- What?
- When?
- Do X.
- Why?
- Image.
*/}


Railway is a highly versatile platform, offering various ways to use it, though some may be less optimal than others for most use cases. These topics aim to help you maximize both your potential and the platform's capabilities.

## Use Private Networking When Possible

[Private networking](/reference/private-networking) allows services within a [project](/overview/the-basics#project--project-canvas) to communicate internally without the need to expose them [publicly](/guides/public-networking), while also providing faster communication and increased throughput.

When configuring environment variables in your service to reference domains or URLs of other services, ensure you use the private versions of these variables, such as `RAILWAY_PRIVATE_DOMAIN` or `DATABASE_URL`.

Using the private network enables communication between services within the same project without incurring service-to-service egress costs, which is particularly beneficial when interacting with databases or other internal services.

<Image src="https://res.cloudinary.com/railway/image/upload/v1725659271/docs/best-practices/use_private_networking_son2xp.png"
alt="screenshot of a service showing the use of private networking via reference variables"
layout="intrinsic"
width={1048} height={818} quality={100} />

<span style={{'font-size': "0.9em"}}>Screenshot showing the use of the `RAILWAY_PRIVATE_DOMAIN` [variable](/reference/variables#railway-provided-variables) being used via [referencing](/guides/variables#reference-variables).</span>

## Deploying Related Services Into the Same Project

In Railway, a [project](/overview/the-basics#project--project-canvas) serves as a container for organizing infrastructure. It can encompass an application stack, a group of [services](/overview/the-basics#services), or even multiple service groups.

If you're about to head back to the [dashboard](/overview/the-basics#dashboard--projects) to deploy another service like a database, there's a quicker way - look for the `Create` button at the top right of the Project canvas. This shortcut allows you to add new services directly to your current project.

There are a few key advantages of keeping related services within the same project -

- **Private networking** - The private network is scoped to a single environment within a project, having all related services within a single project will allow you to use private networking for faster networking along with no egress fees for service-to-service communication.

- **Project clutter** - Deploying a new service or database as an entire project will quickly become overwhelming and clutter your dashboard.

- **Variable management** - Variables can be referenced between services within a project, reducing redundancy and making it easier to manage instead of having to manually copy variables between services.

<Image src="https://res.cloudinary.com/railway/image/upload/v1725659271/docs/best-practices/related_services_in_a_project_mtxuis.png"
alt="screenshot of the project canvas showing multiple linked services"
layout="intrinsic"
width={1048} height={818} quality={100} />

<span style={{'font-size': "0.9em"}}>Screenshot showing related services within a project and their connection links.</span>

## Use Reference Variables Where Applicable

[Reference variables](/guides/variables#reference-variables) allow you to dynamically reference another variable, either from a variable set on the current [service](/overview/the-basics#services) or from another service in the same [project](/overview/the-basics#project--project-canvas).

Rather than manually copying, pasting, and hard-coding variables like a public domain or those from another service, you can use reference variables to build them dynamically. Example `VITE_BACKEND_HOST=${{Backend.RAILWAY_PUBLIC_DOMAIN}}`

This approach is better than hard-coding variables, as it keeps your variable values in sync. Change your [public domain](/reference/public-domains)? The variable updates. Change your [TCP proxy](/reference/tcp-proxy)? The variable updates.

<Image src="https://res.cloudinary.com/railway/image/upload/v1725659271/docs/best-practices/use_reference_variables_h8qtik.png"
alt="screenshot of a service showing the use of reference variables"
layout="intrinsic"
width={1048} height={818} quality={100} />

<span style={{'font-size': "0.9em"}}>Screenshot showing a reference variable used to reference the Backend's domain.</span>



================================================
FILE: src/docs/overview/the-basics.md
================================================
---
title: The Basics
description: Learn about the core concepts of Railway.
---

This document outlines the core concepts of Railway, providing foundational knowledge of the basic building blocks you'll work with in the platform.

## In a Nutshell

- **[Dashboard](#dashboard--projects)** - Main entrypoint for all projects under your account.
- **[Project](#project--project-canvas)** - A collection of services under the same network.
  - **[Project Settings](#project-settings)** - Contains all project-level settings.
- **[Service](#services)** - A target for a deployment source (e.g. Web Application).
  - **[Service Variables](#service-variables)** - A collection of configurations and secrets.
  - **[Backups](#backups)** - A collection of backups for a service.
  - **[Service Metrics](#service-metrics)** - Rundown of metrics for a service.
  - **[Service Settings](#service-settings)** - Contains all service-level settings.
- **[Deployment](#deployments)** - Built and deliverable unit of a service.
- **[Volumes](#volumes)** - Persistent storage solution for services.
  - **[Volume Metrics](#volume-metrics)** - Rundown of metrics for volumes (e.g. disk usage over time).
  - **[Volume Settings](#volume-settings)** - Contains all volume-level settings.

## Dashboard / Projects

Your main entrypoint to Railway where all your [projects](/overview/the-basics#project--project-canvas) are shown in the order they where last opened.

Projects contain your [services](/overview/the-basics#services) and [environments](/reference/environments).

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785111/docs/the-basics/dashboard_ycmxnk.png"
alt="Screenshot of the Railway dashboard"
layout="responsive"
width={1305} height={735} quality={100} />

## Project / Project Canvas

A project represents a capsule for composing infrastructure in Railway.  You can think of a project as an application stack, a service group, or even a collection of service groups.

Services within a project are automatically joined to a [private network](/reference/private-networking) scoped to that project.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785173/docs/the-basics/project_canvas_dxpzxe.png"
alt="Screenshot of the project canvas"
layout="responsive"
width={1365} height={765} quality={100} />

### Project Settings

This page contains all the project level settings.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785164/docs/the-basics/project_settings_ghwzih.png"
alt="Screenshot of the project settings page"
layout="responsive"
width={1365} height={765} quality={100} />

Some of the most commonly used project settings are -

- [Transfer Project](/reference/teams#transferring-projects) - Transfer your project between workspaces.

- [Environments](/reference/environments) - Manage various settings regarding environments.

- [Members](/reference/project-members) - Add or remove members to collaborate on your project.

- Danger - Remove individual [services](/overview/the-basics#services) or delete the entire project.

## Services

A Railway service is a deployment target for your deployment source. Deployment sources can be [code repositories](https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories) or [Docker Images](https://docs.docker.com/guides/docker-concepts/the-basics/what-is-an-image/). Once you create a service and choose a source, Railway will analyze the source, build a Docker image (if the source is a code repository), and deploy it to the service.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785212/docs/the-basics/services_zuyl56.png"
alt="Screenshot of the project canvas with services highlighted"
layout="responsive"
width={1365} height={765} quality={100} />

Out of the box, your service is deployed with a set of default configurations which can be overridden as needed.

### Service Variables

Service [Variables](/reference/variables) provide a powerful way to manage configuration and secrets across services in Railway.

You can configure variables scoped to services. These variables are specific to each service and are not shared across the project by default.

If you want to access variables from this service in another service within the same project, you need to utilize a [Reference Variable](/reference/variables#reference-variables).

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785219/docs/the-basics/service_variables_galkry.png"
alt="Screenshot of the service variables tab"
layout="responsive"
width={1365} height={765} quality={100} />

### Backups

If your service has a [volume](/overview/the-basics#volumes) attached, this is where you can manage backups.

Backups are incremental and Copy-on-Write, we only charge for the data exclusive to them, that aren't from other snapshots or the volume itself.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785142/docs/the-basics/backups_fdx09o.png"
alt="Screenshot of the service backups tab"
layout="responsive"
width={1365} height={765} quality={100} />

From here you can perform the following actions -

- Create a backup - Manually create a backup of the volume with a press of a button.

- Delete a backup - Remove a backup from the list via the backup's 3-dot menu.

- Lock a backup - Prevent a backup from being deleted via the backup's 3-dot menu.

- [Restore a backup](/reference/backups#how-to-restore-a-backup) - Click the `Restore` button on the backup.

- Modify the backup schedule - Click the `Edit schedule` button on the header to make changes to the schedule.

### Service Metrics

Service [Metrics](/reference/metrics) provide an essential overview of CPU, memory, and network usage for a given service.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785153/docs/the-basics/service_metrics_dcbfms.png"
alt="Screenshot of the service metrics tab"
layout="responsive"
width={1365} height={770} quality={100} />

### Service Settings

This tab contains all the service level settings.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785132/docs/the-basics/service_settings_lnyql0.png"
alt="Screenshot of the service settings tab"
layout="responsive"
width={1365} height={765} quality={100} />

Some of the most commonly used service settings are -

- [Source](/reference/services#service-source) - Here you can configure the deployment source, which can be either a GitHub repository with a specific branch or an image with optional credentials.

- [Networking](/guides/public-networking#railway-provided-domain) - Generate a Railway-provided domain or add your own custom one.

- Custom Build Command - Here you can configure a custom build command if you need to overwrite the default, only applicable with [Nixpacks](https://nixpacks.com/docs) based builds.

- Custom Start Command - Here, you can configure a custom start command if you need to overwrite the default.

## Deployments

[Deployments](/reference/deployments) involve building and delivering your [Service](/overview/the-basics#services).

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785123/docs/the-basics/deployment_l0trj8.png"
alt="Screenshot of a service open with a deployment highlighted"
layout="responsive"
width={1365} height={790} quality={100} />

## Volumes

[Volumes](/reference/volumes) are a feature that allows services on Railway to [maintain persistent data](/guides/volumes).

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785187/docs/the-basics/volumes_yom2km.png"
alt="Screenshot of the project canvas with a volume highlighted"
layout="responsive"
width={1365} height={765} quality={100} />

### Volume Metrics

Volume Metrics show the amount of data stored in the volume and its maximum capacity.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785205/docs/the-basics/volume_metrics_thv60n.png"
alt="Screenshot of the volume metrics tab"
layout="responsive"
width={1365} height={826} quality={100} />

### Volume Settings

This tab contains all the volume centric settings.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785195/docs/the-basics/volume_settings_kirpdn.png"
alt="Screenshot of the volume settings tab"
layout="responsive"
width={1365} height={826} quality={100} />

Some of the most commonly used volume settings are -

- Mount path - The absolute path where the volume will be mounted within the deployed service.

- Volume Size - Displays the current volume capacity and offers the option to expand it if your plan permits.

- Wipe Volume - This action wipes all data in the volume and then redeploys the connected service.

## What Next?

If you've read enough for now and are ready to get started, we suggest checking out either of these two resources next -

- [Quick Start guide](/quick-start) to deploy a To Do app from a [template](/reference/templates).

- [Guides section](/guides/foundations) to dive into how things work.

If you want to go deeper, click the Next button below to head to the next section - [Advanced Concepts](/overview/advanced-concepts).


================================================
FILE: src/docs/reference/accounts.md
================================================
---
title: Accounts
description: Learn about Railway Accounts
---

Railway Accounts are how a user interacts with the Railway platform.

Users are only allowed one account per person. This is enforced through email, GitHub, and payment method verification.

## Account Settings

<Image src="https://res.cloudinary.com/railway/image/upload/v1743471483/docs/account-settings_najujk.png"
alt="Screenshot of Account Navigation"
layout="responsive"
width={1200} height={857} quality={80} />

The account settings page is accessible by clicking the profile photo in the top right and selecting <a href="https://railway.com/account" target="_blank">Account Settings</a>.

### Account Information

Accounts can change their display name, profile photo, and account email under <a href="https://railway.com/account" target="_blank">Account Settings</a>.

### Deleting an Account

Selecting "Delete Account" at the bottom of the <a href="https://railway.com/account" target="_blank">Account Settings</a> page will delete an account. All data related to the account will be deleted.

After a successful confirmation, Railway deletes all account information, project data, and removes the account from all email lists.

We aim to be compliant with EU GDPR’s data removal provisions.

## Account Security

<Image src="https://res.cloudinary.com/railway/image/upload/v1631917786/docs/sessions_qo0lhw.png"
alt="Screenshot of Sessions Page"
layout="responsive"
width={1162} height={587} quality={80} />

Railway is committed to you and your project's security. We provide a variety of methods to help keep users' peace of mind.

### Two-factor Authentication

Two-factor authentication can be enabled under the Account Security page. Most TOTP applications are supported.

After scanning the provided QR code and entering the code for the initial pairing of the application, 2FA will require additional verification for login and destructive actions.

### Account Sessions

Users can view all active browser and CLI sessions on the <a href="https://railway.com/account/security" target="_blank">account security page</a>. Revoking a session will immediately log that device out.

## Referrals

<Image src="https://res.cloudinary.com/railway/image/upload/v1631917786/docs/referrals_cash_ashj73.png"
alt="Screenshot of Referrals Page"
layout="responsive"
width={1141} height={604} quality={80} />

Every account has an editable referral link. Users can copy and share their personal referral link to earn cash or credits.

Upon every invoice a referral pays, the user who referred them receives 15% commission on that revenue.

Users can view their referral invite status on the <a href="https://railway.com/account/referrals" target="_blank">referrals page</a>, and their total earnings on the <a href="https://railway.com/account/earnings" target="_blank">earnings page</a>.

## Billing

Accounts are billed monthly. Resources used by deleted projects up until deletion are still counted towards the total bill.

Users can manage their billing information as well as view historical payments on the <a href="https://railway.com/workspace/billing" target="_blank">billing page</a>.

## Link Discord Account

Within Account settings, link a Discord account with a Railway account to gain access to additional features on the <a href="https://discord.gg/railway" target="_blank">Railway Discord server</a>.

If the Discord user has not joined the Railway Discord server, linking the account will automatically invite the user to the server.

### Discord Support

Discord users can access the <a href="https://discord.gg/railway" target="_blank">Railway Discord server</a> to get help from the Railway team and other users.

### Priority Boarding Enrollment

For the most adventurous, we offer a beta program called Priority Boarding. Integration with Discord is required. To learn more, visit [Priority Boarding](/reference/priority-boarding).



================================================
FILE: src/docs/reference/app-sleeping.md
================================================
---
title: Serverless
description: Learn how Serverless reduces cost usage on Railway.
---

_Note: This feature is formerly called: App-Sleeping_

Serverless allows you to increase the efficiency of resource utilization on Railway and may reduce the usage cost of a [service](/reference/services), by ensuring it is running only when necessary.

## How it Works

When Serverless is enabled for a service, Railway automatically detects inactivity based on outbound traffic.

#### Inactive Service Detection

Inactivity is based on the detection of any outbound packets, which could include network requests, database connections, or even NTP. If no packets are sent from the service for over 10 minutes, the service is considered inactive.

Some things than can prevent a service from being put to sleep -

- Keeping active database connections open, such as a database connection pooler.
- Frameworks that report telemetry to their respective services, such as [Next.js](https://nextjs.org/telemetry).
- Making requests to other services in the same [project](/overview/the-basics#project--project-canvas) over the [private network](/reference/private-networking).
- Making requests to other Railway services over the public internet.
- Making requests to external services over the public internet.
- Receiving traffic from other services in the same project over the private network.
- Receiving traffic from other Railway services over the public internet.
- Receiving traffic from external services over the public internet.

It's important to note that the networking graph in the metrics tab only displays public internet traffic. If you're using a private network to communicate with other services, this traffic won't appear in the metrics tab. However, it's still counted as outbound traffic and will prevent the service from being put to sleep.

#### Waking a Service Up

A service is woken when it receives traffic from the internet or from another service in the same project through the [private network](/reference/private-networking).

The first request made to a slept service wakes it. It may take a small amount of time for the service to spin up again on the first request (commonly known as "cold boot time").

## Caveats

- There will be a small delay in the response time of the first request sent to a slept service (commonly known as "cold boot times")
- For Railway to put a service to sleep, a service must not send _outbound_ traffic for at least 10 minutes. Outbound traffic can include telemetry, database connections, NTP, etc. Inbound traffic is excluded from considering when to sleep a service.
- Enabling Serverless will apply the setting across all [Replicas](/reference/scaling#horizontal-scaling-with-replicas)
- Slept services still consume a slot on our infrastructure, enabling Serverless de-prioritizes your workload and in remote cases, may require a rebuild to re-live the service.

## Support

For information on how to enable Serverless on your services refer to the [how to guide](/guides/optimize-usage#enabling-app-sleeping).



================================================
FILE: src/docs/reference/backups.md
================================================
---
title: Backups
description: Learn how Railway handles backups for volume contents to ensure data safety and recovery.
---

The backup feature enables data recovery for all content stored in [volumes](/reference/volumes). This includes both our database offerings and any other data stored within a volume, such as an SQLite database.

## How it works

When a [volume](/reference/volumes) is mounted to a service, backups can be manually created, deleted and restored. And they can also be scheduled to run on a Daily / Weekly / Monthly schedule.

## Backup Schedules

Backups can be scheduled to run on a daily, weekly or monthly basis. They will be kept for a number of days / months based on the schedule.

You can set the schedule in the service settings panel, under the Backups tab.

- **Daily** - Backed up every 24 hours, kept for 6 days
- **Weekly** - Backed up every 7 days, kept for 1 month
- **Monthly** - Backed up every 30 days, kept for 3 months

You can select multiple backup schedules for a single volume. These schedules can be modified at any time, and you can also manually trigger backups as needed.

## How to restore a backup

The available backups for a volume are listed in the attached [service's](/overview/the-basics#services) Backups tab.

<Image src="https://res.cloudinary.com/railway/image/upload/v1737785142/docs/the-basics/backups_fdx09o.png"
alt="Screenshot of the service backups tab"
layout="responsive"
width={1365} height={765} quality={100} />

To restore a backup, first locate the backup you want to restore via its date stamp, then click the `Restore` button on the backup.

**Note:** Depending on the size of the backup, this may take a few seconds to a few minutes to complete.

Once completed, we will [stage the change](/guides/staged-changes) for you to review, click the `Details` button at the top of the [project canvas](/overview/the-basics#project--project-canvas) to view the changes.

During this process, you will see a new [volume](/overview/the-basics#volumes) mounted to the same location as the original volume, its name will be the date stamp of the backup.

The previous volume will be retained but has been unmounted from the service, it will have the original volume name such as `silk-volume`.

**Note:** Restoring a backup will remove any newer backups you may have created after the backup you are restoring, you will still have access to backups older than the one you are restoring.

If everything looks good and you're ready to proceed, click the `Deploy` button to complete the restore.

The changes will be applied and your service will be redeployed.


## Pricing

Backups are incremental and Copy-on-Write, we only charge for the data exclusive to them, that aren't from other snapshots or the volume itself.

You are only billed for the incremental size of the backup at a rate per GB / minutely, and invoiced monthly. Backups follow the same pricing as Volumes. You can find [specific per-minute pricing here](/reference/pricing/plans#resource-usage-pricing).

## Volume Backup Limits

Volume backups have size limitations based on the volume capacity:

- **Manual backups** are limited to 50% of the volume's total size
- This limitation applies to prevent backup operations from consuming excessive storage resources
- If your data exceeds this threshold, consider growing your volume capacity before creating backups or reaching out to support to raise the limit

## Caveats

Backups are a newer feature that is still under development. Here are some limitations of which we are currently aware:

- Backup incremental sizes are cached for a couple of hours when listed in the frontend, so they may show slightly stale data.
- Wiping a volume deletes all backups.
- Backups can only be restored into the same project + environment.




================================================
FILE: src/docs/reference/build-and-start-commands.md
================================================
---
title: Build and Start Commands
description: Learn how to configure build and start commands.
---

Railway uses [Nixpacks](/reference/nixpacks) to build and deploy your code with zero configuration.  Build and Start commands are automatically detected when an image is built and deployed to a [service](/reference/services) in Railway.

If necessary, build and start commands can be manually configured.

## How it Works

Overrides are exposed in the service configuration to enable customizing the Build and Start commands.  When an override is configured, Railway uses the commands specified to build and start the service.

#### Build Command

The command to build the service, for example `yarn run build`. Override the detected build command by setting a value in your service settings.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743192207/docs/build-command_bwdprb.png"
alt="Screenshot of Railway Build Command"
layout="responsive"
width={1200} height={373} quality={80} />

#### Start Command

Railway automatically configures the start command based on the code being deployed.  

If your service deploys with a [Dockerfile](/reference/dockerfiles) or from an [image](/reference/services#docker-image), the start command defaults to the `ENTRYPOINT` and / or `CMD` defined in the Dockerfile.

Override the detected start command by setting a value in your service settings.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1637798815/docs/custom-start-command_a8vcxs.png"
alt="Screenshot of custom start command configuration"
layout="intrinsic"
width={1302} height={408} quality={80} />

If you need to use environment variables in the start command for services deployed from a Dockerfile or image you will need to wrap your command in a shell -

```shell
/bin/sh -c "exec python main.py --port $PORT"
```

This is because commands ran in exec form do not support variable expansion.

## Support

For more information on how to configure builds, check out the [Builds](/guides/builds) guide section.

For more information on how to configure a service's deployment lifecycle, like the Start command, check out the [Deployments](/guides/deployments) guide section.



================================================
FILE: src/docs/reference/cli-api.md
================================================
---
title: CLI Reference
description: Learn about the Railway CLI commands.
---
The Railway Command Line Interface (CLI) lets you interact with your
Railway project from the command line.

This document describes the commands available in the CLI.

For information on how to install the CLI and more examples of usage, see the [CLI guide](/guides/cli).

## Add

*Add a service to your project*

```txt
~ railway add --help
Add a service to your project

Usage: railway add [OPTIONS]

Options:
  -d, --database <DATABASE>
          The name of the database to add

          [possible values: postgres, mysql, redis, mongo]

  -s, --service [<SERVICE>]
          The name of the service to create (leave blank for randomly generated)

  -r, --repo <REPO>
          The repo to link to the service

  -i, --image <IMAGE>
          The docker image to link to the service

  -v, --variables <VARIABLES>
          The "{key}={value}" environment variable pair to set the service variables. Example:

          railway add --service --variables "MY_SPECIAL_ENV_VAR=1" --variables "BACKEND_PORT=3000"

      --json
          Output in JSON format

  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version
```

## Completion

*Generate a shell-completions for the following shells: `bash`, `elvish`, `fish`, and `powershell`*
```txt
~ railway completion --help
Generate completion script

Usage: railway completion [OPTIONS] <SHELL>

Arguments:
  <SHELL>  [possible values: bash, elvish, fish, powershell, zsh]

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Connect

*Connect to a database's shell (`psql` for Postgres, `mongosh` for MongoDB, etc.)*

```txt
~ railway connect --help
Connect to a database's shell (psql for Postgres, mongosh for MongoDB, etc.)

Usage: railway connect [OPTIONS] [SERVICE_NAME]

Arguments:
  [SERVICE_NAME]  The name of the database to connect to

Options:
  -e, --environment <ENVIRONMENT>  Environment to pull variables from (defaults to linked environment)
      --json                       Output in JSON format
  -h, --help                       Print help
  -V, --version                    Print version
```

This requires you to have the database's appropriate shell/client installed in your `$PATH`:

* Postgres: `psql` (https://www.postgresql.org/docs/current/app-psql.html)
* Redis: `redis-cli` (https://redis.io/docs/ui/cli/)
* MongoDB: `mongosh` (https://www.mongodb.com/docs/mongodb-shell/)
* MySQL: `mysql` (https://dev.mysql.com/doc/refman/8.0/en/mysql.html)

## Deploy

*Deploy a template into your project*

```txt
railway deploy --help
Provisions a template into your project

Usage: railway deploy [OPTIONS]

Options:
  -t, --template <TEMPLATE>  The code of the template to deploy
  -v, --variable <VARIABLE>  The "{key}={value}" environment variable pair to set the template variables
          To specify the variable for a single service prefix it with "{service}." Example:
          bash railway deploy -t postgres -v "MY_SPECIAL_ENV_VAR=1" -v "Backend.Port=3000"

      --json                 Output in JSON format
  -h, --help                 Print help (see a summary with '-h')
  -V, --version              Print version

```

## Domain

*Create a domain for a service*

```txt
~ railway domain --help
Add a custom domain or generate a railway provided domain for a service

Usage: railway domain [OPTIONS] [DOMAIN]

Arguments:
  [DOMAIN]  Optionally, specify a custom domain to use. If not specified, a domain will be generated

Options:
  -p, --port <PORT>        The port to connect to the domain
  -s, --service <SERVICE>  The name of the service to generate the domain for
      --json               Output in JSON format
  -h, --help               Print help (see more with '--help')
  -V, --version            Print version
```

## Docs

*Open the Railway documentation site in the default browser*

```txt
~ railway docs --help
Open Railway Documentation in default browser

Usage: railway docs [OPTIONS]

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version```
```

## Down

*Remove the most recent deployment*

```txt
~ railway down --help
Remove the most recent deployment

Usage: railway down [OPTIONS]

Options:
  -y, --yes      Skip confirmation dialog
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Environment

*Create, delete or link an environment*

```txt
~ railway [env]ironment --help
Create, delete or link an environment

Usage: railway environment [OPTIONS] [ENVIRONMENT] [COMMAND]

Commands:
  new     Create a new environment
  delete  Delete an environment [aliases: remove, rm]
  help    Print this message or the help of the given subcommand(s)

Arguments:
  [ENVIRONMENT]  The environment to link to

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```
View [environment docs](/reference/environments) for more information.

If you run `railway environment` without specifying a name, you will be prompted
with an environment selector that lists all your environments for the project.

### railway environment new

*Create a new environment*

```txt
~ railway [env]ironment new --help
Create a new environment

Usage: railway environment new [OPTIONS] [NAME]

Arguments:
  [NAME]
          The name of the environment to create

Options:
  -d, --duplicate <DUPLICATE>
          The name of the environment to duplicate

          [aliases: copy]
          [short aliases: c]

  -v, --service-variable <SERVICE> <VARIABLE>
          Variables to assign in the new environment

          Note: This will only work if the environment is being duplicated, and that the service specified is present in the original environment

          Examples:

          railway environment new foo --duplicate bar --service-variable <service name/service uuid> BACKEND_PORT=3000

      --json
          Output in JSON format

  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version
```

### railway environment delete

*Delete an environment*

```txt
~ railway [env]ironment delete --help
Delete an environment

Usage: railway environment delete [OPTIONS] [ENVIRONMENT]

Arguments:
  [ENVIRONMENT]  The environment to delete

Options:
  -y, --yes      Skip confirmation dialog
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

**Note**: `railway environment delete` will not work if an account has 2FA and the terminal is not being run interactively.

## Init
*Create a new Project from the CLI*

```txt
~ railway init --help
Create a new project

Usage: railway init [OPTIONS]

Options:
  -n, --name <NAME>  Project name
      --json         Output in JSON format
  -h, --help         Print help
  -V, --version      Print version
```

## Link

*Connect to an existing Railway project*

```txt
~ railway link --help
Associate existing project with current directory, may specify projectId as an argument

Usage: railway link [OPTIONS]

Options:
  -e, --environment <ENVIRONMENT>  Environment to link to
  -p, --project <PROJECT>          Project to link to
  -s, --service <SERVICE>          The service to link to
  -t, --team <TEAM>                The team to link to. Use "personal" for your personal account
      --json                       Output in JSON format
  -h, --help                       Print help
  -V, --version                    Print version
```

Running `link` with no project ID will prompt you to select a team and project.

## List

*List all projects in your Railway account*

```txt
~ railway list --help
List all projects in your Railway account

Usage: railway list [OPTIONS]

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Login

*Login to your Railway account*

```txt
~ railway login --help
Login to your Railway account

Usage: railway login [OPTIONS]

Options:
  -b, --browserless  Browserless login
      --json         Output in JSON format
  -h, --help         Print help
  -V, --version      Print version
```

This will open the browser to `https://railway.com/cli-login`.

### Browserless

If you are in an environment where the terminal cannot open a web browser, (i.e.
SSH session or [Codespaces](https://github.com/features/codespaces)), you can
perform a _browserless_ login.

```txt
~ railway login --browserless
Browserless Login
Please visit:
  https://railway.com/cli-login?d=SGVsbG8sIGtpbmQgc3RyYW5nZXIhIFRoYW5rcyBmb3IgcmVhZGluZyB0aGUgZG9jdW1lbnRhdGlvbiEgSSBob3BlIHlvdSdyZSBoYXZpbmcgYSB3b25kZXJmdWwgZGF5IDopCg==
Your pairing code is: friendly-malicious-electric-soup

Logged in as Nebula (nebula@railway.com)
```

This will prompt you to go to a URL (you can copy and paste) and present you
with a 4 word code that you need to verify. If the codes match, click "Verify"
and you will be logged in.

## Logout

*Logout of your Railway account*

```txt
~ railway logout --help
Logout of your Railway account

Usage: railway logout [OPTIONS]

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Logs

*View logs for the most recent deployment*

```txt
~ railway logs --help
View the most-recent deploy's logs

Usage: railway logs [OPTIONS]

Options:
  -d, --deployment  Show deployment logs
  -b, --build       Show build logs
      --json        Output in JSON format
  -h, --help        Print help
  -V, --version     Print version
```

## Open

*Open your current Railway project in the browser*

```txt
~ railway open --help
Open your project dashboard

Usage: railway open [OPTIONS]

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Run

*Run a command using the Railway environment*

```txt
~ railway run --help
Run a local command using variables from the active environment

Usage: railway run [OPTIONS] [ARGS]...

Arguments:
  [ARGS]...  Args to pass to the command

Options:
  -s, --service <SERVICE>          Service to pull variables from (defaults to linked service)
  -e, --environment <ENVIRONMENT>  Environment to pull variables from (defaults to linked environment)
      --json                       Output in JSON format
  -h, --help                       Print help
  -V, --version                    Print version
```

This also injects all environment variables associated with the databases you have
installed in your project.

## Service
*Link a service to the current project*

```txt
~ railway service --help
Link a service to the current project

Usage: railway service [OPTIONS] [SERVICE]

Arguments:
  [SERVICE]  The service to link

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Shell

*Create a subshell (based on `$SHELL`) with all the variables from your project/environment/service loaded and accessible*

```txt
~ railway shell --help
Open a subshell with Railway variables available

Usage: railway shell [OPTIONS]

Options:
  -s, --service <SERVICE>  Service to pull variables from (defaults to linked service)
      --json               Output in JSON format
  -h, --help               Print help
  -V, --version            Print version
```

## SSH

*SSH into a project/service*

```txt
~ railway ssh --help
Connect to a service via SSH

Usage: railway ssh [OPTIONS] [COMMAND]...

Arguments:
  [COMMAND]...  Command to execute instead of starting an interactive shell

Options:
  -p, --project <PROJECT>
          Project to connect to (defaults to linked project)
  -s, --service <SERVICE>
          Service to connect to (defaults to linked service)
  -e, --environment <ENVIRONMENT>
          Environment to connect to (defaults to linked environment)
  -d, --deployment-instance <deployment-instance-id>
          Deployment instance ID to connect to (defaults to first active instance)
      --json
          Output in JSON format
  -h, --help
          Print help
  -V, --version
          Print version
```

## Status

*View the status of your Railway project and user*

```txt
~ railway status --help
Show information about the current project

Usage: railway status [OPTIONS]

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Unlink

*Disconnects the current directory from Railway*

```txt
~ Disassociate project from current directory

Usage: railway unlink [OPTIONS]

Options:
  -s, --service  Unlink a service
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```
You will need to rerun `railway link` to use `railway` in this directory again.

## Up

*Deploy a directory to your Railway project*

```txt
~ railway up --help
Upload and deploy project from the current directory

Usage: railway up [OPTIONS] [PATH]

Arguments:
  [PATH]

Options:
  -d, --detach                     Don't attach to the log stream
  -c, --ci                         Only stream build logs and exit after it's done
  -s, --service <SERVICE>          Service to deploy to (defaults to linked service)
  -e, --environment <ENVIRONMENT>  Environment to deploy to (defaults to linked environment)
      --no-gitignore               Don't ignore paths from .gitignore
      --verbose                    Verbose output
      --json                       Output in JSON format
  -h, --help                       Print help
  -V, --version                    Print version
```
If no path is provided, the top linked directory is deployed. The currently selected environment is used.

## Variables

*View a table of all the environment variables associated with your project and environment*

```txt
~ railway variables --help
Show variables for active environment

Usage: railway variables [OPTIONS]

Options:
  -s, --service <SERVICE>          The service to show/set variables for
  -e, --environment <ENVIRONMENT>  The environment to show/set variables for
  -k, --kv                         Show variables in KV format
      --set <SET>                  The "{key}={value}" environment variable pair to set the service variables. Example:
                                      railway variables --set "MY_SPECIAL_ENV_VAR=1" --set "BACKEND_PORT=3000"
      --json                       Output in JSON format
  -h, --help                       Print help (see a summary with '-h')
  -V, --version                    Print version
```

## Whoami

*View what user is currently authenticated with Railway*

```txt
~ railway whoami --help
Get the current logged in user

Usage: railway whoami [OPTIONS]

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```

## Volume

*Manage project volumes with options to list, add, delete, update, attach, and detach volumes*

```txt
~ railway volume --help
Manage project volumes

Usage: railway volume [OPTIONS] <COMMAND>

Commands:
  list    List volumes
  add     Add a new volume
  delete  Delete a volume
  update  Update a volume
  detach  Detach a volume from a service
  attach  Attach a volume to a service
  help    Print this message or the help of the given subcommand(s)

Options:
  -s, --service <SERVICE>          Service ID
  -e, --environment <ENVIRONMENT>  Environment ID
      --json                       Output in JSON format
  -h, --help                       Print help
  -V, --version                    Print version
```

## Redeploy

*Redeploy the currently deployed version of a service*

```txt
~ railway redeploy --help
Redeploy the latest deployment of a service

Usage: railway redeploy [OPTIONS]

Options:
  -s, --service <SERVICE>  The service ID/name to redeploy from
  -y, --yes                Skip confirmation dialog
      --json               Output in JSON format
  -h, --help               Print help
  -V, --version            Print version
```

## Help

*Help command reference*

```txt
~ railway help
Interact with Railway via CLI

Usage: railway [OPTIONS] <COMMAND>

Commands:
  add          Add a service to your project
  completion   Generate completion script
  connect      Connect to a database's shell (psql for Postgres, mongosh for MongoDB, etc.)
  deploy       Provisions a template into your project
  domain       Generates a domain for a service if there is not a railway provided domain
  docs         Open Railway Documentation in default browser
  down         Remove the most recent deployment
  environment  Change the active environment
  init         Create a new project
  link         Associate existing project with current directory, may specify projectId as an argument
  list         List all projects in your Railway account
  login        Login to your Railway account
  logout       Logout of your Railway account
  logs         View a deploy's logs
  open         Open your project dashboard
  run          Run a local command using variables from the active environment
  service      Link a service to the current project
  shell        Open a local subshell with Railway variables available
  status       Show information about the current project
  unlink       Disassociate project from current directory
  up           Upload and deploy project from the current directory
  variables    Show variables for active environment
  whoami       Get the current logged in user
  volume       Manage project volumes
  redeploy     Redeploy the latest deployment of a service
  help         Print this message or the help of the given subcommand(s)

Options:
      --json     Output in JSON format
  -h, --help     Print help
  -V, --version  Print version
```



================================================
FILE: src/docs/reference/config-as-code.md
================================================
---
title: Config as Code
description: Learn how to manage and deploy apps on Railway using config as code with toml and json files.
---

Railway supports defining the configuration for a single deployment in a file
alongside your code. By default, we will look for a `railway.toml` or
`railway.json` file. 

Everything in the build and deploy sections of the service
settings can be specified in this configuration file.

## How does it work?

When a new deployment is triggered, Railway will look for any config files in your
code and combine these values with the settings from the dashboard. 

The resulting build and deploy config will be used **only for the current deployment**.


The settings in the dashboard will not be updated with the settings defined in
code.

Configuration defined in code will always override values from the
dashboard.

## Config Source Location

On the deployment details page, all the settings that a deployment went out with are shown. For settings that come from a configuration file, there is a little file icon. Hovering over the icon will show exactly what part of the file the values originated from.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743195106/docs/configuration_emrjth.png"
alt="Screenshot of Deployment Details Pane"
layout="responsive"
width={1200} height={631} quality={100} />

## Configurable Settings

{/* codegen:start do not edit this comment */}
### Specify the Builder

Set the builder for the deployment.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  }
}
```

Possible values are:
- `NIXPACKS`
- `DOCKERFILE`

Note: Railway will always build with a Dockerfile if it finds one. To build with nixpacks, you can remove or rename the Dockerfile.

Read more about Builds [here](/guides/builds).


### Watch Patterns

Array of patterns used to conditionally trigger a deploys.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "watchPatterns": ["src/**"]
  }
}
```

Read more about watch patterns [here](/guides/build-configuration#configure-watch-paths).

### Build Command

Build command to pass to the Nixpacks builder.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "buildCommand": "yarn run build"
  }
}
```

This field can be set to `null`.

Read more about the build command [here](/reference/build-and-start-commands#build-command).

### Dockerfile Path

Location of non-standard Dockerfile.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "dockerfilePath": "Dockerfile.backend"
  }
}
```

This field can be set to `null`.

More about building from a Dockerfile [here](/reference/dockerfiles).

### Nixpacks Config Path

Location of a non-standard [Nixpacks](https://nixpacks.com/docs/configuration/file) config file.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "nixpacksConfigPath": "backend_nixpacks.toml"
  }
}
```

This field can be set to `null`.

### Nixpacks Plan

Full nixpacks plan. See [the Nixpacks documentation](https://nixpacks.com/docs/configuration/file) for more info.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "nixpacksPlan": {
      "providers": ["python", "node"],
      "phases": {
        "install": {
          "dependsOn": ["setup"],
          "cmds": ["npm ci"]
        }
      }
    }
  }
}
```

This field can be set to `null`.

You can also define specific options as follows.

In this example, we are adding ffmpeg to the setup phase.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "nixpacksPlan": {
      "phases": {
        "setup": {
          "nixPkgs": ["...", "ffmpeg"]
        }
      }
    }
  }
}
```

#### Custom Install Command

Use nixpacksPlan to configure a custom install command.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "nixpacksPlan": {
      "phases": {
        "install": {
          "dependsOn": ["setup"],
          "cmds": ["npm install --legacy-peer-deps"]
        }
      }
    }
  }
}
```

### Nixpacks Version

EXPERIMENTAL: USE AT YOUR OWN RISK!.

Version of Nixpacks to use. Must be a valid Nixpacks version. 

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "build": {
    "nixpacksVersion": "1.29.1"
  }
}
```

This field can be set to `null`.

You can also use the `NIXPACKS_VERSION` [configuration variable](https://docs.railway.com/reference/variables#user-provided-configuration-variables) to set the Nixpacks version.

### Start Command

The command to run when starting the container.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "startCommand": "node index.js"
  }
}
```

This field can be set to `null`.

Read more about the start command [here](/reference/build-and-start-commands#start-command).

### Pre-deploy Command

The command to run before starting the container.

```json

{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "preDeployCommand": ["npm run db:migrate"]
  }
}
```

This field can be ommitted.

Read more about the pre-deploy command [here](/guides/pre-deploy-command).

### Multi-region Configuration

Horizontal scaling across multiple regions, with two replicas in each region.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "multiRegionConfig": {
      "us-west2": {
        "numReplicas": 2
      },
      "us-east4-eqdc4a": {
        "numReplicas": 2
      },
      "europe-west4-drams3a": {
        "numReplicas": 2
      },
      "asia-southeast1-eqsg3a": {
        "numReplicas": 2
      }
    }
  }
}
```

This field can be set to `null`.

Read more about horizontal scaling with multiple regions [here](/reference/scaling#multi-region-replicas).

### Healthcheck Path

Path to check after starting your deployment to ensure it is healthy.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "healthcheckPath": "/health"
  }
}
```

This field can be set to `null`.

Read more about the healthcheck path [here](/reference/healthchecks).

### Healthcheck Timeout

Number of seconds to wait for the healthcheck path to become healthy.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "healthcheckPath": "/health",
    "healthcheckTimeout": 300
  }
}
```

This field can be set to `null`.

Read more about the healthcheck timeout [here](/reference/healthchecks).

### Restart Policy Type

How to handle the deployment crashing.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "restartPolicyType": "ALWAYS"
  }
}
```

Possible values are:
- `ON_FAILURE`
- `ALWAYS`
- `NEVER`

Read more about the Restart policy [here](/guides/restart-policy).

### Restart Policy Max Retries

Set the max number of retries for the restart policy.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "restartPolicyType": "ALWAYS",
    "restartPolicyMaxRetries": 5
  }
}
```

This field can be set to `null`.

Read more about the Restart policy [here](/guides/restart-policy).

### Cron Schedule

[Cron schedule](/reference/cron-jobs) of the deployed service.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "cronSchedule": "*/15 * * * *"
  }
}
```

This field can be set to `null`.

### Setting Environment Overrides

Configuration can be overridden for a specific environment by nesting it in a
`environments.[name]` block.

When resolving the settings for a deployment, Railway will use this priority order:
1. Environment specific config in code
2. Base config in code
3. Service settings

The following example changes the start command just in the production
environment.

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "environments": {
    "staging": {
      "deploy": {
        "startCommand": "npm run staging"
      }
    }
  }
}
```

#### PR Environment Overrides

Deployments for pull requests can be configured using a special `pr` environment. This configuration is applied only to deploys that belong to an ephemeral environment. When resolving the settings for a PR deployment, the following priority order is used:
1. Environment with the name of the ephemeral environment
2. Environment with the hardcoded name "pr"
3. Base environment of the pull request
4. Base config as code
5. Service settings

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "environments": {
    "pr": {
      "deploy": {
        "startCommand": "npm run pr"
      }
    }
  }
}
```

### Configuring a Build provider with Nixpacks

To define a build provider ahead of time, create a `nixpacks.toml` file and configure it like so:
```toml
providers = ["...", "python"]
```

### Deployment Teardown

You can configure [Deployment Teardown](/guides/deployment-teardown) settings to tune the behavior of zero downtime deployments on Railway.

#### Overlap Seconds

Time in seconds that the previous deploy will overlap with the newest one being deployed. Read more about the deployment's lifecycle [here](/reference/deployments).

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "overlapSeconds": "60"
  }
}
```

This field can be set to `null`.

#### Draining Seconds

The time in seconds between when the previous deploy is sent a SIGTERM to the time it is sent a SIGKILL. Read more about the deployment's lifecycle [here](/reference/deployments).

```json
{
  "$schema": "https://railway.com/railway.schema.json",
  "deploy": {
    "drainingSeconds": "10"
  }
}
```

This field can be set to `null`.


================================================
FILE: src/docs/reference/cron-jobs.md
================================================
---
title: Cron Jobs
description: Learn how to run cron jobs on Railway.
---

Cron Jobs allow you to start a service based on a crontab expression. 

## How it Works

Railway will look for a defined cron schedule in your service settings, and execute the start command for that service on the given schedule.  The service is expected to execute a task, and exit as soon as that task is finished, not leaving any resources open, such as database connections. More on [execution requirements](/reference/cron-jobs#service-execution-requirements) below.

#### Scheduling Libraries

If you are already using a scheduling library or system in your service such as [node-cron](https://www.npmjs.com/package/node-cron) or [Quartz](http://www.quartz-scheduler.org/), Railway cron jobs are a substitute of them that allows you to save resources between executions.

## Service Execution Requirements

Scheduled services should exit as soon as they are done with the task they are responsible to perform. Thus, the process should close any connections, such as database connections, to exit properly.

Currently, Railway does not automatically terminate deployments. As a result, if a previous execution is still running when the next scheduled execution is due, Railway will skip the new cron job.

## Crontab Expressions

A crontab expression is a scheduling format used in Unix-like operating systems to specify when and how often a command or script should be executed automatically. 

Crontab expressions consists of five fields separated by spaces, representing different units of time. These fields specify the minute, hour, day of the month, month, and day of the week when the command should be executed.

```
* * * * *
│ │ │ │ │
│ │ │ │ └─────────── Day of the week (0 - 6)
│ │ │ └───────────── Month (1 - 12)
│ │ └─────────────── Day of the month (1 - 31)
│ └───────────────── Hour (0 - 23)
└─────────────────── Minute (0 - 59)
```

The values of these fields can be an asterisk `*`, a list of values separated by commas, a range of values (using `-`), step values (using `/`) or an integer value.

#### Field Definitions

- **Minute (0-59)**: Represents the minute of the hour when the command should be executed. An asterisk (`*`) denotes any value, meaning the command will be executed every minute, or you can specify a specific minute value (e.g., 0, 15, 30).

- **Hour (0-23)**: Represents the hour of the day when the command should be executed. You can specify a specific hour value (e.g., 0, 6, 12), or use an asterisk (`*`) to indicate any hour.

- **Day of the month (1-31)**: Represents the day of the month when the command should be executed. You can specify a specific day value (e.g., 1, 15, 31), or use an asterisk (`*`) to indicate any day.

- **Month (1-12)**: Represents the month when the command should be executed. You can specify a specific month value (e.g., 1, 6, 12), or use an asterisk (`*`) to indicate any month.

- **Day of the week (0-7, where both 0 and 7 represent Sunday)**: Represents the day of the week when the command should be executed. You can specify a specific day value (e.g., 0-Sunday, 1-Monday, etc.), or use an asterisk (`*`) to indicate any day of the week.

Note that schedules are based on UTC (Coordinated Universal Time).

## Frequency

The shortest time between successive executions of a cron job cannot be less than 5 minutes.

## Examples

- Run a command every hour at the 30th minute: `30 * * * *`

- Run a command every day at 3:15 PM: `15 15 * * *`

- Run a command every Monday at 8:00 AM: `0 8 * * 1`

- Run a command every month on the 1st day at 12:00 AM: `0 0 1 * *`

- Run a command every Sunday at 2:30 PM in January: `30 14 * 1 0`

- Run a command every weekday (Monday to Friday) at 9:30 AM: `30 9 * * 1-5`

- Run a command every 15 minutes: `*/15 * * * *`

- Run a command every 2 hours: `0 */2 * * *`

- Run a command every 2nd day of the month at 6:00 AM: `0 6 2 * *`

## FAQ

### When to use Railway's cron jobs?

- For short-lived tasks that complete quickly and exit properly, such as a daily database backup.
- When you want to save resources between task executions, as opposed to having an in-code scheduler run 24/7.

### When not to use Railway's cron jobs?

- For long-running processes that don't exit, such as a web server or discord bot.
- When you need more frequent execution than every 5 minutes.
- When you need absolute time precision. Railway does not guarantee execution times to the minute as they can vary by a few minutes.

### What time zone is used for cron jobs?

Cron jobs are scheduled based on UTC (Coordinated Universal Time).

You will need to account for timezone offsets when setting your cron schedule.

## Support

For information on how to configure cron jobs, refer to [this guide](/guides/cron-jobs).



================================================
FILE: src/docs/reference/databases.md
================================================
---
title: Databases
description: Database services on Railway.
---

Railway can support any type of Database service required for an application stack.

Databases can be deployed into a Railway project from a template, or by creating one through the service creation flow.

## How Database Services Work in Railway

Below are the core concepts to understand when working with databases in Railway.

#### Services
Railway services are containers deployed from a Docker Image or code repository, usually with environment variables defined within the service configuration to control the behavior of the service.

#### Volumes
When deploying a database service, data can be persisted between rebuilds of the container by attaching a Volume to the service.

#### TCP Proxy
To access a database service from outside the private network of a particular project, proxy traffic to the exposed TCP port by enabling TCP Proxy on the service.

## Database Templates

Many database templates are available to Railway users, which ease the process of deploying a database service.

### Railway-provided Templates

Railway provides several templates to provision some of the most popular databases out there.  They also deploy with a helpful [Database View](/guides/database-view).  

Explore the guides in the How To section for information on how to use these templates - 
- [PostgreSQL](/guides/postgresql)
- [MySQL](/guides/mysql)
- [MongoDB](/guides/mongodb)
- [Redis](/guides/redis)


### Template Marketplace

Our <a href="https://railway.com/templates" target="_blank">Template Marketplace</a> includes many solutions for database services.

Here are some examples - 
- [Minio](https://railway.com/template/SMKOEA)
- [ClickHouse](https://railway.com/template/clickhouse)
- [Dragonfly](https://railway.com/template/dragonfly)
- [Chroma](https://railway.com/template/kbvIRV)

## Support

Explore the [Databases](/guides/databases) guide section for more information on how to get started using databases in Railway.



================================================
FILE: src/docs/reference/deployment-regions.md
================================================
---
title: Deployment Regions
description: Deploy your apps across multiple regions worldwide with Railway’s powerful infrastructure.
---

Railway's infrastructure spans multiple regions across the globe. This allows you to deploy your applications closer to your users no matter where they are located. **This feature is only available to Pro plan workspaces.**

Consider factors like compliance needs and proximity to your users when choosing a region.

## Region Options
Railway has deploy regions in the Americas, Europe, and Asia-Pacific to provide broad coverage around the world.

Within the service settings, you can select one of the following regions -

| Name                 | Location               | Region Identifier        |
|----------------------|------------------------|--------------------------|
| US West Metal        | California, USA        | `us-west2`               |
| US East Metal        | North Carolina, USA    | `us-east4-eqdc4a`        |
| EU West Metal        | Amsterdam, Netherlands | `europe-west4-drams3a`   |
| Southeast Asia Metal | Singapore              | `asia-southeast1-eqsg3a` |

*Additional regions may be added in the future as Railway continues expanding its infrastructure footprint.*

**Note:** The region identifier is the value that can be used in your [Config as Code file](/reference/config-as-code#multi-region-configuration).

By default, Railway deploys to your preferred region, you can change this in your [Account Settings](https://railway.com/workspace).

All regions provide the same experience, performance, and reliability you expect from Railway.

## Impact of Region Changes

The region of a service can be changed at any time, without any changes to your domain, private networking, etc.

There will be no downtime when changing the region of a service, except if it has a volume attached to it (see below).

### Volumes

Volumes follow the region of the service to which they are attached.

If you change the region of a service with an attached volume, the volume will need to be migrated to the new region.

<Image
    quality={100}
    src="https://res.cloudinary.com/railway/image/upload/v1695660986/docs/volume_migrate_modal.png"
    alt="Volume"
    width={669}
    height={678}
/>

Note that this migration can take a while depending on the size of the volume, and will cause downtime of your service during that time.

<Image
    quality={100}
    src="https://res.cloudinary.com/railway/image/upload/v1695661106/docs/volume_migration.png"
    alt="Volume"
    width={732}
    height={483}
/>


The same is true if you attach a detached volume to a service in a different region. It will need to be migrated to the new region, which can take a while and cause downtime.



================================================
FILE: src/docs/reference/deployments.md
================================================
---
title: Deployments
description: Deployments are attempts to build and deliver your service. Learn how they work on Railway.
---

Deployments are attempts to build and deliver your [service](/reference/services).

All deployments will appear in the deployments view on your selected service.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1645148376/docs/deployment-photo_q4q8in.png"
alt="Screenshot of Deploy View"
layout="responsive"
width={1103} height={523} quality={80} />

## How it Works

Upon service creation, or when changes are detected in the service source, Railway will build the service and package it into a container with [Nixpacks](https://nixpacks.com/docs) or a [Dockerfile](/guides/dockerfiles) if present. If the source is a Docker Image, the build step is skipped.

Railway then starts the service using either the detected or configured [Start Command](/reference/build-and-start-commands).

This cycle represents a deployment in Railway.

## Deployment States

A comprehensive up to date list of statues can be found in [Railway's GraphQL playground](https://railway.com/graphiql) under DeploymentStatus ([screenshot](https://res.cloudinary.com/railway/image/upload/v1737950391/docs/deploy-statuses.png)).

Deployments can be in any of the following states:

#### Initializing

Every Deployment in Railway begins as `Initializing` - once it has been accepted into our build queue, the status will change to `Building`.

#### Building

While a Deployment is `Building`, Railway will attempt to create a deployable Docker image containing your code and configuration (see [Builds](/guides/builds)).

#### Deploying

Once the build succeeds, Railway will attempt to deploy your image and the Deployment's status becomes `Deploying`. If a [healthcheck](/reference/healthchecks) is configured, Railway will wait for it to succeed before proceeding to the next step.

#### Failed

If an error occurs during the build or deploy process, the Deployment will stop and the status will become `Failed`.

#### Active

Railway will determine the deployment's active state with the following logic -

- If the deployment **has** a [healthcheck](/reference/healthchecks) configured, Railway will mark the deployment as `Active` when the healthcheck succeeds.

- If the deployment **does not** have a healthcheck configured, Railway will mark the deployment as `Active` after starting the container.

#### Completed

This is the status of the Deployment when the running app exits with a non-zero exit code.

#### Crashed

A Deployment will remain in the `Active` state unless it [crashes](/guides/deployment-actions#restart-a-crashed-deployment), at which point it will become `Crashed`.

#### Removed

When a new [Deployment](/overview/the-basics#deployments) is triggered, older deploys in a `Active`, `Completed`, or a `Crashed` state are eventually removed - first having their status updated to `Removing` before they are finally `Removed`. Deployments may also be [removed manually](/reference/deployments#remove).

The time from when a new deployment becomes `Active` until the previous deployment is removed can be controlled by setting a [`RAILWAY_DEPLOYMENT_OVERLAP_SECONDS`](/reference/variables#user-provided-configuration-variables) [service variable](/overview/the-basics#service-variables).

## Deployment Menu

The deployment menu contains actions you can take on a deployment.

**Note:** Some actions are only available on certain deployment states.

<Image
  src="https://res.cloudinary.com/railway/image/upload/v1726503037/docs/redeploy_remove_deploy_jescm0.png"
  alt="Deployment Menu"
  width={1007}
  height={690}
  quality={80}
/>

#### View logs

Opens the deployment up to the corresponding logs, during build the build logs will be shown, during deploy the deploy logs will be shown.

#### Restart

Restarts the process within the deployment's container, this is often used to bring a service back online after a crash or if you application has locked up.

#### Redeploy

Redeploys the selected deployment.

This is often used to bring a service back online after -

- A crash.
- A usage limit has been reached and raised.
- Upgrading to Hobby when trial credits were previously depleted.
- Being demoted from Hobby to free and then upgrading again.

**Notes** -

- The redeploy will use the source code from the selected deployment.

- Deployments older than your [plan's retention policy](/reference/pricing/plans#image-retention-policy) cannot be restored via rollback, and thus the rollback option will not be visible.

#### Rollback

Redeploys the selected deployment.

**Notes** -

- The rollback will use the source code from the selected deployment.

- Deployments older than your [plan's retention policy](/reference/pricing/plans#image-retention-policy) cannot be restored via rollback, and thus the rollback option will not be visible.

#### Remove

Stops the currently running deployment, this also marks the deployment as `REMOVED` and moves it into the history section.

#### Abort

Cancels the selected [initializing](#initializing) or [building](#building) deployment, this also marks the deployment as `REMOVED` and moves it into the history section.

## Ephemeral Storage

Every service deployment has access to 10GB of ephemeral storage. If a service deployment consumes more than 10GB, it can be forcefully stopped and redeployed.

If your service requires data to persist between deployments, or needs more than 10GB of storage, you should add a [volume](/reference/volumes).

## Singleton Deploys

By default, Railway maintains only one deploy per service.

In practice, this means that if you trigger a new deploy either [manually](/guides/deployment-actions#redeploy) or [automatically](/guides/github-autodeploys), the old version will be stopped and removed with a slight overlap for zero downtime.

Once the new deployment is online, the old deployment is sent a SIGTERM signal and given 3 seconds to gracefully shutdown before being forcefully stopped with a SIGKILL. We do not send any other signals under any circumstances.

The time given to gracefully shutdown can be controlled by setting a [`RAILWAY_DEPLOYMENT_DRAINING_SECONDS`](/reference/variables#user-provided-configuration-variables) [service variable](/overview/the-basics#service-variables).

## Railway Initiated Deployments

Occasionally, Railway will initiate a new deployment to migrate your service from one host to another. **This is primarily for your service's security and performance.**

We perform these migrations when implementing security patches or platform upgrades to the underlying infrastructure where your service was previously running. During platform-wide upgrades, your service might be redeployed multiple times as we roll out changes across our infrastructure. These deployments are mandatory and cannot be opted out of.

These Railway-initiated deployments will display with a banner above the Active deployment to clearly identify them.

## Deployments Paused - Limited Access

Railway's core offering is dynamic, allowing you to verticially or horizontally scale with little-to-no-notice. To offer this flexibility to customers, Railway takes the stance that Pro/Enterprise tiers may, in rare occassions, be prioritized above Free/Hobby tiers.

During periods where Pro/Enterprise users require additional resources, Railway may temporarily suspend resource allocation, including builds, to Free, and more rarely Hobby, customers.

<Image
  src="https://res.cloudinary.com/railway/image/upload/v1749837403/CleanShot_2025-06-13_at_10.55.34_2x_ks2adh.png"
  alt="Limited Access indicator shown during high traffic periods"
  layout="responsive"
  width={1200}
  height={479}
  quality={100}
/>

### During a Pause

- You'll see a "Limited Access" indicator in your dashboard
- New deployments will be queued rather than immediately processed
- All other Railway features remain fully functional
- No data or existing deployments are affected

### Continue Deploying During High Traffic

If you need to deploy immediately during a high traffic pause, you can upgrade to the Pro plan to bypass the deployment queue. Pro tier customers are not affected by deployment pausing and can continue deploying normally during high traffic periods.

### When Normal Operations Resume

- Queued deployments will automatically process in order
- You'll receive a notification when deployment capabilities are restored
- No action is required on your part

## Support

For information on how to manage your deployments, explore [the guides in this section](/guides/deployments).



================================================
FILE: src/docs/reference/dockerfiles.md
================================================
---
title: Dockerfiles
description: Learn Dockerfile configuration on Railway.
---

Use a Dockerfile to instruct Railway how to build a service.

## How it works

When building a service, Railway will look for and use a `Dockerfile` at the root of the source directory.

**Note:** For the automatic Dockerfile detection to work, the Dockerfile must be named `Dockerfile` with a capital D, otherwise Railway will not use it by default.

Railway notifies you when it's using the `Dockerfile` in the build process with the following message in the logs:
```shell
==========================
Using detected Dockerfile!
==========================
```

## Support

For more information, refer to the guide on [how to use Dockerfiles](/guides/dockerfiles).


================================================
FILE: src/docs/reference/environments.md
================================================
---
title: Environments
description: Understanding environments and their use cases in your Railway projects.
---

Railway environments give you an isolated instance of all services in a project.

## How it Works

All projects in Railway are created with a `production` environment by default.  Once a project has been created, new environments can be created and configured to complement any development workflow.

## Types of Environments

#### Persistent Environments

Persistent environments are intended to persist but remain isolated from production with regard to their configuration.

For example, it is a common pattern to maintain a `staging` environment that is configured to auto-deploy from a `staging` branch and with variables relevant to `staging`.

#### PR Environments

[PR Environments](/guides/environments#enable-pr-environments) are temporary.  They are created when a Pull Request is opened on a branch and are deleted as soon as the PR is merged or closed.

## Environment Isolation

All changes made to a service are scoped to a single environment. This means that you can make changes to a service in an environment without affecting other environments.

## Use Cases

Environments are generally used for isolating changes from the production environment, to iterate and test before pushing to production.

- Have development environments for each team member that are identical to the
production environment
- Have separate staging and production environments that auto-deploy when changes are made to different branches in a code repository.

## Support

Explore the [Environments](/guides/environments) guide for more information on how to use and manage environments.


================================================
FILE: src/docs/reference/errors.md
================================================
---
title: Errors
description: List of common errors when deploying to Railway—and how to resolve them.
---

{/**
The subpages of this page hold descriptions and solutions to common errors users may face
when deploying to Railway.

When adding a new page, please keep in mind that content on those pages
should be as detailed as possible, and link out to relevant docs when necessary.
We want to be consistent and complete. When in doubt, try to stick to this formula:

        - Error as page title
        - ## What This Error Means - A description of what the error means. Give users some context (add a screenshot if applicable)
        - ## Why This Error Can Occur - Explain why this error can occur.
        - ## Solution - How to solve the error. Solutions may have sections
          underneath it for language/framework/stack-specific solutions, e.g.:
            - Python
            - Go
            - ...
**/}

When deploying to Railway, you may encounter some errors that prevent your
application from working as expected.

These are pages that describe and provide solutions to errors that users commonly encounter.

- [Application Failed to Respond](/reference/errors/application-failed-to-respond)

- [No Start Command Could Be Found](/reference/errors/no-start-command-could-be-found)

- [405 Method Not Allowed](/reference/errors/405-method-not-allowed)

- [Nixpacks Was Unable to Generate a Build Plan for This App](/reference/errors/nixpacks-was-unable-to-generate-a-build-plan)

- [ENOTFOUND redis.railway.internal](/reference/errors/enotfound-redis-railway-internal)



================================================
FILE: src/docs/reference/functions.md
================================================
---
title: Functions
description: Write and deploy code from the Railway canvas without managing infrastructure or creating a git repository.
---

Write and deploy code from the Railway canvas without managing infrastructure or creating a git repository.
Functions are [Services](/reference/services) that run a single file of TypeScript code using the [Bun](https://bun.sh/) runtime.
Use them like any other Service, but without the overhead of a repository.

They are ideal for small tasks like handling webhooks, cron jobs, or simple APIs.


## Key features

- **Instant deploys**: Deploy code changes *in seconds*. No need to wait for a build step.
- **Import any NPM package**: Use any NPM package in your function. We will automatically install it for you when your code runs. Pin specific versions by using a `package@version` syntax in your imports, e.g. `import { Hono } from "hono@4"`
- **Use native Bun APIs**: Access [Bun APIs](https://bun.sh/docs/runtime/bun-apis) like `Bun.file()` and `Bun.serve()`.
- **Service variables**: Service [Variables](/reference/variables) are automatically available in the function editor via `import.meta.env`, `process.env`, or `Bun.env`
- **Attach volumes**: Persist data in your function using [Volumes](/reference/volumes).
- **Use Vim**: Enable Vim keybindings in the function editor by using the shortcut `Cmd+Option+V` on a Mac or `Ctrl+Alt+V` on Windows.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1738958871/docs/railway-functions-2_vk0umf.png"
alt="Screenshot of pre-deploy command configuration"
layout="intrinsic"
width={589} height={366} quality={80} />

## Limitations

- 1 file per function
- Max file size of 96KB

## Edit and Deploy

If you're familiar with VSCode or other IDEs, you'll feel right at home with our built-in editor.

- **To edit** your function, open the "Source Code" tab in your service.
- **To stage** your changes, press ⌘+S (or Control+S if using Windows).
- **To deploy** staged changes, press Shift+Enter.

## Versioning

Railway automatically versions your function code. Each time you deploy, a new version is created and is available for rollback.
To rollback or redeploy a previous version, find the [Deployment](/reference/deployments) you want to rollback to in the "Deployments" tab
of your service. Then click the "Redeploy" button.

You can find the source code of a previous deployment by opening the deployment details.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1738960017/docs/railway-functions-versions_jqdhal.png"
alt="Screenshot of pre-deploy command configuration"
layout="intrinsic"
width={588} height={499} quality={80} />



================================================
FILE: src/docs/reference/healthchecks.md
================================================
---
title: Healthchecks
description: Learn about healthchecks on Railway.
---

Healthchecks can be used to guarantee zero-downtime [deployments](/reference/deployments) of your [service](/reference/services) by ensuring the new version is live and able to handle requests.

## How it Works

When a new deployment is triggered for a service, if a healthcheck endpoint is configured, Railway will query the endpoint until it receives an HTTP `200` response.  Only then will the new deployment be made active and the previous deployment inactive.

#### Note About Continuous Monitoring

The healthcheck endpoint is currently ***not intended for continuous monitoring*** as it is only called at the start of the deployment, to ensure it is healthy prior to routing traffic to it.

If you are looking for a quick way to setup continuous monitoring of your service(s), check out the <a href="https://railway.com/template/p6dsil" target="_blank">Uptime Kuma template</a> in our template marketplace.

## Healthcheck Timeout

The default timeout on healthchecks is 300 seconds (5 minutes). If your application fails to serve a `200` status code during this allotted time, the deploy will be marked as failed.

This timeout is configurable in the service settings.

## Support

For information on how to configure healthchecks, click [here](/guides/healthchecks).


================================================
FILE: src/docs/reference/integrations.md
================================================
---
title: Integrations
description: Discover Railway’s out-of-the-box integrations and how they enhance your development process.
---

Railway offers integrations out of the box, as well as features to enable building your own integrations.

## Project Tokens

Project tokens can be used in environments where you cannot login (e.g. remote
servers or CI). You can create project tokens for a specific [Railway
environment](/reference/environments) on the project page.

<Image src="https://res.cloudinary.com/railway/image/upload/v1644622499/docs/projecttokens_lwjgat.png"
alt="Screenshot of Project Canvas"
layout="responsive"
width={1377} height={823} quality={100} />

Project tokens allow the CLI to access all the environment variables associated
with a specific project and environment. Use the token by setting the
`RAILWAY_TOKEN` environment variable and then running `railway run`.

```bash
RAILWAY_TOKEN=XXXX railway run
```

## Serverless Platforms

### Vercel

Use the <a href="https://vercel.com/changelog/railway-integration-postgres-redis-mysql" target="_blank">Railway Vercel
integration</a> to provide your production and preview deployments with access to your [Railway
environments](/develop/environments).

You can enable this integration in your project dashboard by connecting
to your Vercel account, specify a team, project, and production/preview
environments. We will then provide your production and preview deployments on Vercel
with all the environment variables needed to connect to your Railway
environments.

This allows you to keep production and preview deployment databases separate.

### Other Platforms

We are working on adding more integrations to various serverless platforms.
However, if you want to use Railway for a platform we do not support, you can
manually add the environment variables for any of your services (e.g. the `DATABASE_URL`
for Postgres) to the serverless platform.

## GitHub Integration

Railway supports GitHub personal or organizational repos, provided the Railway app is given the correct permissions.

### Railway Deployment Checks

GitHub Commits have a status check to indicate the status of the Railway build. This applies for both PRs and all commits that auto deploy to Railway.

## Doppler Secrets Management

It's common for developers to store secrets in environment variables. However, this can be a security risk if you accidentally commit your secrets to a public repository. To avoid this, you can use a secrets management tool to store your secrets in a secure location. Railway supports Doppler as a secrets management tool. You can use Doppler to manage your Railway environment variables using the Railway Integration that Doppler provides.

You can get instructions on how to use Doppler with Railway on the <a href="https://docs.doppler.com/docs/railway" target="_blank">Doppler Docs
integration</a>.



================================================
FILE: src/docs/reference/logging.md
================================================
---
title: Logging
description: Learn about log retention on Railway.
---

Logs for services deployed to Railway are available to diagnose issues or track performance.

## How it Works

Any build or deployment logs emitted to standard output or standard error (
eg. `console.log(...)`) are captured by Railway to be viewed or searched later.

## Log Retention

Depending on your plan, logs are retained for a certain amount of time.

| Plan          | Retention*    |
|---------------|---------------|
| Hobby / Trial | 7 days        |
| Pro           | 30 days       |
| Enterprise    | Up to 90 days |

_* Upgrading plans will immediately restore logs that were previously 
outside of the retention period._

## Viewing Logs

For information on how to view logs, head over to the [guide for using logs](/guides/logs).



================================================
FILE: src/docs/reference/metal-upgrade.md
================================================
---
title: Railway Metal Upgrade
description: Get information about Railway's move to Self-Hosted Metal
---

Railway is moving to self-hosted regions across the world called Railway Metal. This page provides information about the upgrade process to Railway Metal, what to expect, and how to manage the transition.

## What is Railway Metal?

Railway Metal is Railway's next-generation infrastructure built on hardware that we own and operate in datacenters around the world. This move enables better performance, lower costs, and unlocks new features.

For a comprehensive overview of Railway Metal, its benefits, and our roadmap, please visit the [Railway Metal](/railway-metal) documentation.

## Automatic Upgrades

As part of our transition to Railway Metal, Railway will automatically migrate eligible services. When this happens:

1. You'll see a new deploy initiated by Railway in your service
2. A notification banner will appear informing you about the upgrade
3. Your service will be redeployed on Railway Metal infrastructure

<Image
src="https://res.cloudinary.com/railway/image/upload/v1740604169/CleanShot_2025-02-26_at_16.04.18_2x_uayioh.png"
alt="Automatic upgrade banner"
layout="responsive"
width={940} height={236} quality={80} />

## What to Expect During the Upgrade

When your service is upgraded to Railway Metal:

- **Brief Downtime**: There may be a short period of downtime as your service is redeployed. To minimize this, ensure you have [Health Checks](/reference/healthchecks) configured.
- **Ephemeral Storage Reset**: Any ephemeral storage (like `/tmp` directories) will be wiped. Use [Volumes](/reference/volumes) for persistent data storage.
- **Same Behavior**: The upgrade behavior is identical to a manual redeploy of your service. Any effects you'd normally expect during a redeploy will apply here as well.
- **Region Change**: Your service may be moved to a different geographical location within the same region (e.g., from US West Oregon to US West California). This is normal and part of the migration to our own hardware.

## Eligibility for Automatic Upgrades

Services will be upgraded based on our [published timeline](/railway-metal#timeline). Currently:

- Services without volumes are eligible for automatic upgrade
- Services with volumes will be eligible starting in March 2025
- Certain features like Static IPs for Pro users aren't yet available on Railway Metal regions

## Managing the Upgrade

### If You Experience Issues

If you encounter any problems after the upgrade, you can roll back to the previous infrastructure by:

1. Clicking the **Rollback** button in the upgrade notification banner

<Image
src="https://res.cloudinary.com/railway/image/upload/v1740604169/CleanShot_2025-02-26_at_16.04.18_2x_uayioh.png"
alt="Automatic upgrade banner"
layout="responsive"
width={940} height={236} quality={80} />

### Manual Rollback

You can also manually roll back by:

1. Going to your service's **Settings → Deploy → Regions**
2. Selecting regions without the **Metal (New)** tag

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736970930/docs/m3_kvwdgd.png"
alt="Manual region selection"
layout="responsive"
width={1140} height={560} quality={80} />

### Opting In Early

If you'd like to upgrade to Railway Metal before your automatic migration:

1. Go to your service's **Settings → Deploy → Regions**
2. Select any region with the **Metal (New)** tag
3. Deploy your service to apply the change

## Cross-Region Considerations

If you have services that reference each other (particularly services with volumes), be aware that migrating only some services to Railway Metal may introduce latency if they end up in physically distant datacenters.

For example, if your application in US West (California) Railway Metal region communicates with a database in US West (Oregon), you may experience increased latency. In such cases, consider rolling back to the original region until all your services can migrate together.

## Getting Help

If you need assistance with your Railway Metal upgrade:

- Submit feedback through our [Central Station](https://station.railway.com/feedback/feedback-railway-metal-a41f03a1)
- Enterprise customers with $2,000/month committed spend can reach out via [Slack](/reference/support#slack)
- See our [FAQ on Railway Metal](/railway-metal#faq) for answers to common questions

Remember, this is a free upgrade for all users and is designed to provide an improved experience across all aspects of the Railway platform.



================================================
FILE: src/docs/reference/metrics.md
================================================
---
title: Metrics
description: Discover resource usage for your services on Railway via the Metrics tab.
---

Railway provides resource usage information on deployments within a service, which can be used to diagnose issues with a project's performance.

## How it Works

For each service, Railway captures metric data. These metrics are then made available in graphs within a service's panel, under the metrics tab.

## How it works - with multiple replicas

When a service has multiple replicas, the metrics from all replicas are summed up and displayed in the metrics tab, for example, if you have 2 replicas, each using 100 MB of memory, the memory usage displayed in the metrics tab will be 200 MB.

## Provided Metrics

The following metrics are provided:

- CPU
- Memory
- Disk Usage
- Network

## Viewing Metrics

For information on how to view and read metrics, visit [this guide](/guides/metrics).



================================================
FILE: src/docs/reference/migrate-to-railway-metal.md
================================================
---
title: Migrate to Railway Metal
description: Learn how to move self-migrate your services over to Railway Metal
---

This page will describe in detail the migration process when a service moves to Railway Metal.

We will cover: how to initiate a migration, how to best prepare for a migration, and what mechanically happens when you initiate a migration of your services to Railway Metal.

## What is Railway Metal?

Railway Metal is the next generation of Railway's underlying infrastructure. It is built on hardware that we own and operate in datacenters around the world. You can get more information about Railway Metal on the parent [documentation page here.](/railway-metal)

We announced on December 26th that we would be moving users to Railway Metal over a 6 month migration timeline.

**We expect all user workloads to be on Railway Metal by July 4th, 2025.**

Railway is **currently** initating migrations of user workloads to Railway Metal regions at off-peak times per region.

As such, we advise our customers to move all of their workloads to Railway Metal to avoid Railway initiated downtime.

## What does a migration to Railway Metal entail?

A migration to Railway Metal is just like any deployment on Railway that would happen if you changed the region setting to a different value.

Railway is built region agnostically, meaning, the choice of region doesn't impact the availibility of products or features depending on the region. In doing so, user workloads can be deployed into different geographic regions at will.

A migration to Railway Metal is a simple region change.

For Stateless deployments, meaning, a deployment with no volume- there is no downtime. Stateless deployments are just landing into a new region.

For services with a volume attached, or Stateful deployments, there is a brief 30-45 second period of downtime as the volume re-mounts into the new deployment. *This is exactly the same as the existing cross region deployment functionality that exists in Railway today.*

## Initiating a migration

You can initate a migration by selecting a region in the service settings pane with any label that has: `Metal (New)`

After you select the region, you will get the Staged Change anchored modal at the center top position of the project canvas.

By pressing: "Deploy", you initiate a migration to Railway Metal.

### What happens when my service is migrating?

When you change the value of the region within the service settings page, Railway is told to deploy into that region when the environment applies the staged change. In Railway's system, we process a deployment request from our queue triggering a build.

Depending on if the service is Stateful or Stateless- we then initiate one of two bespoke migration processes.

**For Stateless:** Railway rebuilds your application onto our Metal region, and after the container image is built, then is landed on a running host in one of our datacenters.

**For Stateful:** Railway detects if a volume is mounted to your service, if a volume is detected, Railway initates a volume migration and holds the deployment until the volume is ready to be mounted within the new region. The process is as follows:

1. Railway initates a backup of the volume for internal and customer use.
2. Railway makes the backup of the volume accessible on the project canvas in the original region.
3. Railway then copies the volume into the new region.
4. (Optional) If there are backups in the volume, we also copy those backups into the new region. *Depending on the number and size of backups, this incurs a time penalty on the migration.*
5. Railway then confirms the integrity of data.
6. Railway attempts a build of the deployment after the volume is confirmed to be accessible in the new region.
7. Railway mounts to the volume in the new region after a successful build.

During the process, as of 2025/05/13 - Railway is able to report the transfer speed and progress of the volume migration to users.

### What happens to writes on the DB on migrations that I initated?

Because Railway is copying the volume primitive using the same primitive that we use for the volume backup feature, writes persist until we unmount the running deployment of the DB. As such, you don't need to plan for downtime of your database except for the 30 to 40 seconds when a deployment remounts into the database.

## Preparing for migration

For production applications on Railway, we advise customers to make sure your service has configuration to ensure it's online between deployments. Railway by default, attempts to only deploy a new instance of your service only when your application is live and healthy. However, there are a number of additional measures you can take to increase resilience.

Before initiating a migration we recommend that users configure the following:
- [Healthchecks](/reference/healthchecks)
- [Build and start commands](/reference/build-and-start-commands)
- [Volume Backups](/reference/backups)
- [Deployment overlap](/reference/variables#user-provided-configuration-variables)
  - Configured by setting `RAILWAY_DEPLOYMENT_OVERLAP_SECONDS` within the Railway service variable settings

We also advise users to make sure that:

- Data is being written to disk instead of the ephermeral container storage
  - If unsure, you can check by SSHing into the container via the Railway CLI and running `ls` on the mount point.
- On your DB, that the version is pinned to a major version instead of `:latest` on the image source
- You are able to backup and restore your data
- You test in a development environment before you migrate your production environment

Railway is not responsible for data loss that occurs on re-deployment for data on the container's ephermeral disk.

## Post-migration

The Railway team throughout this period is checking in with all customers to ensure:

- They recieve their Metal seat discount
- Application performance is within customer expectations
- A great experience migrating with adequate communication

### Rollback

If you encounter any issues with your service after a Railway initated upgrade, you can
rollback to the previous version by clicking `Rollback` button in the banner
above.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736970652/docs/m4_rtxp2z.png"
alt="Automatic rollback"
layout="responsive"
width={1338} height={608} quality={80} />

### Manual rollback

To rollback manually, modify your service's `Settings -> Deploy -> Regions`
and select regions without the `Metal` tag.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1736970930/docs/m3_kvwdgd.png"
alt="Manual rollback"
layout="responsive"
width={1140} height={560} quality={80} />

The Railway team during this period has doubled the amount of staffing around on-call and support to ensure this transition goes smoothly for our users.

Any issues, comments, and concerns- [raise a thread on Station.](https://station.railway.com)



================================================
FILE: src/docs/reference/nixpacks.md
================================================
---
title: Nixpacks
description: Railway uses Nixpacks to build and deploy your code with zero configuration.
---

Railway uses <a href="https://nixpacks.com/docs" target="_blank">Nixpacks</a> to build and deploy your code with
zero configuration.

## Supported Languages

Currently, we support the following languages out of the box:
- [Bun](https://nixpacks.com/docs/providers/node#bun-support) (Experimental)
- [Clojure](https://nixpacks.com/docs/providers/clojure)
- [Cobol](https://nixpacks.com/docs/providers/cobol)
- [Crystal](https://nixpacks.com/docs/providers/crystal)
- [C#/.NET](https://nixpacks.com/docs/providers/csharp)
- [Dart](https://nixpacks.com/docs/providers/dart)
- [Deno](https://nixpacks.com/docs/providers/deno)
- [Elixir](https://nixpacks.com/docs/providers/elixir)
- [F#](https://nixpacks.com/docs/providers/fsharp)
- [Gleam](https://nixpacks.com/docs/providers/gleam)
- [Go](https://nixpacks.com/docs/providers/go)
- [Haskell](https://nixpacks.com/docs/providers/haskell)
- [Java](https://nixpacks.com/docs/providers/java)
- [Lunatic](https://nixpacks.com/docs/providers/lunatic)
- [Node](https://nixpacks.com/docs/providers/node)
- [PHP](https://nixpacks.com/docs/providers/php)
- [Python](https://nixpacks.com/docs/providers/python)
- [Ruby](https://nixpacks.com/docs/providers/ruby)
- [Rust](https://nixpacks.com/docs/providers/rust)
- [Scheme](https://nixpacks.com/docs/providers/scheme)
- [Staticfile](https://nixpacks.com/docs/providers/staticfile)
- [Swift](https://nixpacks.com/docs/providers/swift)
- [Scala](https://nixpacks.com/docs/providers/scala)
- [Zig](https://nixpacks.com/docs/providers/zig-lang)

## The Build Table / Build Plan

When Railway builds your app with Nixpacks a Build Plan will be printed **at the top** of the build logs.

This table displays a list of packages and commands that will be used in the build (and start) process for your application.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1722994637/docs/build_table_j6izfy.png"
alt="nixpacks build table"
layout="responsive"
width={1365} height={790} quality={80} />

## Support

If you have a language or feature that you want us to support, please don't hesitate to
reach out on <a href="https://discord.gg/xAm2w6g" target="_blank">Discord</a> or on the <a href="https://github.com/railwayapp/nixpacks/discussions/245" target="_blank">Nixpacks repo</a>.



================================================
FILE: src/docs/reference/priority-boarding.md
================================================
---
title: Priority Boarding
description: Priority Boarding is Railway's beta program for getting access early to new features. Learn how to be a part of it.
---

Priority Boarding is Railway's beta program. The Railway team is always working on pushing new beta features out to priority boarding. We also offer a Discord channel dedicated to this, allowing you to submit feedback. 

To read more about Priority Boarding, check out <a href="https://blog.railway.com/p/building-the-beta" target="_blank">Priority Boarding: The Journey to Get There</a>.

Learn how to join Priority Boarding [here](/guides/join-priority-boarding).



================================================
FILE: src/docs/reference/private-networking.md
================================================
---
title: Private Networking
description: Learn everything about private networking on Railway.
---

Private Networking refers to a feature within Railway that enables private communication between services in a project and environment. This is helpful for situations where you want to have a public gateway for your API but leave internal communication private.

## How it works

Under the hood, Railway is using encrypted Wireguard tunnels to create an IPv6 mesh network between all services within an environment. This allows traffic to route between services without exposing ports publicly.

**Note: You cannot use private networking to communicate with services in other environments.**

### Internal DNS

Every service in a project and environment gets an internal DNS name under the `railway.internal` domain that resolves to the internal IP address of the service. 

This allows communication between services in an environment without exposing any ports publicly. Any valid IPv6 traffic is allowed, UDP, TCP and HTTP.

<Image src="https://res.cloudinary.com/railway/image/upload/v1686946888/docs/CleanShot_2023-06-16_at_16.21.08_2x_lgp9ne.png"
alt="Preview of What The Guide is Building"
layout="intrinsic"
width={1310} height={420} quality={100} />

## Caveats

During the feature development process we found a few caveats that you should be aware of:

- Private networking is not available during the build phase.
- You will need to bind to a IPv6 port to receive traffic on the private network.
- We don't support IPv4 private networking.
- Private networking does not function between [environments](/reference/environments).

## Support

For information on how to use Private Networking, check out [this guide](/guides/private-networking).


================================================
FILE: src/docs/reference/production-readiness-checklist.md
================================================
---
title: Production Readiness Checklist
description: Ensure your app is production-ready with this comprehensive Railway checklist.
---

*Is your application ready for production?*

In this page, we'll explore key areas for production readiness, suggesting actions to take to address each one:

- [Performance and Reliability](#performance-and-reliability)
- [Observability and Monitoring](#observability-and-monitoring)
- [Quality Assurance](#quality-assurance)
- [Security](#security)
- [Disaster Recovery](#disaster-recovery)

---

## Performance and Reliability

Ensuring your application is performant and reliable under changing conditions like load and external latency is critical for production-readiness.  Consider taking the following actions to ensure your application is performant and reliable -

**&check; Serve your application from the right region**

- Deploying your application as close to your users as possible minimizes the number of network hops, reducing latency and improving performance.

    Railway offers multiple [deployment regions](/reference/deployment-regions) around the globe.

    You may also consider implementing a CDN to cache server responses on an edge network.

**&check; Use private networking between services**

- When communicating between services over the public network, latency is introduced by the network hops that requests must make to reach their destination.

    To reduce latency, ensure communication between services in the same project and environment happens over the [private network](/reference/private-networking).

**&check; Configure a restart policy**

- Services can crash for different reasons, frequently due to unhandled exceptions in code, and it is important to implement a strategy to mitigate performance degredation and user impact.

    Ensure that you have properly configured your services [restart policy](/guides/restart-policy).

**&check; Configure at least 2 replicas**

- If a service crashes or becomes unavailable due to a long-running request, your application could experience downtime or degraded performance.

    Increase the [number of replicas](/guides/optimize-performance#configure-horizontal-scaling) to at least 2, so if one instance of your service crashes or becomes unavailable, there is another to continue handling requests.

**&check; Confirm your compute capacity**

- The vCPU and memory capacity of your services greatly impacts their ability to perform efficiently.

    The compute allocation for your services is handled automatically by Railway, and the limits are determined by your chosen subscription [plan](/reference/pricing#plans).  You should review your plan limits and consider if upgrading is necessary to achieve the desired compute.

**&check; Consider deploying a database cluster or replica set**

- Data is critical to most applications, and you should ensure that the data layer in your stack is highly available and fault tolerant.

    Consider implementing a cluster or replica set, similar to the <a href="https://railway.com/template/q589Jl" target="_blank">Redis HA with Sentinel</a> template, to ensure that your data remains available even if one node becomes unstable.

    We are hard at work developing other templated solutions for more production-ready datastores, keep an eye on the template marketplace for more to become available.

---

## Observability and Monitoring

Observability and monitoring refers to tracking the health and performance of your application.  Consider taking the following actions to ensure you are able to track your application health -

**&check; Get familiar with the log explorer**

- When researching an application issue across multiple services, it can be disruptive and time-consuming to move between log views for each service individually.

    Familiarize yourself with the [Log Explorer](/guides/logs#log-explorer) so you can query logs across all of your services in one place.

**&check; Setup webhooks and email notifications**

- Ensure you are alerted if the [deployment status](/reference/deployments#deployment-states) of your services change.

    Enable email notifications in you Account Settings to receive these alerts via email.

    Setup [webhooks](/reference/deployments#deployment-states) to have the alerts sent to another system, like Slack or Discord.

*What's next for observability features in Railway?  We have a ton of ideas, but we would love to hear yours in our <a href="https://station.railway.com/feature-request/better-logging-support-1e6f5676" target="_blank">community forums</a>.*

---

## Quality Assurance

Quality assurance involves following practices to ensure changes to your application code meet quality standards before they are deployed to production.  Consider the following actions to ensure you're set up for success -

**&check; Implement check suites**

- Common practice is to run a suite of tests, scans, or other automated jobs against your code before it is merged into production.  You may want to configure your deployments to wait until those jobs have completed successfully before triggering a build.

  Enable [check suites](/guides/github-autodeploys#check-suites) to have Railway wait for your GitHub workflows to complete successfully before triggering a deployment.

**&check; Use environments**

- Maintaining separate environments for production and development is good practice for controlling changes in a production environment.

  Consider setting up [environments](/guides/environments) to properly test changes before merging to production.

  Additionally, [PR environments](/guides/environments#enable-pr-environments) can be enabled to create environments when PRs are opened on your production branch.

**&check; Use config as code**

- Along with your source code, you can maintain your Railway configuration in a `json` or `toml` file, enabling you to keep track of changes, just as you do with your source code.

    Take advantage of [config as code](/guides/config-as-code) to control and track changes to your Railway configuration.

**&check; Understand the deployment rollback feature**

- Introducing breaking changes to your application code is sometimes unavoidable, and it can be a headache reverting to previous commits.

    Be sure to check out the [deployment rollback feature](/guides/deployment-actions#rollback), in case you need to rollback to a previous deployment.

---

## Security

Protecting your application and user data from malicious threats and vulnerabilities is mission-critical in production applications.  Consider the following for peace of mind -

**&check; Use private networking**

- The easiest way to protect your services from malicious threats, is to keep them unexposed to the public network.

    Secure communication between services in the same project and environment by using the [private network](/reference/private-networking).

**&check; Implement a security layer**

- While Railway does have protections in place at the platform level, we do not currently offer a configurable service for users' applications.

   Consider using a service like Cloudflare that offers both WAF and DDoS mitigation, to protect your services against web threats and ensure availability and performance.

    *In the future, we would love to offer a native security solution.  If you agree, <a href="https://station.railway.com/feature-request/implement-a-waf-firewall-security-54fe2aaf" target="_blank">let us know</a>.*

---

## Disaster Recovery

Being prepared for major and unexpected issues helps minimize downtime and data loss.  Consider taking the following actions to ensure you are prepared -

**&check; Set up an instance of your application in two regions**

- In the event of a major disaster, an entire region may become unavailable.

    Using [deployment regions](/reference/deployment-regions), you can deploy an entire instance of your application in another region.

    To save on cost of running a separate instance of your application, use [App Sleep](/reference/app-sleeping) to turn down resource usage on the inactive services.

**&check; Regularly back up your data**

- Data is critical to preserve in many applications.  You should ensure you have a backup strategy in place for your data.

    Enable and configure [backups](/reference/backups) for your services with volumes to ensure you can restore your data in case of any data loss.

---

## Conclusion

Using a mix of native features and external tools, we hope you can feel confident that your applications on Railway meet the highest standards of performance, reliability, and security.

Remember, our team is always here to assist you with solutions.  Reach out in <a href="https://discord.com/channels/713503345364697088/1006629907067064482" target="_blank">Discord</a> or over email at [team@railway.com](mailto:team@railway.com) for assistance.

Finally, as suggested on several sections above, we are working tirelessly to give you the best experience imaginable on Railway.  If you have requests or suggestions, please <a href="https://station.railway.com" target="_blank">let us know</a>!



================================================
FILE: src/docs/reference/project-members.md
================================================
---
title: Project Members
description: Learn about the permissions for project members.
---

Project members can be invited to access any project.

<Image src="https://res.cloudinary.com/railway/image/upload/v1644620958/docs/MemberView_New_p0s3be.png"
alt="Screenshot of Project Team Members"
layout="responsive"
width={1377} height={823} quality={100} />

## Scope of Permissions

There are three scopes for project members -

1. **Owner**: full administration of the project.

2. **Editor**: Can create deployments, change project settings and add Editor and Viewer members.

    **Note:** Editors can not do destructive actions such as deleting services or deleting the project itself.

3. **Viewer**: Read only access to the project. Viewers can not make deploys or see environment variables.

The Project Owner is charged for the project's usage.


================================================
FILE: src/docs/reference/project-usage.md
================================================
---
title: Project Usage
description: Learn how users can see the resource usage of their projects.
---

Users are billed monthly based on the project's per-minute usage. All services within a project's environments contribute to the resources billed. You can find [specific per-minute pricing here](/reference/pricing/plans#resource-usage-pricing).

Users can see the usage of a project under <a href="https://railway.com/workspace/usage" target="_blank">the Usage page</a> within the Workspace settings.

<Image src="https://res.cloudinary.com/railway/image/upload/v1631917786/docs/project-usage_gd43fq.png"
alt="Screenshot of Expanded Project Usage Pane"
layout="intrinsic"
width={491} height={286} quality={80} />

### Billing Period Usage

This section outlines the current usage within a billing period, as well as any discounts and credits the user has applied to their account.

In addition to the current usage, the user can see their estimated resource usage for the current billing period.

### Usage by Project

The chart shows the cumulative usage for the billing period. If you delete a project, Railway will still count the usage towards your total.

The Current and Estimated cost metrics show the current resource usage and the estimated usage by the end of the billing period.



================================================
FILE: src/docs/reference/projects.md
================================================
---
title: Projects
description: Projects are containers for environments and services in Railway.
---

Projects are containers for environments and services in Railway.

If you are logged in, projects can be found on <a href="https://railway.com/dashboard" target="_blank">your project dashboard</a>.

## Project Canvas

<Image src="https://res.cloudinary.com/railway/image/upload/v1644620884/docs/ProjectPage_new_pa52tp.png"
alt="Screenshot of Project Canvas"
layout="responsive"
width={1377} height={823} quality={100} />

The project canvas is the default view for a project. Within it, a user can manage services and environments or select a service to view its configuration.

## Project Resources

- 100 GB outbound network bandwidth
- Ability to deploy multiple [services](/reference/services)
- Unlimited inbound network bandwidth
- Unlimited database services

## Project Visibility

Projects are private by default and only accessible to members of the project.

Projects can be made public, to be shared in a read-only state with anyone on the internet.

Public visibility is helpful for educators who want to show students how their projects look before a user deploys their own.

- Viewers don't need a Railway account to see the project
- Environment variables are private from viewers
- Services and Deployment logs are public

Find instructions for updating your project's visibility [here](/guides/projects#updating-project-visibility).

## Project Transfers

Projects can be transferred to other users or to Teams, depending on subscription plan.

- Project transfers to other users are only allowed for users subscribed to the [Hobby Plan](/reference/pricing#plans) (both the initiator and recipient of the transfer).

- Project transfers to [Teams](/reference/teams) are only allowed for users who are Admin members of an existing Team.  Teams are a feature of the [Pro Plan](/reference/pricing#plans).

Detailed instructions on how to transfer projects can be found [here](/guides/projects#transferring-projects).


================================================
FILE: src/docs/reference/public-api.md
================================================
---
title: Public API Reference
description: Learn about the Railway GraphQL Public API.
---

The Railway public API is built with GraphQL and is the same API that powers the Railway dashboard.

## Endpoint

The public API is accessible at the following endpoint:

```bash
https://backboard.railway.com/graphql/v2
```

## Authentication

To use the API, you will need an API token. There are three types of tokens you can create.

#### Team Token and Personal Token

You can create an API token by visiting the <a href="https://railway.com/account/tokens" target="_blank">tokens page</a> in your account settings.

- **Team tokens** are tied to a team and will have access to all the team's resources. This token cannot be used to access your personal resources on Railway so feel free to share it with your teammates.
- **Non-team tokens** will be tied to your Railway account and will have access to all your resources. Do not share this token with anyone else.

```bash
curl --request POST \
  --url https://backboard.railway.com/graphql/v2 \
  --header 'Authorization: Bearer <API_TOKEN_GOES_HERE>' \
  --header 'Content-Type: application/json' \
  --data '{"query":"query { me { name email } }"}'
```

#### Project Token

You can create a project token by visiting the tokens page in your project settings.

Project tokens are scoped to a specific environment within a project and can only be used to authenticate requests to that environment.

```bash
curl --request POST \
  --url https://backboard.railway.com/graphql/v2 \
  --header 'Project-Access-Token: <PROJECT_TOKEN_GOES_HERE>' \
  --header 'Content-Type: application/json' \
  --data '{"query":"query { projectToken { projectId environmentId } }"}'
```

## Schema

The Railway API supports introspection meaning you can use popular tools like [Postman](https://www.postman.com/) or [Insomnia](https://insomnia.rest/) to query the schema.  Simply set up your connection with the endpoint and Authorization token, and fetch the schema.

### API Collection File

We provide a collection file which can be imported into your preferred API client.  Once imported, you should only need to add your API token to get connected and start executing queries in the collection. Click [here](https://gql-collection-server.up.railway.app/railway_graphql_collection.json) to download it.

### GraphiQL Playground

Use our [GraphiQL playground](https://railway.com/graphiql) to view the schema and test your queries.

Make sure to set an Authorization header with an [auth token](/reference/public-api#authentication). Click the "Headers" tab at the bottom of the GraphiQL page and enter this json, using your own token:

```json
{"Authorization": "Bearer <API_TOKEN_GOES_HERE>"}
```

## Rate Limits

In order to protect the Railway API from spam and misusage, we have established some basic rate limits. The current limits to the API are:
- **1000** requests per **hour**
- Requests per second: **10** RPS for Hobby users; **50** RPS for Pro users; custom for Enterprise

To help you keep track of your usage, Railway sends a few headers with the response on each request.

| Header                | Description                                                                                                                                        |
| --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| X-RateLimit-Limit     | The maximum number of API requests allowed per day.                                                                                                |
| X-RateLimit-Remaining | The number of API requests your token can make in the current window.                                                                              |
| X-RateLimit-Reset     | The time at which the current window ends and your remaining requests reset.                                                                       |
| Retry-After           | The amount of time after which you can make another request. This header is only sent once you've used up all your requests in the current window. |

## Support

For more information on how to use the Public API and for examples of queries, view the [Public API guide](/guides/public-api).

If you run into problems using the API or have any suggestions, feel free to join our [Discord server](https://discord.gg/railway) where you can interact with the engineers working on the API directly.



================================================
FILE: src/docs/reference/public-domains.md
================================================
---
title: Public Domains
description: Learn about public domains on Railway.
---

Railway can provide a public domain to any service that is listening for traffic.  You are also free to use your own custom domain.

## How it Works

Railway can detect a deployment is listening for traffic.  When detected, you will be asked if you would like to assign a domain to the service. Then you can simply follow the prompts to generate a domain and your app will be exposed to the internet.

## Support

For information on how to use domains as well as setting up a custom domain, refer to [this guide](/guides/public-networking).


================================================
FILE: src/docs/reference/public-networking.md
================================================
---
title: Public Networking
description: Learn everything about public networking on Railway.
---

Public Networking refers to communicating over the public internet to services in Railway.

## How it Works

Railway can detect if a deployed service is listening for traffic. When detected, Railway will provide a public domain for your service with the click of a button. The only thing you need to do, is properly handle the port assignment. More on this in the [Public Networking guide](/guides/public-networking).

If you have your own Domain already, Railway also supports adding custom domains to your services. For instructions on adding a custom domain, see the [Public Networking guide](/guides/public-networking#custom-domains).

## Technical Specifications

_This information is subject to change at any time._

| Category                 | Key Information                                                                                                                                                                                                                                                                                                                                                                                                                                |
| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **DNS/Domain Names**     | - Support for domains, subdomains, and wildcard domains.<br/>- Subdomains and wildcards cannot overlap (`foo.hello.com` cannot exist with `*.hello.com` unless owned by the same service).<br/>- Root domains need a DNS provider with ALIAS records or CNAME flattening.<br/>- Unicode domains should be PUNYcode encoded.<br/>- Non-public/internal domain names are not supported.                                                          |
| **Certificate Issuance** | - Railway attempts to issue a certificate for **up to 72 hours** after domain creation before failing.<br/>- Certificates are expected to be issued within an hour.                                                                                                                                                                                                                                                                            |
| **TLS**                  | - Support for TLS 1.2 and TLS 1.3 with specific cipher sets.<br/>- Certificates are valid for 90 days and renewed every 30 days.                                                                                                                                                                                                                                                                                                               |
| **Edge Traffic**         | - Support for HTTP/1.1.<br/>- Support for websockets over HTTP/1.1.<br/>- Proxy Keep-Alive timeout of 60 seconds (1 minute).<br/>- Max 32 KB Combined Header Size<br/>- Max duration of 15 minutes for HTTP requests.                                                                                                                                                                                                                          |
| **Request Headers**      | - `X-Real-IP` for identifying client's remote IP.<br/>- `X-Forwarded-Proto` always indicates `https`.<br/>- `X-Forwarded-Host` for identifying the original host header.<br/>- `X-Railway-Edge` for identifying the edge region that handled the request.<br/>- `X-Request-Start` for identifying the time the request was received (Unix milliseconds timestamp).<br/>- `X-Railway-Request-Id` for correlating requests against network logs. |
| **Requests**             | - Inbound traffic must be TLS-encrypted<br/>- HTTP GET requests to port 80 are redirected to HTTPS.<br/>- HTTP POST requests to port 80 are redirected to HTTPS as GET requests.<br/>- SNI is required for correct certificate matching.                                                                                                                                                                                                       |

## Domain Rate Limits

_This information is subject to change at any time._

To ensure the integrity and performance of our network, we enforce the following limits for all services.

| Category                    | Limit                         | Description                                               |
| --------------------------- | ----------------------------- | --------------------------------------------------------- |
| **Maximum Connections**     | 10,000 concurrent connections | The number of concurrent connections.                     |
| **HTTP Requests/Sec**       | 3,000 RPS                     | The number of HTTP requests to a given domain per second. |
| **Requests Per Connection** | 10,000 requests               | The number of requests each connection can make.          |

If your application requires higher limits, please don't hesitate to reach out to us at [team@railway.com](mailto:team@railway.com).

## Custom Domain Count Limits

The [Hobby plan](/reference/pricing#plans) is limited to 2 custom domains per service.

The [Pro Plan](/reference/pricing#plans) is limited to 20 domains per service by default but can be increased for Pro users on request, by reaching out to us at [team@railway.com](mailto:team@railway.com) or via [private thread](/reference/support#private-threads).

## FAQ

<Collapse title="What type of traffic can I send to my services in Railway?">
We currently support HTTP and HTTP2 traffic from the internet to your services.

All traffic must be HTTPS and use TLS 1.2 or above, and TLS SNI is mandatory for requests.

- Plain HTTP GET requests will be redirected to HTTPS with a `301` response.
- Plain HTTP POST requests will be converted to GET requests.

For services that require TCP traffic, like databases, we also have a [TCP Proxy feature](/reference/tcp-proxy).
</Collapse>

<Collapse title="How does Railway handle SSL certificates?">
We provide LetsEncrypt SSL certificates using RSA 2048bit keys.  Certificates are valid for 90 days and are automatically renewed 2 months into their life.

Certificate issuance should happen within an hour of your DNS being updated with the values we provide.

For proxied domains (Cloudflare orange cloud), we may not always be able to issue a certificate for the domain, but Cloudflare to Railway traffic will be encrypted with TLS using our default `*.up.railway.app` certificate.
</Collapse>

<Collapse title="Does Railway protect my services against DDoS?">
Railway Metal infrastructure is built to mitigate attacks at network layer 4 and below, however we do not provide protection on the application layer. If you need WAF functionality, we recommend using Cloudflare alongside Railway.
</Collapse>

<Collapse title="How do I handle forwarding traffic to my exposed port?">
To have traffic from the public internet properly forwarded to your service's exposed port, you must ensure that you are properly using the `PORT` environment variable made available to every service deployment.
- If your application is listening on an explicitly defined port, you must define a `PORT` variable with the proper assignment in your service's [variables](/guides/variables).
- If you do not explicitly define the `PORT`, Railway provides one for you and exposes it during deployment.

More on this in the [Public Networking guide](/guides/public-networking).
</Collapse>



================================================
FILE: src/docs/reference/regions.md
================================================
---
title: Regions
description: Explore the multiple regions worldwide where you can deploy your apps on Railway.
---

Railway's infrastructure spans multiple regions across the globe. This allows you to deploy your applications closer to your users no matter where they are located. **This feature is only available to Pro plan workspaces.**

 Consider factors like compliance needs and proximity to your users when choosing a region.

## Region Options
Railway has deploy regions in the Americas, Europe, and Asia-Pacific to provide broad coverage around the world.

Within the service settings, you can select one of the following regions:

| Name                 | Location               | Region Identifier        |
|----------------------|------------------------|--------------------------|
| US West Metal        | California, USA        | `us-west2`               |
| US East Metal        | North Carolina, USA    | `us-east4-eqdc4a`        |
| EU West Metal        | Amsterdam, Netherlands | `europe-west4-drams3a`   |
| Southeast Asia Metal | Singapore              | `asia-southeast1-eqsg3a` |

<Image
    quality={100}
    width={1359}
    height={651}
    src="https://res.cloudinary.com/railway/image/upload/v1695660846/docs/service_region_picker.png"
    alt="Volume"
/>

**Notes:**

- Additional regions may be added in the future as Railway continues expanding its infrastructure footprint.

- Metal regions do not support services with volumes attached to them.

- Metal regions are available to all users as opposed to the other regions which are limited to Pro plan users.

- By default, Railway deploys to your [preferred region](/guides/optimize-performance#set-a-preferred-region).

- All regions provide the same experience, performance, and reliability you expect from Railway.

- Impact of Region Changes

- The region of a service can be changed at any time, without any changes to your domain, private networking, etc.

- There will be no downtime when changing the region of a service, except if it has a volume attached to it (see next section).

### Volumes

Volumes follow the region of the service they are attached to. This means if you attach a new volume to a service, it will be deployed in the same region as the service.

If you change the region of a service with an existing attached volume, that volume will need to be migrated to the new region. You will experience minimal downtime, even for volumes containing large amounts of data.

The same is true if you attach a detached volume to a service in a different region. It will need to be migrated to the new region.

<Image
    quality={100}
    src="https://res.cloudinary.com/railway/image/upload/v1695661106/docs/volume_migration.png"
    alt="Volume"
    width={732}
    height={483}
/>

## Support

For information on how to deploy your services to different regions, refer to [this guide](/guides/optimize-performance#configure-a-region).



================================================
FILE: src/docs/reference/scaling.md
================================================
---
title: Scaling
description: Learn how to scale your applications on Railway.
---

Scaling your applications in Railway is made easy with configurable options for horizontal scaling as well as vertical autoscaling out-of-the-box.

## How it Works

### Vertical Autoscaling

By default Railway will scale your service up to the specified vCPU and Memory limits of your [plan](/reference/pricing#plans).

### Horizontal Scaling with Replicas

Scale horizontally by manually increasing the number of replicas for a service in the service settings. Increasing the number of replicas on a service will create multiple instances of the service deployment.

Each replica has access to the full resources allocated by your plan. For instance, with the `Pro` plan, each of your replicas can utilize up to 32 vCPU and 32GB of memory, for example, if you had 2 replicas, your service would be able to utilize up to 64 vCPU and 64GB of memory split between the 2 replicas.

#### Multi-region replicas

Multi-region replicas are exactly as advertised -- horizontally scaled replicas that are located in different geographic regions. 

The service settings panel will reveal an interface for assigning replicas to different regions.

<Image 
    src="https://res.cloudinary.com/railway/image/upload/v1733386054/multi-region-replicas_zov7rv.png"
    alt="Multi-region replicas"
    layout="responsive"
    width={1370}
    height={934}
/>

Creating, deleting, and re-assigning replicas will trigger a staged change which upon applying will trigger a redeploy.

#### Load Balancing Between Replicas

If you are using multi-region replicas, Railway will automatically route public traffic to the nearest region and then randomly distribute requests to the replicas within that region.

If you are using a single region with multiple replicas, Railway will randomly distribute public traffic to the replicas of that region.

We plan to add more advanced load balancing strategies in the future.

#### Metrics

For services with multiple replicas, the metrics from all replicas are summed up and displayed in the metrics tab, for example, if you have 2 replicas, each using 100 MB of memory, the memory usage displayed in the metrics tab will be 200 MB.

#### Sticky Sessions

For now Railway does not support sticky sessions nor report the usage of the replicas within the metrics view.

## Support

For information on how to use horizontal scaling with replicas, refer to [this guide](/guides/optimize-performance#configure-horizontal-scaling).


================================================
FILE: src/docs/reference/services.md
================================================
---
title: Services
description: Discover the different types of services available in your Railway projects.
---

A Railway service is a deployment target.  Under the hood, services are containers deployed from an image.

Each service keeps a log of [deployment attempts](/reference/deployments) and [performance metrics](/reference/metrics).

[Variables](/reference/variables), source references (e.g. GitHub repository URI), and relevant [start and build commands](/reference/build-and-start-commands) are also stored in the service, among other configuration.

## Types of Services

#### Persistent Services

Services that are always running.  Examples include web applications, backend APIs, message queues, database services, etc.

#### Scheduled Jobs

Services that are run until completion, on a defined schedule, also called [Cron Jobs](/reference/cron-jobs).

## Service Source

A service source can be any of the following - Docker Image, GitHub or Local repository.

If a [Dockerfile](/reference/dockerfiles) is found within the source repository, Railway will automatically use it to build an image for the service.

#### Docker Image

Services can be deployed directly from a Docker image from Docker Hub, GitHub Container Registry, GitLab Container Registry, or Quay.io.  The images can be public or private.

#### GitHub Repository

Services can be connected to a GitHub repo and automatically deployed on each commit.

#### Local Repository

Services can be deployed from a local machine by using the [Railway CLI](/reference/cli-api).

## Ephemeral Storage

Every service deployment has access to 10GB of ephemeral storage.  If a service deployment consumes more than 10GB, it can be forcefully stopped and redeployed.

If your service requires data to persist between deployments, or needs more than 10GB of storage, you should add a [volume](/reference/volumes).

## Templates

A [template](/reference/templates) is a pre-configured group of services. A template can be used to start a project or to expand an existing project.

## Constraints

- Service names have a max length of 32 characters.



================================================
FILE: src/docs/reference/static-outbound-ips.md
================================================
---
title: Static Outbound IPs
description: Learn how to enable static outbound IPs on Railway.
---

Static Outbound IPs allows customers on the Pro plan to assign a permanent outbound IPv4 address to a service. This IP address will **always** be used for outbound traffic from any replicas running within the service.

## Use Cases

This feature may be useful to you if you're using a third-party service provider or firewall which requires you to whitelist which IP addreseses your services will be connecting from, such as MongoDB Atlas.

The IPv4 address assigned to your service through this feature **cannot** be used to receive inbound traffic.

## Enabling Static Outbound IPs

Customers on the Pro plan can enable Static Outbound IPs for any service they wish.

1. Navigate to the Settings tab of your desired service
2. Toggle `Enable Static IPs` in the Networking section of Settings
3. You will be presented with an IPv4 address which is tied to the region your service is deployed in
4. The Static IP will be used by your service after the next deploy

<Image
  src="https://res.cloudinary.com/railway/image/upload/v1716858865/docs/d6u20lrvxmlc8rfu91rx.png"
  layout="responsive"
  alt="Static IPs"
  width={1328} height={710} quality={80} />

## Caveats
- There is no guarantee that the IPv4 address assigned to your service is dedicated. It may be shared with other customers.
- The  IP address cannot be used for inbound traffic.
- If you wish to move your service to a different region, the IP address will change.


================================================
FILE: src/docs/reference/support.md
================================================
---
title: Support
description: Learn about Railway's support channels.
---

Railway offers numerous tiers of support for our users.

## Support Tiers

We prioritize support requests based on the plan you're on and the urgency of your request.

### Trial & Hobby

Trial & Hobby plan users are only eligible for community support over [Central Station](#help-station) or [Discord](#discord). Railway may respond to community threads, but a response is not guaranteed.

### Pro & Business Class

Pro & [Business Class](#business-class) customers can select the urgency of their request when creating a new thread in [Central Station](#help-station). Enterprise customers with $2,000/month committed spend can also use [Slack](#slack).

| Level    | Description                                                                | Eligibility                       |
| -------- | -------------------------------------------------------------------------- | --------------------------------- |
| Low      | Questions about how to use Railway or general feedback                     | Pro                               |
| Normal   | Issues with Railway, such as bugs or unexpected behavior                   | Pro                               |
| High     | Issues that are blocking you from using Railway                            | Pro                               |
| Critical | Production outage or platform issues blocking your team from using Railway | [Business Class](#business-class) |

## Central Station

Railway conducts its support over our [Central Station](https://station.railway.com) platform.

It hosts our community of 500,000+ users and developers. It is where you can find answers to common questions, ask questions, and get in touch with the Railway team.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743120744/central-station_x3txbu.png"
alt="Screenshot of Railway Central Station"
layout="intrinsic"
width={1737} height={913} quality={100} />

Please ensure that you've searched for your issue before creating a new thread, follow the guidelines in [How To Ask For Help](#how-to-ask-for-help), and abide by our [Code of Conduct](https://station.railway.com/community-code-of-conduct).

### Visibility

For Pro plan users, threads created in the [Central Station](https://station.railway.com) are treated as **High Priority**. These threads are guaranteed a response from the Railway team within 1 business day (if community members are unable to help).

We pay special attention to threads created by Pro users and ensure that questions or concerns are resolved in a timely manner.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1715282870/docs/pro-priority-threads_pxyodo.png"
alt="Screenshot of Railway Central Station - Priority Threads"
layout="intrinsic"
width={772} height={269} quality={100} />

For teams and companies requiring SLOs and higher-priority support over chat, sign up for [Business Class](#business-class).

### Private Threads

You create a **Private Thread** on [Central Station](https://station.railway.com/support) if you need to share sensitive information, such as invoices or personal data. Private Threads are only visible to you and Railway employees.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743120858/private-thread_en0bkd.png"
alt="Screenshot of Railway Central Station - Private Threads"
layout="intrinsic"
width={1436} height={455} quality={100} />

Private Threads have a slower response time because only Railway employees can
see them. We recommend you to only create a Private Thread if you need to share
sensitive information.

We may make the thread public for community involvement if we determine that
there is no sensitive information in your thread.

## Discord

We have a vibrant Discord community of over 20,000+ users and developers. You can find the Railway Discord at [https://discord.gg/railway](https://discord.gg/railway).

Please ask your questions in the <a href="https://discord.com/channels/713503345364697088/1006629907067064482" target="_blank">✋ ｜ help</a> channel, and refrain from pinging anyone with the `Team` or `Conductor` roles.

## Slack

Railway offers Slack Connect channels to Enterprise plan customers with a minimum committed spend of $2,000/month. Customers can raise issues, coordinate their migration over to Railway, and provide feedback within a Slack Connect channel.

Additionally, the solutions team at Railway may provide a shared Slack Connect channel to facilitate better communication and support.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1733324712/docs/cs-2024-12-04-22.20_bms1sa.png"
alt="Screenshot of Slack"
layout="intrinsic"
width={571} height={743} quality={100} />

Enterprise teams with $2,000/month committed spend can create a Slack Connect channel within the Team settings page:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1733324438/docs/cs-2024-12-04-23.00_uvchnr.png"
alt="Screenshot of Slack Account Linking"
layout="intrinsic"
width={845} height={157} quality={100} />

Users in a Slack Connect channel can invite their team members using the Slack interface or by pressing the `Join Slack` button again to initiate new invites.

### Slack Account Linking

We highly recommend connecting your Slack account if you have a shared Slack Connect channel with us. Doing so allows us to get insight into issues affecting your workloads without having to ask for additional information.

To link your Slack account to your Railway account, navigate to your team's [settings page](https://railway.com/account) on Railway.

_Railway only asks for permissions to link your Slack account's ID and your Slack Workspace's ID. Our integration can only see messages within the shared Slack Connect channel_.

## How To Ask For Help

When you reach out for help, it's important that you help us help you! Please include as much information as you can, including but not limited to:

- Description of the issue you're facing
- IDs (Project ID, Service Name/ID, Deployment ID, etc.)
- Railway environment of your service/deployment
- Error messages and descriptions
- Logs (build and/or deploy)
- Link to GitHub repo/code or template you're using, if applicable

## Business Class

For teams and companies who need dedicated support, we offer Business Class.

Business Class is support and success designed for those who need the full attention of Railway. Business Class support is a dedicated support channel with SLOs for your company. Workspaces become eligible for Business Class response times after $2000/mo in spend.

Reach out to us at [team@railway.com](mailto:team@railway.com) to enable your SLO.

### Business Class SLOs

We prioritize Business Class customers over all other support requests.

| Severity                             | Acknowledgement Time |
| ------------------------------------ | -------------------- |
| P1 (Outages, Escalations)            | One hour - 24/7      |
| P2 (Bugs)                            | Same Business Day    |
| P3 (Integrations, General Questions) | Two Business Days    |

For Enterprise customers with $2,000/month committed spend who have a shared Slack Connect channel with us, you have access to
"Critical" urgency level support requests:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1733325632/docs/cs-2024-12-04-23.20_smvweu.png"
alt="Screenshot of Slack Account Linking"
layout="intrinsic"
width={392} height={255} quality={100} />

This allows you to page our support on-call directly for an immediate response.
Please only use this for production outages or critical platform issues
preventing your team from using Railway.

### Definition of Priorities

| Priority | Surface Areas                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 1        | **Outages that impact production**. This covers the following components: incidents declared on <a href="https://status.railway.com/" target="_blank">status.railway.com</a> including and especially incidents with end-customer impact (e.g. inability to login to the Dashboard), customer workload-impacting issues due to high load requiring intervention from Railway (e.g. requiring additional resources beyond your current limits). |
| 2        | **Issues related to Railway features**. This covers features offered by Railway, including but not limited to our Dashboard, CLI, and platform-level features such as Deployments, Environments, Private Networking, Volumes.                                                                                                                                                                                                                  |
| 3        | **Integration work and general questions related to Railway**. This covers customer-related requests involving integrating Railway with other services (e.g. fronting your Railway workload with a DDoS protection service), leveraging tools to use Railway the way you like (e.g. IaC provisioning/Terraform), or questions about Railway features or its platform.                                                                          |

### Business Class Response Hours

We offer support during business hours, and prioritize requests from Business Class customers:

- Business hours are Monday through Friday, 9am to 9pm Pacific Time
- Exceptions apply to our business hours during P1 outages where the team will be on-call 24/7
- The team may reply outside of business hours, but we do not guarantee a response outside of business hours

### Business Class Resource Limits

For Business Class customers, Railway increases resource limits beyond the standard limits on a need-based basis. Contact the team through your dedicated communication channel to increase limits.

### Uptime Calculation

As part of this offering, we agree to provide a monthly summary on the uptime of the components of Railway. Customers are provided an RCA to any outages on the Routing Layer.

### Audits

Security audits can be provided by request.

## Enterprise

For enterprises, we offer everything in [Business Class](#business-class) along with custom support tailored to your needs. Railway can enter into a contractual SLA under our negotiated pricing offering. Reach out to us at [team@railway.com](mailto:team@railway.com) for more information.



================================================
FILE: src/docs/reference/tcp-proxy.md
================================================
---
title: TCP Proxy
description: Learn how to proxy TCP traffic to a service by creating a TCP proxy on Railway.
---

Proxy TCP traffic to a service by creating a TCP proxy. 

## How it works

Enabling TCP Proxy on a service requires specification of a port to which the traffic should be proxied.  Railway then generates a domain and proxy port, and all traffic sent to `domain:port` will be proxied to the service. 

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743194081/docs/tcp-proxy_edctub.png"
alt="Screenshot of TCP proxy configuration"
layout="responsive"
width={1200} height={822} quality={100} />

#### Load Balancing 

Currently we use a random load balancing strategy for TCP traffic.

## Use Cases

TCP Proxy is useful for services that don't support HTTP, such as databases.

## Support

For more information on how to set it up, refer to the TCP Proxy section of the [Public Networking guide](/guides/public-networking#tcp-proxying).



================================================
FILE: src/docs/reference/teams.md
================================================
---
title: Workspaces
description: Learn how you can manage a workspaces within Railway.
---

Workspaces are how organizations are represented within Railway. A default workspaces is made with your account, and new ones can be created via the Pro or Enterprise plans.

For more information, visit our [documentation on pricing](/reference/pricing) or <a href="https://railway.com/pricing" target="_blank">railway.com/pricing</a>.

> **Note:** Effective March 3rd, 2025, for users on Railway hosted metal instances, all seat costs will be waived.

## Creating a Workspace

Organizations can create a workspace by heading to the <a href="https://railway.com/new/workspace" target="_blank">Create Workspace</a> page and entering the required information.

## Managing Workspaces

You can open your workspace's settings page to manage members and see billing information by clicking the gear icon next to the name of your workspace on the dashboard.

## Inviting Members

Under the People tab of the settings page, you can invite members.

There are three roles for Workspace members:

- Admin: Full administration of the Workspace and all Workspace projects
- Member: Access to all Workspace projects
- Deployer: View projects and deploy through commits to repos via GitHub integration.

_Note_: Changes that trigger a deployment will skip the approval requirement when the author has a Deployer role (or higher) and their GitHub account is connected.

## Trusted Domains

Trusted domains may be configured on the workspace settings page. Note that workspace members added via trusted domain will be billed at the normal rate.

<Image 
    src="https://res.cloudinary.com/railway/image/upload/v1733955730/docs/t-d_jbtbm7.png"
    width="1200"
    height="548"
    alt="Trusted domains are configurable via the workspace settings"
/>

You can automate the onboarding of new workspace members with trusted domains. Railway users that sign up with one of the trusted domains associated with your workspace will automatically be granted access to the workspace with the specified role (see above).

For example, new users with `example.com` email addresses will automatically be added to your workspaces that have the `example.com` trusted domain.

We verify that you have administrative access to the domain by looking for services in your workspace that use this domain or a subdomain. Make sure to [setup a custom domain](/guides/public-networking#custom-domains) on your service before adding it as a trusted domain.

## Transferring Projects

Transfer projects from another Workspace or Hobby workspace easily. Detailed instructions can be found [here](/guides/projects#transferring-projects).

## Invoicing and Billing

Railway offers a consumption-based pricing model for your projects. You don't get charged for resources you don't use, instead, Railway charges by the minute for each vCPU and memory resource your service uses.

However, if you expect to use a consistent amount of resources for large companies, you can contact us for a quote and demo. Railway will work with you to find a solution that works for your needs. We are willing to offer Purchase Orders and concierge onboarding for large companies.

### Committed Spend Tiers

Railway offers committed spend tiers for customers with consistent usage needs. Instead of negotiated contract pricing, customers can commit to a specific monthly threshold to [unlock additional features and services.](/reference/pricing/plans#committed-spend-tiers)

Monthly thresholds for addons is found in our [commited spend pricing](/reference/pricing#committed-spend-tiers).

Reach out to us at [team@railway.com](mailto:team@railway.com) for more information.

## FAQs

### How do I get my Pro seat costs waived?

As of March 3rd, 2025, Railway waives all seat costs for users on Railway hosted metal instances. To qualify for this benefit:

1. Your workspace must be on the Pro plan
2. Your services must be quality for metal pricing and run on Railway hosted metal instances
3. This waiver will be automatically applied for your next monthly invoice

If you're interested in moving to Railway hosted metal instances to take advantage of this benefit, please [contact our team](mailto:team@railway.com) to discuss your requirements and set up a dedicated host solution.

The seat cost waiver provides significant savings for workspaces of all sizes, especially as your workspace grows. This is part of our commitment to providing more flexible and cost-effective pricing options for our customers.



================================================
FILE: src/docs/reference/templates.md
================================================
---
title: Templates
description: Learn how Railway’s Kickback program rewards template publishers for their contributions.
---

Templates provide a way to jumpstart a project by giving users the means to package a service or set of services into a reusable and distributable format.

As a user in Railway, you can create and publish templates for others to use, or you can deploy templates from our <a href="https://railway.com/templates" target="_blank">template marketplace</a>.

For information on how to create, publish, and deploy templates, visit our [Templates guides](/guides/templates).

## Kickback program

If you publish a template, and it is deployed into other users' projects, you are immediately eligible for a 50% kickback of the usage cost incurred, in the form of Railway credits.  

If a user deploys your template, and the usage of the services cost the user $100, you would receive $50 in Railway credits or $50 in cash (USD).

Read more about the kickback program <a href="https://railway.com/open-source-kickback" target="_blank">here</a>.

### Kickback Eligibility Requirements
- Your template must be published to the marketplace to be eligible for kickback.
- For Hobby users with a $5 discount, only usage in excess of the discount is counted in the kickback.
- All service types and resource usage of those services (compute, volume, egress, etc) *do count* towards the kickback.
- Platform fees are not included in the kickback, but usage fees of the platform are included. Examples of platform fees are:

  - Cost of Subscription Plan ($5 for Hobby, $20 for Pro)
  - Additional Team Seats

  As an example, if a user pays $20 in platform fees, then incurs $200 of usage from your template, you are eligible for a $100 kickback (50% of $200).

- The minimum kickback our program supports is $0.01, meaning usage of your template must incur at least $0.04 in usage after discounts and/or platform fees.

## Earnings and Withdrawals

By default, your template kickbacks are automatically converted into Railway Credits. But we also offer cash withdrawals. Visit the `/earnings` tab inside your account settings for more details. There you can add your details and request a withdrawal.

### FAQ

#### How do I start earning cash?

- Simply flip the switch on the Earnings page marked `Direct Deposit to Railway Credits`. This will stop auto-depositing your earnings into our Credits system. You will then begin accruing cash in your `Available Balance`.

#### How do I request a withdrawal?

- Follow the instructions inside the `Earnings` tab. We currently allow withdrawals to GitHub Sponsors and Buy Me a Coffee. After adding your account details you will request a withdrawal. Our team will receive the request and process it right away.

#### Can I make manual withdrawals to credits too?

- Yes! Choose the `Credits` checkbox and then make your withdrawal request.

#### I have earned a lot of kickbacks from a template, but this page says my available balance is $0. Why?

- The current kickback method is to automatically apply your kickbacks as Railway Credits. You can opt out of this if you wish to start accruing cash.

#### Can I still use the older, automatic-credits setting?

- Yes. This behavior is enabled by default. You can opt out of it, and back in to it, at any time. Simply use the switch on the Earnings page marked `Direct Deposit to Railway Credits`.

#### What is the minimum and maximum withdrawal amount?

- For now, withdrawals may be made in $100 - $5000 increments.

#### What is the timeframe from withdrawal request to payout?

- We will process withdrawals within 5 - 7 business days of receiving your request.

## Updatable Templates

When you deploy any services from a template based on a GitHub repo, every time you visit the project in Railway, we will check to see if the project it is based on has been updated by its creator.

If it has received an upstream update, we will create a branch on the GitHub repo that was created when deploying the template, allowing for you to test it out within a PR deploy.

If you are happy with the changes, you can merge the pull request, and we will automatically deploy it to your production environment.

<Banner variant="info">
If you're curious, you can read more about how we built updatable templates in this <Link href="https://blog.railway.com/p/updatable-starters" target="_blank">blog post</Link>.
</Banner>

Note that this feature only works for services based on GitHub repositories. At this time, we do not have a mechanism to check for updates to Docker images from which services may be sourced.



================================================
FILE: src/docs/reference/usage-limits.md
================================================
---
title: Usage Limits
description: Learn how to configure usage limits.
---

Usage Limits allow you to set a maximum limit on your usage for a billing cycle. If your resource usage for the billing cycle exceeds the limit you configured, we will shut down your workloads to prevent them from incurring further resource usage.

## Configuring Usage Limits

<Image src="https://res.cloudinary.com/railway/image/upload/v1743193518/docs/usage-limits_pqlot9.png" alt="Usage Limits Modal" layout="responsive" width={1200} height={1075} />

Visit your [Workspace Usage page](https://railway.com/workspace/usage) to set the usage limits. Once you click the <kbd>Set Usage Limits</kbd> button, you will see a modal above where you can set a <kbd>Custom email alert</kbd> and a <kbd>Hard limit</kbd>.

<Banner variant="info">The link above takes you to the usage page for your personal account. If you want to set a usage limit for your team, you can use the account switcher in the top left corner of your dashboard to access the team's usage page.</Banner>

## Custom Email Alert

You can think of this as a _soft limit_. When your resource usage reaches the specified amount, we will email you that this threshold has been met. Your resources will remain unaffected.

## Hard Limit

Once your resource usage hits the specified hard limit, all your workloads will be taken offline to prevent them from incurring further resource usage. Think of the hard limit as the absolute maximum amount you're willing to spend on your infrastructure.

We will send you multiple reminders as your usage approaches your hard limit:

1. When your usage reaches 75% of your hard limit
2. When your usage reaches 90% of your hard limit

We will send you another email if your workloads are taken down due to your specified usage limits.

<Banner variant="danger">Setting a hard limit is a possibly destructive action as you're risking having all your resources shut down once your usage crosses the specified amount.</Banner>

## FAQ

<Collapse title="Can I set a usage limit?">
Usage limits are available for all users on the Pro plan and for users on the automatic payment Hobby plan model.

Usage limits are not available for users on the prepaid plans. Instead, the amount of credits you load determines the hard limit.
</Collapse>

<Collapse title="Do I need to set a hard limit to set a custom email alert?">
No. You can leave the hard limit blank if you simply want to be notified at a particular amount of usage.
</Collapse>

<Collapse title="What is the minimum hard limit?">
The minimum amount you can specify as the hard limit is $10.
</Collapse>

<Collapse title="How can I restart my resources if I hit my usage limit?">
To restart your resources, you can either increase your usage limit or remove it entirely.

For guidance on restarting your resources, please refer to our [FAQ](/reference/pricing/faqs#my-services-were-stopped-what-do-i-do) section.
</Collapse>

<Collapse title="Will my resources be automatically started during the next billing cycle?">
No. Once your resources are shut down, it is your responsibility to restart them.
</Collapse>



================================================
FILE: src/docs/reference/variables.md
================================================
---
title: Variables
description: Variables provide a powerful way to manage configuration and secrets across services in Railway.
---

Variables provide a powerful way to manage configuration and secrets across services in Railway.

## How it Works

When defined, variables are made available to your application as environment variables in the following scenarios:

- The build process for each service deployment.
- The running service deployment.
- The command invoked by `railway run <COMMAND>`
- The local shell via `railway shell`

In Railway, there is also a notion of configuration variables which allow you to control the behavior of the platform.

## Template Syntax

Railway's templating syntax gives you flexibility in managing variables:

```plaintext
${{NAMESPACE.VAR}}
```

- `NAMESPACE` - The value for NAMESPACE is determined by the location of the variable being referenced. For a shared variable, the namespace is "shared". For a variable defined in another service, the namespace is the name of the service, e.g. "Postgres" or "backend-api".
- `VAR` - The value for VAR is the name, or key, of the variable being referenced.

You can also combine additional text or even other variables, to construct the values that you need:

```plaintext
DOMAIN=${{shared.DOMAIN}}
GRAPHQL_PATH=/v1/gql
GRAPHQL_ENDPOINT=https://${{DOMAIN}}/${{GRAPHQL_PATH}}
```

## Types of Variables

In Railway, there is a notion of service variables, shared variables, reference variables, sealed variables, and a few kinds of reserved variables.

### Service Variables

Service variables are scoped to a specific service. They can be referenced in other services by using a Reference Variable.

### Shared Variables

Shared variables are scoped to a project and environment. They help reduce duplication of variables across multiple services within the same project.

### Reference Variables

Reference variables are those defined by referencing variables in other services, shared variables, or even variables in the same service. This is useful for ease of maintenance, allowing you to set a variable in a single place and reference it as needed.

Reference variables use Railway's [template syntax](/reference/variables#template-syntax).

### Sealed Variables

Sealed variables are scoped to a specific service. Once a variable is sealed, its value is not visible via the UI or the Railway API.

### Variable Functions

[Template variable functions](/guides/create#template-variable-functions) allow you to dynamically generate variables (or parts of a variable) on demand when the template is deployed.

### Railway-Provided Variables

Railway provides the following additional system environment variables to all
builds and deployments.

| Name                           | Description                                                                                                                                          |
| ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
| `RAILWAY_PUBLIC_DOMAIN`        | The public service or customer domain, of the form `example.up.railway.app`                                                                          |
| `RAILWAY_PRIVATE_DOMAIN`       | The private DNS name of the service.                                                                                                                 |
| `RAILWAY_TCP_PROXY_DOMAIN`     | (see [TCP Proxy](/reference/tcp-proxy) for details) The public TCP proxy domain for the service, if applicable. Example: `roundhouse.proxy.rlwy.net` |
| `RAILWAY_TCP_PROXY_PORT`       | (see [TCP Proxy](/reference/tcp-proxy) for details) The external port for the TCP Proxy, if applicable. Example: `11105`                             |
| `RAILWAY_TCP_APPLICATION_PORT` | (see [TCP Proxy](/reference/tcp-proxy) for details) The internal port for the TCP Proxy, if applicable. Example: `25565`                             |
| `RAILWAY_PROJECT_NAME`         | The project name the service belongs to.                                                                                                             |
| `RAILWAY_PROJECT_ID`           | The project id the service belongs to.                                                                                                               |
| `RAILWAY_ENVIRONMENT_NAME`     | The environment name of the service instance.                                                                                                        |
| `RAILWAY_ENVIRONMENT_ID`       | The environment id of the service instance.                                                                                                          |
| `RAILWAY_SERVICE_NAME`         | The service name.                                                                                                                                    |
| `RAILWAY_SERVICE_ID`           | The service id.                                                                                                                                      |
| `RAILWAY_REPLICA_ID`           | The replica ID for the deployment.                                                                                                                   |
| `RAILWAY_REPLICA_REGION`       | The region where the replica is deployed. Example: `us-west1`                                                                                        |
| `RAILWAY_DEPLOYMENT_ID`        | The ID for the deployment.                                                                                                                           |
| `RAILWAY_SNAPSHOT_ID`          | The snapshot ID for the deployment.                                                                                                                  |
| `RAILWAY_VOLUME_NAME`          | The name of the attached volume, if any. Example: `foobar`                                                                                           |
| `RAILWAY_VOLUME_MOUNT_PATH`    | The mount path of the attached volume, if any. Example: `/data`                                                                                      |

### Git Variables

These variables are provided if the deploy originated from a GitHub trigger.

| Name                         | Description                                                                                                                                                                                          |
| ---------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `RAILWAY_GIT_COMMIT_SHA`     | The git [SHA](https://docs.github.com/en/github/getting-started-with-github/github-glossary#commit) of the commit that triggered the deployment. Example: `d0beb8f5c55b36df7d674d55965a23b8d54ad69b` |
| `RAILWAY_GIT_AUTHOR`         | The user of the commit that triggered the deployment. Example: `gschier`                                                                                                                             |
| `RAILWAY_GIT_BRANCH`         | The branch that triggered the deployment. Example: `main`                                                                                                                                            |
| `RAILWAY_GIT_REPO_NAME`      | The name of the repository that triggered the deployment. Example: `myproject`                                                                                                                       |
| `RAILWAY_GIT_REPO_OWNER`     | The name of the repository owner that triggered the deployment. Example: `mycompany`                                                                                                                 |
| `RAILWAY_GIT_COMMIT_MESSAGE` | The message of the commit that triggered the deployment. Example: `Fixed a few bugs`                                                                                                                 |

### User-Provided Configuration Variables

Users can use the following environment variables to configure Railway's behavior.

| Name                                  | Description                                                                                                                                                                   |
| ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `RAILWAY_DEPLOYMENT_OVERLAP_SECONDS`  | How long the old deploy will overlap with the newest one being deployed, its default value is `0`. Example: `20`                                                              |
| `RAILWAY_DOCKERFILE_PATH`             | The path to the Dockerfile to be used by the service, its default value is `Dockerfile`. Example: `Railway.dockerfile`                                                        |
| `NIXPACKS_CONFIG_FILE`                | The path to the Nixpacks configuration file relative to the root of the app, its default value is `nixpacks.toml`. Example: `frontend.nixpacks.toml`                          |
| `NIXPACKS_VERSION`                    | The <a href="https://github.com/railwayapp/nixpacks/releases" target="_blank">version</a> of Nixpacks to use, if unspecfied a default version will be used. Example: `1.29.1` |
| `RAILWAY_HEALTHCHECK_TIMEOUT_SEC`     | The timeout length (in seconds) of healthchecks. Example: `300`                                                                                                               |
| `RAILWAY_DEPLOYMENT_DRAINING_SECONDS` | The SIGTERM to SIGKILL buffer time (in seconds), its default value is 0. Example: `30`                                                                                        |
| `RAILWAY_RUN_UID`                     | The UID of the user which should run the main process inside the container. Set to `0` to explicitly run as root.                                                             |
| `RAILWAY_SHM_SIZE_BYTES`              | This variable accepts a value in binary bytes, with a default value of 67108864 bytes (64 MB)                                                                                 |

## Support

For information on how to use variables refer to the [Variables guide](/guides/variables).



================================================
FILE: src/docs/reference/volumes.md
================================================
---
title: Volumes
description: Volumes are a feature that enables persistent data for services on Railway.
---

Volumes are a feature that enables persistent data for [services](/reference/services) on Railway.

## How it works

When mounting a volume to a service, a volume is made available to the service on the specified mount path.

## Size Limits

Volumes have a default size based on the [subscription plan](/reference/pricing#plans).

- Free and Trial plans: **0.5GB**
- Hobby plans: **5GB**
- Pro and team plans: **50GB**

Volumes can be "Grown" after upgrading to a different plan.

Pro users and above can self-serve to increase their volume up to 250 GB.

For Pro and above users, please reach out to us on our [Central Station](https://station.railway.com/questions) if you need more then 250GB. Enterprise users with $2,000/month committed spend can also use [Slack](/reference/support#slack).

## Pricing

Volumes are billed at a rate per GB / minutely, and invoiced monthly. You can find [specific per-minute pricing here](/reference/pricing/plans#resource-usage-pricing).

You are only charged for the amount of storage used by your volumes. _Each volume requires aprox 2-3% of the total storage to store metadata about the filesystem, so a new volume will always start with some used amount of space used depending on the size._

## Backups

Services with volumes support manual and automated backups, backups are covered in the [backups](/reference/backups) reference guide.

## Caveats

Here are some limitations of which we are currently aware:

- Each service can only have a single volume
- Replicas cannot be used with volumes
- There is no built-in S/FTP support
- To prevent data corruption, we prevent multiple deployments from being active
  and mounted to the same service. This means that there will be a small amount
  of downtime when re-deploying a service that has a volume attached, even if there is a healthcheck endpoint configured
- Down-sizing a volume is not currently supported, but increasing size is supported
- When resizing a volume, all deployments must be taken offline to prevent data
  corruption
- There is no file browser, or direct file download. To access your files,
  you must do so via the attached service's mount point
- Docker images that run as a non-root UID by default will have permissions issues when performing operations within an attached volume. If you are affected by this, you can set `RAILWAY_RUN_UID=0` environment variable in your service.

## Support

Refer to the guide on [how to use volumes](/guides/volumes) for more details on how to use the feature.



================================================
FILE: src/docs/reference/webhooks.md
================================================
---
title: Webhooks
description: Learn about webhooks on Railway.
---

Webhooks can be used to notify your own application of alerts or deployment status changes.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743196876/docs/new-webhook_lrfxxa.png"
alt="New Webhook UI"
layout="responsive"
width={1200} height={754} quality={80} />


## Setting up a Project webhook

For information on how to setup webhooks, visit [this guide](/guides/webhooks).

## Deployment Status

When a deployment's status changes, Railway will send a notification via HTTP to the URL provided in the webhook configuration.

Deployment states can be found [here](/reference/deployments#deployment-states).

## Volume Usage Alerts

When a volume usage breaches certain thresholds, Railway will send a notification to pro customers via HTTP to the URL provided in the webhook configuration.

The thresholds that alert can be configured in the volume settings page.

## Muxers: Provider-specific Webhooks

Webhooks contain Muxers which will automatically transform the payload based on the webhook URL. Below are the currently supported Muxers:
- Discord
- Slack

For more information, visit [this guide](/guides/webhooks#muxers-provider-specific-webhooks).



================================================
FILE: src/docs/reference/errors/405-method-not-allowed.md
================================================
---
title: 405 Method Not Allowed
description: Learn how to troubleshoot and fix the '405 Method Not Allowed' error.
---

## What This Error Means

This error is returned by your application when you attempt to make a POST request to your application, but the request is redirected to a GET request.

Depending on the application, this may result in your application returning either a 405 Method Not Allowed or a 404 Not Found status code.

Seemingly POST requests are being turned into GET requests.

## Why This Error Can Occur

This occurs because your request was made using HTTP. Railway will attempt to redirect your insecure request with a 301 Moved Permanently status code.

When an HTTP client encounters a 301 Moved Permanently redirect, the client will follow the redirect. However, according to the <a href="https://www.rfc-editor.org/rfc/rfc7231#section-6.4.2" target="_blank">HTTP/1.1 specifications</a>, the client will typically change the request method from POST to GET when it follows the redirect to the new URL.

## Solution

Ensure you are explicitly using `https://` when calling your Railway-hosted services.

For example, if you are using `curl` to test your application, you should use the following command:

```bash
curl -X POST https://your-app.railway.app/api
```

Notice the `https://` prefix.

This ensures that the request is made using HTTPS, avoiding the 405 Method Not Allowed error that your application would otherwise return.


================================================
FILE: src/docs/reference/errors/application-failed-to-respond.md
================================================
---
title: Application Failed to Respond
description: Learn how to troubleshoot and fix the 'Application Failed to Respond' error.
---

<Image src="https://res.cloudinary.com/railway/image/upload/v1722017042/docs/application-error_wgrwro_i4tjkl.png"
alt="Screenshot of application failed to respond error"
layout="intrinsic"
width={1080} height={950}
quality={100} />

## What This Error Means

Seeing that your application failed to respond means that Railway's Edge Proxy cannot communicate with your application, causing your request to fail with a 502 (Bad Gateway) status code.

## Why This Error Can Occur

There are a few reasons why this error can occur, the most common being that your application is not listening on the correct host or port.

Another common reason is that your [target port](/guides/public-networking#target-ports) is set to an incorrect value.

In some far less common cases this error can also occur if your application is under heavy load and is not able to respond to the incoming request.

## Possible Solutions

The correct solution depends on the cause of the error.

### Target port set to the incorrect value

If your domain is using a [target port](/guides/public-networking#target-ports), ensure that the target port for your public domain matches the port your application is listening on.

This setting can be found within your [service settings](/overview/the-basics#service-settings).

<Image src="https://res.cloudinary.com/railway/image/upload/v1743470803/docs/custom-port_r8vhbx.png"
alt="Screenshot showing target ports on a domain"
layout="intrinsic"
width={1200}
height={999}
quality={100}
/>

In the screenshot above, the domain was previously incorrectly configured with port 3000, when the application was actually listening on port 8080.

### Application Not Listening on the Correct Host or Port

Your web server should bind to the host `0.0.0.0` and listen on the port specified by the `PORT` environment variable, which Railway automatically injects into your application.

Start your application's server using:

- Host = `0.0.0.0`
- Port = Value of the `PORT` environment variable provided by Railway.

**Below are some solution examples for common languages and frameworks.**

#### Node / Express

```javascript
// Use PORT provided in environment or default to 3000
const port = process.env.PORT || 3000;

// Listen on `port` and 0.0.0.0
app.listen(port, "0.0.0.0", function () {
  // ...
});
```

#### Node / Nest

```javascript
// Use `PORT` provided in environment or default to 3000
const port = process.env.PORT || 3000;

// Listen on `port` and 0.0.0.0
async function bootstrap() {
  // ...
  await app.listen(port, "0.0.0.0");
}
```

#### Node / Next

Next needs an additional flag to listen on `PORT`:

```bash
next start --port ${PORT-3000}
```

#### Python / Gunicorn

`gunicorn` listens on `0.0.0.0` and the `PORT` environment variable by default:

```bash
gunicorn main:app
```

#### Python / Uvicorn

`uvicorn` needs additional configuration flags to listen on `0.0.0.0` and `PORT`:

```bash
uvicorn main:app --host 0.0.0.0 --port $PORT
```

#### Go / net/http

This example is for `net/http` in the Go standard library, but you can also apply this to other frameworks:
```go
func main() {
  // ...
  // Use `PORT` provided in environment or default to 3000
  port := cmp.Or(os.Getenv("PORT"), 3000)

  log.Fatal(http.ListenAndServe((":" + port), handler))
  // ...
}
```

### Application Under Heavy Load

If you think your application could be under heavy load, you can confirm this by checking the `Metrics` tab within your service panel.

For example, if you are running a Node.js application, and see that your vCPU usage has peaked at any point to around 1 vCPU, this is a good indication that your application is under heavy load given Node's single-threaded nature.

If this is the case, you can scale your application horizontally to handle more requests.

[Horizontal scaling](https://docs.railway.com/reference/scaling#horizontal-scaling-with-replicas) can easily be done by adding more instances to one or more regions.



================================================
FILE: src/docs/reference/errors/enotfound-redis-railway-internal.md
================================================
---
title: ENOTFOUND redis.railway.internal
description: Learn how to troubleshoot and fix the 'ENOTFOUND' redis.railway.internal error.
---

## What This Error Means

The error code `ENOTFOUND` means that your application could not resolve the `redis.railway.internal` hostname to an IP address when trying to connect to the Redis database.

## Why This Error Can Occur

This error can occur for a few different reasons, but the main reason is because your application uses the [`ioredis`](https://www.npmjs.com/package/ioredis) package to connect to the Redis database, or uses a package that uses ioredis as a dependency such as [`bullmq`](https://docs.bullmq.io/).

By default, ioredis will only do an IPv4 (A record) lookup for the `redis.railway.internal` hostname.

That presents a problem given that Railway's private network uses only IPv6 (AAAA records).

The lookup will fail because the A records for `redis.railway.internal` do not exist.

Some other reasons that this error can occur would be -

- Your application and Redis database are in different projects.

- You are trying to connect to a Redis database locally with the private hostname and port.

For either of these reasons, the issue arises because the private network is scoped to a single environment within a [project](https://docs.railway.com/overview/the-basics#project--project-canvas), and would not be accessible from your local machine or other projects.

If the Redis database is in the same project as your application, and you are not trying to connect to a Redis database locally, `ioredis` is the likely cause of the error.

## Solutions

The solution depends on the package you are using to connect to the Redis database, though the solution is the same for both.

### ioredis

#### Using ioredis directly in your application

`ioredis` has an option to do a dual stack lookup, which will try to resolve the `redis.railway.internal` hostname using both IPv4 and IPv6 addresses (A and AAAA records).

To enable this, in your `REDIS_URL` environment variable, you can set the `family` to `0` to enable dual stack lookup.

```js
import Redis from 'ioredis';

const redis = new Redis(process.env.REDIS_URL + '?family=0');

const ping = await redis.ping();
```

#### Using bullmq

Similarly, for `bullmq` since it uses `ioredis` as a dependency, you can set the `family` option to `0` in your connection object.

```js
import { Queue } from "bullmq";

const redisURL = new URL(process.env.REDIS_URL);

const queue = new Queue("Queue", {
    connection: {
        family: 0,
        host: redisURL.hostname,
        port: redisURL.port,
        username: redisURL.username,
        password: redisURL.password
    }
});

const jobs = await queue.getJobs();

console.log(jobs);
```

#### Other packages

Above we covered the two most common packages that can cause this error, but there are other packages that use `ioredis` as a dependency that may also cause this error.

If you are using a package that uses `ioredis` as a dependency, you can try to find a way to set the `family` option to `0` either in your connection object or in your `REDIS_URL` environment variable. Similar to the examples above.

### Redis database in a different project

Create a [new Redis database](https://docs.railway.com/guides/redis) in the same [project](https://docs.railway.com/overview/the-basics#project--project-canvas) as your application, and connect it to the Redis database using the private network as shown in the examples above.

Read about best pracices to get the most out of the platform [here](/overview/best-practices).

### Connecting to a Redis database locally

The easiest way to connect to a Redis database locally is to use the public network.

You can do this is by using the `REDIS_PUBLIC_URL` environment variable to connect to the Redis database.

```js
import Redis from 'ioredis';

const redis = new Redis(process.env.REDIS_PUBLIC_URL);

const ping = await redis.ping();
```



================================================
FILE: src/docs/reference/errors/nixpacks-was-unable-to-generate-a-build-plan.md
================================================
---
title: Nixpacks Was Unable to Generate a Build Plan for This App
description: Learn how to troubleshoot and fix the 'Nixpacks was unable to generate a build plan for this app' error.
---

## What This Error Means

Railway uses [Nixpacks](https://nixpacks.com/docs/how-it-works) to analyze your application's files to generate a container image for your application.

Seeing the `Nixpacks was unable to generate a build plan for this app` error means that Nixpacks was unable to corelate your application's files with a supported build plan.

A build plan is a set of pre defined instructions that Nixpacks uses to build and run your application on the Railway platform.

A list of supported build plans can be found [here](https://nixpacks.com/docs/build-plans) under the `Language Support` section.

## Why This Error Can Occur

This error can occur for a variety of reasons, here are some common ones and what the failed build logs could look like for each scenario -

- You are attempting to deploy a monorepo.

    ```txt
    The contents of the app directory are:

    /frontend
    /backend
    ```
    Nixpacks doesn't know which directory you want to deploy from.

- Your application's files and or directory structure do not match any of the supported build plans.

    ```txt
    The contents of the app directory are:

    web.py
    requirements.txt
    ```

    This is obviously Python, a supported language, but Nixpacks doesn't know exactly to do with just a `web.py` file since it was never explicitly programmed to handle this.

- Your application is using a language or framework that is not supported by Nixpacks.

    ```txt
    The contents of the app directory are:

    main.nim
    nimble.nimble
    ```
    This is [Nim](https://nim-lang.org/), but unfortunately, Nixpacks doesn't have a build plan for Nim.

## Possible Solutions

### Monorepo Without Root Directory

If you are attempting to deploy a monorepo, you will need to set a [root directory](https://docs.railway.com/guides/build-configuration#set-the-root-directory) in your [service settings](https://docs.railway.com/overview/the-basics#service-settings) under the source repository section.

For a comprehensive guide on how to deploy a monorepo, please refer to our [Deploying a Monorepo](https://docs.railway.com/tutorials/deploying-a-monorepo) guide.

### Unsupported Project Layout or Directory Structure

While you may be using a language or framework that is supported by Nixpacks, the project layout or directory structure of your application may not be natively supported.

For example, if you are using Python but Python was not automatically detected, you can write your own [build plan](/docs/guides/configuring-builds).

In a `nixpacks.toml` file -

```toml
providers = ["python"] # Tell Nixpacks to use the Python build plan

[start]
cmd = "python web.py" # Tell Nixpacks to start your web.py file
```

Of course, this is just an example, but you can see how you can write your own build plan to support your application.

Supported Languages (Providers) can be found [here](https://nixpacks.com/docs) under the `Language Support` section.

If writing your own build plan is not an option, you can try to deploy your application using a [Dockerfile](/docs/guides/configuring-builds#using-a-dockerfile).

### Language or Framework Not Supported

If you believe your application should be supported, please [create an issue](https://github.com/railwayapp/nixpacks/issues/new) on the Nixpacks GitHub repository.

To unblock yourself, you can try to deploy your application using a [Dockerfile](https://www.geeksforgeeks.org/what-is-dockerfile/).

If your project contains a `Dockerfile` Railway will automatically use it to build your application.

Read more about [using a Dockerfile](/guides/dockerfiles).



================================================
FILE: src/docs/reference/errors/no-start-command-could-be-found.md
================================================
---
title: No Start Command Could be Found
description: Learn how to troubleshoot and fix the 'No Start Command Could be Found' error.
---

## What This Error Means

Railway uses [Nixpacks](https://nixpacks.com/docs/how-it-works) to analyze your application's files to generate a container image for your application.s

Seeing the `No start command could be found` error means that [Nixpacks](https://nixpacks.com/docs) was unable to automatically find an appropriate start command for your application.

A start command is a command that will be executed by Railway to run your application.

## Why This Error Can Occur

By default, Railway uses [Nixpacks](https://nixpacks.com/docs) to build and run your application. Nixpacks will try its best to find an appropriate start command for your application.

Some limited examples of start commands that Nixpacks will try are -

For Node based apps it will try to use `npm start`, `yarn start`, `pnpm start`, or `bun start` if a start script is present in your `package.json` file.

For Python apps it will try to use `python main.py` if a `main.py` file is present, or `python manage.py migrate && gunicorn {app_name}.wsgi` if a Django application is detected.

For Ruby apps it will try to use `bundle exec rails server -b 0.0.0.0` if a Rails application is detected.

Failing the automatic detection, Nixpacks will return the `No start command could be found` error.

## Possible Solutions

Since Nixpacks was unable to find a start command, you will need to specify a start command yourself.

You can do this in the [service settings](https://docs.railway.com/overview/the-basics#service-settings) under the `Start Command` field.

Some common start commands for various frameworks and languages are -

#### Node.js

```bash
node main.js
```
Where `main.js` is the entry point for your application, could be `index.js`, `server.js`, `app.js`, etc.

#### Next.js

```bash
npx next start --port $PORT
```

_Note: The `--port` flag is needed to ensure that Next.js listens on the correct port._

#### Nuxt.js

```bash
node .output/server/index.mjs
```

This will run Nuxt.js in production mode using its built-in Nitro server.

#### FastAPI

```bash
uvicorn main:app --host 0.0.0.0 --port $PORT
```

Where `main` is the name of the file that contains the `app` variable from FastAPI.

_Note: The `--host` and `--port` flags are needed to ensure that FastAPI listens on the correct host and port._

#### Flask

```bash
gunicorn main:app
```

Where `main` is the name of the file that contains the `app` variable from Flask.

#### Django

```bash
gunicorn myproject.wsgi
```

Where `myproject` is the name of the folder that contains your `wsgi.py` file.

#### Ruby on Rails

```bash
bundle exec rails server -b 0.0.0.0 -p $PORT
```

_Note: The `-b` and `-p` flags are needed to ensure that Rails listens on the correct host and port._

#### Vite

```bash
serve --single --listen $PORT dist
```

_Note: The `serve` command is needed to serve the static site files and can be installed by running `npm install serve` locally._

#### Create React App

```bash
serve --single --listen $PORT build
```

_Note: The `serve` command is needed to serve the static site files and can be installed by running `npm install serve` locally._



================================================
FILE: src/docs/reference/pricing/aws-marketplace.md
================================================
---
title: AWS Marketplace
description: Learn about Railway's AWS Marketplace offering and pricing.
---

Railway is available through the AWS Marketplace, allowing you to purchase and manage Railway through your AWS account.

## Offering

Railway offers solutions, peering templates and deployment to AWS- while using your AWS vendor relationship. For large Enterprises, Railway can be an option for large engineering teams to significantly reduce operational overhead.

## Pricing Structure

Pricing for Railway through AWS Marketplace is based on contract duration. You can pay upfront or in installments according to your contract terms with the vendor. The contract includes:

- A specified quantity of usage for the contract duration
- Usage-based pricing for any usage exceeding the entitled amount
- Additional charges applied on top of the contract price for overages

## Contract Terms

### 12-Month Contract

The standard offering is a 12-month contract with the following terms:

- Base price: $10,000.00 per 12 months
- Overage rate: $1.00 per unit
- Private pricing agreements available through the Railway sales team

## Refund Policy

All fees are non-refundable and non-cancellable except as required by law.

## Getting Started

To purchase Railway through AWS Marketplace:

1. Visit the Railway listing on AWS Marketplace
2. Click "View purchase options"
3. Contact the Railway sales team
4. Complete the purchase through your AWS account

## Support

For questions about AWS Marketplace purchases or to discuss private pricing agreements, [please contact our sales team.](https://cal.com/team/railway/work-with-railway)



================================================
FILE: src/docs/reference/pricing/faqs.md
================================================
---
title: Pricing FAQs
description: General common Questions & Answers related to Railway's pricing.
---

General common Questions & Answers related to Railway's pricing.

### Can I try Railway without a credit-card?

Yes. As a new Railway user, you can sign up for a [Free Trial](/reference/pricing/free-trial). You will receive a one-time grant of $5 to use on resources.

### What payment methods are accepted?

Railway accepts credit cards for plan subscriptions, usage, and to purchase prepaid credits. We support invoice payments for customers on the Enterprise plan.

### What will it cost to run my app?

With Railway, you are billed for the [subscription fee](/reference/pricing/plans#plan-subscription-pricing) of the plan you're subscribed to, and the [resource usage](/reference/pricing/plans#resource-usage-pricing) of your workloads.

To understand how much your app will cost to run on Railway, we recommend you to:

1. Deploy your project with the [Trial](/reference/pricing/free-trial) or Hobby plan
2. Allow it to run for one week
3. Check your Estimated Usage in the [Usage Section](https://railway.com/workspace/usage) of your Workspace settings

Keeping it running for one week allows us to rack up sufficient metrics to provide you with an estimate of your usage for the current billing cycle. You can then use this information to extrapolate the cost you should expect.

We are unable to give exact quotes or estimates for how much it will cost to run your app because it is highly dependent on what you're deploying.

For a rough approximation of the cost for running your app, try our [pricing calculator](https://railway.com/pricing#usage-estimation).

If you are supporting a commercial application, we highly recommend you to upgrade to the Pro plan for higher resource limits and access to [priority support](/reference/support#priority-threads).

### How do I prevent spending more than I want to?

Check out our [guide on optimizing usage](/guides/optimize-usage).

### Why is my resource usage higher than expected?

You can check your resource usage in the [Usage Section](https://railway.com/workspace/usage) of your Workspace settings. This includes a breakdown of your resource usage by project, along with the resource it's consuming (CPU, Memory, Network, etc.)

Common reasons for high resource usage include:

- Memory leaks in your application, causing it to consume more memory than necessary
- Higher traffic than usual, causing your app to consume more CPU and/or Network
- Certain templates or apps may be inherently more resource-intensive than others
- If you notice high egress cost in your bill, ensure that you are connecting to your Railway databases over [Private Networking](/guides/private-networking)
- If you have [PR deploys](/develop/environments#ephemeral-environments) enabled in your project, Railway will deploy a mirror copy of your workload(s) based on the environment it forks from (`production` by default). You are billed for those workload(s) running in the ephemeral environment

Unfortunately, we are unable to assist with figuring out why your bill is higher than normal, as it is entirely dependent on what you have deployed. Resource usage is billed in a manner akin to how a utility company operates: they can tell you the amount of electricity you've consumed, but they can't explain the reasons for your high usage. Similarly, we can only provide information on the quantity of resources you consume, not the reasons behind it.

### Why am I charged for more than $5 on the Hobby plan?

Railway's pricing has two components: a monthly subscription fee, and resource usage costs. While the Hobby plan includes $5 of resource usage per month, you are charged for any usage that exceeds this amount.

Learn more [here](/reference/pricing/plans#included-usage).

### Why is there an "Applied balance" on my invoice?

When the amount due on your invoice is less than $0.50, and you do not have a credit balance, Railway marks the invoice as paid and registers the amount to your credit balance as a debit to be charged on a future invoice.

### How do I view/manage/cancel my subscription?

To view and manage your subscription, visit the [billing section](https://railway.com/workspace/billing) of your workspace.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743469115/manage-subscription_qnqfjb.png"
alt="Screenshot of refund request button inside Account -> Billing"
layout="intrinsic"
width={1200} height={635} quality={100} />

Clicking on "Manage Subscription" will allow you to:

- Update your billing information (billing address, tax ID, etc.)
- Retrieve past invoices
- Cancel your subscription

### What happens when I cancel my subscription?

When you cancel your subscription, if you're on Hobby, Pro, or Enterprise, your plan will remain active through the end of your current billing period, and any usage will be charged at the end of the period.

If you are on the Hobby plan and using prepaid credits as your payment method, your subscription will be canceled immediately and any credit balance you may have will be forfeited.

### How do I remove my saved payment method from my account?

If your subscription is canceled and you have no pending invoices, you can remove your saved payment method by doing the following:

1. Go to the [billing page](https://railway.com/workspace/billing) for your workspace
2. Click "Delete" in the payment method section

### How do I switch to the auto-renewing Hobby plan billing model?

At this time, we do not directly support switching from a prepaid credit-based plan to an auto-renewing subscription.

You can, however, cancel your current plan, wait until you exhaust your remaining credits, and then sign back up on the auto-renewing plan.

**Note:** Cancelling your subscription does not immediately stop your [services](/overview/the-basics#services). Services will run until you exhaust your remaining credits.

<p><span style={{color: "var(--tw-prose-counters)"}}>1.</span> Cancel your current plan.</p>

    - Head over to the <a href="https://railway.com/workspace/billing" target="_blank">Billing page</a> of your workspace.
    - Click on **Manage Subscription**.
    - Click on **Cancel Plan**.

<p><span style={{color: "var(--tw-prose-counters)"}}>2.</span> Wait until you exhaust your remaining credits.</p>

<p><span style={{color: "var(--tw-prose-counters)"}}>3.</span> Sign up for the auto-renewing Hobby plan.</p>

        - Head over to the <a href="https://railway.com/workspace/plans" target="_blank">Plans page</a>.
        - Click **Deploy with Hobby**.
        - Enter your billing information.
        - Click on **Subscribe to Hobby Plan**.

        You are now on the auto-renewing subscription model.

### What happens if the payment fails for my subscription?

If your subscription payment fails, we retry the payment method on file over several days. We also inform you of the payment failure, in case your payment method needs to be updated.

If payment continues to fail, we flag your services to be stopped and send you a warning.

If we do not receive payment, your services are stopped until all open invoices have been paid.

### My services were stopped, what do I do?

Your [services](/overview/the-basics#services) may be stopped by Railway for the following reasons, along with their solutions -

- **Usage limits reached:** You've hit your [usage limits](/reference/usage-limits). Increase your usage limit or wait until the next billing period.

- **Trial credits exhausted:** You've run out of [trial credits](/reference/pricing/free-trial#how-does-the-trial-work). Consider upgrading to [a paid plan](/reference/pricing/plans#plans) to continue using the service.

- **Hobby credits exhausted:** You've run out of [prepaid credits](/reference/pricing/plans#credits). Add more credits to your account.

- **Failed payment:** Your payment method has failed. Update your payment method and [pay your outstanding invoice](https://railway.com/workspace/billing).

- **Unpaid invoice:** You have an outstanding invoice. [Pay your outstanding invoice](https://railway.com/workspace/billing).

In all cases, you can redeploy your services once the underlying issue is resolved, this can be done from the Removed deployment's [3-dot menu](/reference/deployments#deployment-menu).

**Note:** Although Railway will remove your deployment for any of the above reasons, Railway will not remove the [volume](/overview/the-basics#volumes) attached to the service.

### I am a freelancer or represent an agency. How do I manage my billing relationships with my clients?

Create a Pro plan on Railway and add the client to the workspace. If you run into issues when it's time to hand over your workload to your client, you can reach out to us over our [Central Station](https://station.railway.com).

### Why did I receive another invoice after cancelling my subscription?

You may receive an invoice containing charges for Resource Usage after you cancel your subscription. These are resource usages you have consumed in that billing cycle that we reserve the right to charge you for.

### How do I request a refund?

Please refer to [Pricing -> Refunds](/reference/pricing/refunds).

### Requesting an invoice re-issuance

If you encounter "This invoice can no longer be paid on Stripe" error or need
your Tax ID added to a previous invoice, follow the steps below to get an
invoice reissued.

1. Go to your workspace's billing page at [https://railway.com/workspace/billing](https://railway.com/workspace/billing). Ensure you select the correct workspace using the Workspace Switcher in the top left corner.

2. Scroll to **Billing History**. For the invoice you want to reissue, click on the Gear icon next to it and select **Re-issue**.

<Image
src="https://res.cloudinary.com/railway/image/upload/v1747010826/docs/cs-2025-05-12-08.14_3_lrlrz9.png"
alt="Screenshot of invoice options"
layout="intrinsic"
width={507} height={231} quality={100} />

3. Follow the instructions in the pop-up:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1747010832/docs/cs-2025-05-12-08.14_fyi63w.png"
alt="Screenshot of invoice re-issuance"
layout="intrinsic"
width={876} height={557} quality={100} />

Before you re-issue an invoice, please ensure your [billing information is
up-to-date](#how-do-i-viewmanagecancel-my-subscription).

Once your invoice has been re-issued, it will contain the latest billing
information, and appear in your **Billing History**.

If you do not receive the re-issued invoice within 24 hours, please reach
out to us at [station.railway.com](https://station.railway.com).



================================================
FILE: src/docs/reference/pricing/free-trial.md
================================================
---
title: Free Trial
description: Learn about Railway's free trial plan.
---

New users can take the platform for a spin by starting a free trial. The trial gives access to basic features and includes a one-time grant of $5.

## Full vs Limited Trial

Your trial experience depends on whether Railway can verify your account.

| Trial Type        | Deploy Code | Deploy Databases |
| ----------------- | ----------- | ---------------- |
| **Full Trial**    | ✅          | ✅               |
| **Limited Trial** | ❌          | ✅               |

When you sign up for a free Trial, you can connect your GitHub account to initiate verification. Your verification status depends on a number of factors, including the age and activity of your GitHub account.

If your account is not verified — either because you have not initiated the verification process or your account does not meet our criteria for verification — your trial experience will be limited to deploying databases.

Verification is a necessary measure to prevent abuse of the free Trial, limiting users from creating multiple accounts and reducing the risk of trial users deploying or hosting content that violates Railway's [Terms of Service](https://railway.com/legal/fair-use).

This is a fully automated process, and Railway does not respond to requests for verification. If your account is not verified, you can upgrade to the Hobby plan to unlock the full Railway experience.

## FAQs

### How do I get started with the free Trial?

If you do not already have a Railway account, you can sign up for a free Trial by clicking "Login" at [railway.com](https://railway.com/).

### How does the Trial work?

When you sign up for the free Trial, you will receive a one-time grant of $5 in credits that you can use to try out Railway. The credits will be applied towards any usage on the platform and expire in 30 days. If you upgrade to a plan while you still have a credit balance from the trial, the remaining balance will carry over to your new plan.

### What resources can I access during the Trial?

During the trial, you can access the same features as on the Hobby plan, however you will be limited to 1 GB of RAM and shared (rather than dedicated) vCPU cores. Additionally, your projects will be limited to 5 services per project.

As a trial user, you can always spin-up databases. However, to deploy code, you must be on the [Full Trial](#full-vs-limited-trial).

### What's the difference between the Limited Trial and the Full Trial?

If you connect your GitHub account, and we are able to verify it against a set of parameters, you will be on the Full Trial where you can deploy both code and databases.

If you do not connect a GitHub account, or we are not able to verify your account, you will be on the Limited Trial, where you can only deploy databases.

While you're on the Limited Trial, you can initiate verification at any time by visiting [railway.com/verify](https://railway.com/verify) in order to access the Full Trial experience.

### How far will the $5 one-time Trial grant last?

The longevity of your one-time trial grant depends on how many resources you consume within the 30 day period you sign-up for the platform. The more resources you deploy, the greater the consumption.

### Data Retention

Railway deletes stateful volumes created by Trial accounts 30 days after the expiration of your credits. To retain your data, upgrade your account after the Trial period.



================================================
FILE: src/docs/reference/pricing/plans.md
================================================
---
title: Pricing Plans
description: Learn about Railway's plans and pricing.
---

Railway plans and pricing are designed to give you maximum resources while only charging you for your usage. We charge a base subscription price, which goes towards your resources and usage.

## Plans

Railway offers three plans in addition to a [Free Trial](/reference/pricing/free-trial):

|                |                                                                                                                                                    |
| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Hobby**      | For indie hackers and developers to build and deploy personal projects                                                                             |
| **Pro**        | For professional developers and their teams shipping to production                                                                                 |
| **Enterprise** | For teams building and deploying production applications with the need for enterprise features related to compliance, SLAs, and account management |

### Subscription Pricing

Each Railway account needs an active subscription. The base subscription fee allows you to use the Railway platform and features included in the tier of your subscription. The subscription fee goes towards your usage-costs on the platform.

| Plan           | Price       |
| -------------- | ----------- |
| **Hobby**      | $5 / month  |
| **Pro**        | $20 / month |
| **Enterprise** | Custom      |

Read more about our plans at <a href="https://railway.com/pricing" target="_blank">railway.com/pricing</a>.

### Default Plan Resources

Depending on the plan you are on, you are allowed to use up these resources per service.

| Plan           | **RAM**    | **CPU**     | **Ephemeral Storage** | **Volume Storage** | **Image Size** |
| -------------- | ---------- | ----------- | --------------------- | ------------------ | -------------- |
| **Trial**      | **1 GB**   | **2 vCPU**  | **1 GB**              | **0.5 GB**         | **4 GB**       |
| **Hobby**      | **8 GB**   | **8 vCPU**  | **10 GB**             | **5 GB**           | **100 GB**     |
| **Pro**        | **32 GB**  | **32 vCPU** | **100 GB**            | **50 GB \***       | **100 GB**     |
| **Enterprise** | **64 GB**  | **64 vCPU** | **100 GB**            | **2 TB \***        | **100 GB**     |

Note that these are initial values and users on the Pro and Enterprise plans can request limit increases.

\* For Volumes, Pro users and above can self-serve to increase their volume up to 250 GB. Check out [this guide](/guides/volumes#growing-the-volume) for information.

### Resource Usage Pricing

On top of the base subscription fee above, Railway charges for the resources that you consume.

You are only charged for the resources you actually use, which helps prevent runaway cloud costs and provides assurances that you're always getting the best deal possible on your cloud spend.

| Resource                                 | Resource Price                                        |
| ---------------------------------------- | ----------------------------------------------------- |
| **RAM**                                  | $10 / GB / month ($0.000231 / GB / minute)            |
| **CPU**                                  | $20 / vCPU / month ($0.000463 / vCPU / minute)        |
| **Network Egress**                       | $0.05 / GB ($0.000000047683716 / KB)                  |
| [**Volume Storage**](/reference/volumes) | $0.15 / GB / month ($0.000003472222222 / GB / minute) |

To learn more about controlling your resource usage costs, read our FAQ on [How do I prevent spending more than I want to?](/reference/pricing/faqs#how-do-i-prevent-spending-more-than-i-want-to)

## Included Usage

The Hobby plan includes $5 of resource usage per month.

If your total resource usage at the end of your billing period is $5 or less, you will not be charged for resource usage. If your total resource usage exceeds $5 in any given billing period, you will be charged the delta.

Included resource usage is reset at the end of every billing cycle and does not accumulate over time.

**Examples**:

- If your resource usage is $3, your total bill for the cycle will be $5. You are only charged the subscription fee because your resource usage is below $5 and therefore included in your subscription
- If your resource usage is $7, your total bill for the cycle will be $7 ($5 subscription fee + $2 of usage), because your resource usage exceeds the included resource usage

Similarly, the Pro plan includes $20 of resource usage per month and the same examples and billing logic apply. If your usage stays within $20, you'll only pay the subscription fee. If it exceeds $20, you'll be charged the difference on top of the subscription.

### Additional Services

Railway offers [Business Class Support](/reference/support#business-class) as an add-on service to the Pro plan. Business Class Support is included with Enterprise. [Contact us](mailto:team@railway.com?subject=Business%20Class%20Support) to get started.

## Image Retention Policy

Railway retains images for a period of time after a deployment is removed. This is to allow for rollback to a previous deployment.

| Plan             | **Policy**    |
| ---------------- | ------------- |
| **Free / Trial** | **24 hours**  |
| **Hobby**        | **72 hours**  |
| **Pro**          | **120 hours** |
| **Enterprise**   | **360 hours** |

When a deployment is removed, the image will be retained for the duration of the policy.

Rolling back a removed deployment within the retention policy will restore the previous image, settings, and all variables with a new deployment; no redeployment is required.

A removed deployment that is outside of the retention policy will not have the option to rollback; instead, you will need to use the redeploy feature. This will rebuild the image from the original source code with the deployment's original variables.

## Committed Spend Tiers

Railway offers committed spend tiers for customers with consistent usage needs. Instead of negotiated contract pricing, customers can commit to a specific monthly spend level to unlock additional features and services.

For example, customers who commit to a $10,000/month spend rate can access dedicated hosts, with all pricing going towards their usage. This approach provides more flexibility and transparency compared to traditional contract pricing.

| Feature                                                         | Commitment Spend | Description                                                                                                                        |
| --------------------------------------------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- |
| **90-day log history**                                          | $200/month       | Extended log retention for better historical analysis and auditing.                                                                |
| **64 GB RAM / 64 vCPU**                                         | $500/month       | Access to increased computing resources at a committed monthly spend level.                                                        |
| [**Business Class Support**](/reference/support#business-class) | $500/month       | Improved support SLOs and response times. [Contact us](mailto:team@railway.com?subject=Business%20Class%20Support) to get started. |
| **HIPAA BAAs**                                                  | $1,000/month     | HIPAA Business Associate Agreements for compliant health data handling. Requires a year commitment paid monthly.                   |
| **Slack Connect channels**                                       | $2,000/month     | Dedicated Slack Connect channels for enhanced communication and support with the Railway team.                                     |
| **SLOs**                                                        | $2,000/month     | Service Level Objectives to ensure and track application performance.                                                              |
| **Dedicated Hosts**                                             | $10,000/month    | Custom dedicated infrastructure for enhanced performance and control.                                                              |

To learn more about committed spend tiers, please [contact our team](mailto:team@railway.com?subject=Business%20Class%20Support).

### Purchasing Credits

If you are already on the Pre-Paid plan, you can purchase credits from your Workspace's [Usage page](https://railway.com/workspace/usage).

### One-time Grant of Credits on the Free Trial

Users who create a new Trial account receive a free one-time grant of $5. Railway will expend any free credit before consuming any purchased credits. Trial plan users are unable to purchase credits without upgrading to the Hobby plan.

Learn more about Railway's Free Trial [here](/reference/pricing/free-trial).

## Partial Month Charges

In some cases, your billing method may be charged for the partial amount of your bill earlier in the billing cycle.
This ensures that your account remains in good standing, and helps us mitigate risk and fraud.

## FAQs

### Which plan is right for me?

- **Hobby** is for indie hackers and developers to build and deploy personal projects
- **Pro** is for professional developers and their teams shipping to production
- **Enterprise** is for dev teams building and deploying production applications with the need for enterprise features related to compliance, SLAs, and account management

### Can I upgrade or downgrade at any time?

You can upgrade any time, and when you do, you will get to the features of your new plan, as well as access to more powerful resources, immediately. When you downgrade, the changes will take effect at the beginning of your next billing cycle.

### What is the difference between subscription and resource usage?

There are two main components to your bill:

| Component          | Description                                                             |
| ------------------ | ----------------------------------------------------------------------- |
| **Subscription**   | Cost of the plan you're on                                              |
| **Resource Usage** | Cost of the resources you've consumed: `[cost per unit] x [used units]` |

Subscription is a flat fee you pay monthly for the tier you're subscribed to, and Resource Usage varies according to your resource consumption for the month.

### Can I add collaborators to my project?

Railway's Pro and Enterprise plans are designed for collaboration. These plans allow you to add members to your team and manage their permissions.

Read more about adding members to your Pro or Enterprise team [here](/reference/teams#inviting-members).

### How long does Railway keep my volume data if I am no longer on a paid plan?

Railway will delete your data from the platform as per the timeline below after sufficient warning.

| Plan                   | Days                       |
| ---------------------- | -------------------------- |
| **Free or Trial plan** | 30 days after expiry       |
| **Hobby plan**         | 60 days after cancellation |
| **Pro plan**           | 90 days after cancellation |

### Is the Hobby Plan free?

No. The Hobby Plan is $5 a month, and it includes a resource usage credit of $5. Even if you do not use the $5 in usage (CPU, Memory, egress), you always pay the $5 subscription fee.

### Can I get the Hobby plan subscription fee waived?

Railway waives the monthly Hobby plan subscription fee for a small set of active builders on the platform.

Eligibility is automatically assessed based on several factors, including your usage on the platform, your GitHub account, and more. If you qualify, you will be notified in the Dashboard or when you upgrade to the Hobby plan. If you do not qualify, you will not be eligible for the waiver.

This is a fully automated process, and Railway does not respond to requests for waiver.

### I prefer to prepay. Is that possible?

Not anymore as of March 30th, Railway requires the use of a post-paid card.

### What happens if I use credits as a payment method and my account runs out of credits?

If you are using credits as a payment method and your credit balance reaches zero, your subscription will be cancelled. You will no longer be able to deploy to Railway and we will stop all of your workloads. To resolve this, you will need to sign up for a new subscription after topping up sufficient credits.

### Why was I charged for a partial month of usage?

Railway has an automated system in place which can result in a partial amount of your bill being charged to your payment method, earlier in the billing cycle.

This is intended to ensure that your account remains in good standing, and helps us to mitigate risk and fraud.



================================================
FILE: src/docs/reference/pricing/refunds.md
================================================
---
title: Refunds
description: Learn about Railway’s refund policy and how to request a refund if eligible.
---

Refunds are for new customers who no longer wish to use Railway after initially trying it out. Railway offers refunds at its sole discretion, in line with our [Terms of Service](https://railway.com/legal/terms).

## Requesting A Refund

You can request for a refund in [Workspace Settings -> Billing](https://railway.com/workspace/billing) under **Billing History**:

<Image
src="https://res.cloudinary.com/railway/image/upload/v1743469117/refund_e0pzvw.png"
alt="Screenshot of refund request button inside Account -> Billing"
layout="intrinsic"
width={1200} height={289} quality={100} />

If you do not see a refund button next to your invoice, you are ineligible for a refund. **This decision is final** and we are unable to issue refunds for invoices that have been deemed ineligible.

After a refund is issued,

- It may take up to 5~10 business days for the refund to be processed and reflected in your account
- Your subscription may be cancelled immediately by us
- Your services may be taken offline immediately

If you'd like to stop using Railway, please remove your projects and cancel your subscription immediately. See "[How do I view/manage/cancel my subscription?](/reference/pricing/faqs#how-do-i-viewmanagecancel-my-subscription)" for further information.

## FAQs

### Why was my refund request denied?

Refunds are issued at our sole discretion. If your refund request was denied, it may be due to one of the following reasons:

- Your invoice contains resource usage costs. We generally do not issue refunds for resource usage, as those were resources you have consumed (in a manner akin to how a utility company charges for electricity or water)

- You have received a refund from Railway in the past

- You have violated our [Fair Use Policy](https://railway.com/legal/fair-use) and/or [Terms of Service](https://railway.com/legal/terms)



================================================
FILE: src/docs/tutorials/add-a-cdn-using-cloudfront.md
================================================
---
title: Add a CDN using Amazon CloudFront
description: Learn how to integrate Amazon CloudFront as a CDN for your Fastify app in this step-by-step guide.
---

## What is the purpose of a CDN?

>A CDN improves efficiency [of web applications] by introducing intermedeiary servers between the client and the server.  [These CDN servers] decrease web traffic to the web server, reduce bandwidth consumption, and improve the user experience of your applications.

*Source: [What is a CDN?](https://aws.amazon.com/what-is/cdn/)*

## About this Tutorial

We know that performance of your web applications is critical to your business, and one way to achieve higher performance is by implementing a CDN to serve data from servers closest to your users.

Many CDN options are available ([list from G2](https://www.g2.com/categories/content-delivery-network-cdn)), but in this tutorial, we will cover step-by-step how to implement a CDN using [Amazon CloudFront](https://aws.amazon.com/cloudfront/).

**Objectives**

In this tutorial, you will learn how to -
- Deploy a simple [Fastify server](https://fastify.dev/) to Railway
- Create a [CloudFront distribution](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html) in AWS and connect it to the Fastify server
- *(Optional)* Setup SSL and DNS for a custom domain managed in [Namecheap](https://www.namecheap.com/)

**Prerequisites**

To be successful using this tutorial, you should already have - 
- Latest version of the Railway [CLI installed](/guides/cli#installing-the-cli)
- An [AWS account](https://aws.amazon.com/) with permissions to create new resources
- Latest version of the [AWS CLI](https://aws.amazon.com/cli/) installed and authenticated to your AWS account
- Latest version of the [AWS CDK](https://aws.amazon.com/cdk/) installed
- *(Optional)* A Namecheap account to connect a custom domain

**Let's get started!**

## 1. Create and Deploy a Fastify Server

First, let's create and deploy a simple Fastify server using the [Railway CLI](/guides/cli#installing-the-cli)

- On your local machine, create a folder called "fastify"
- Inside of the folder, create a file called "server.js"
- Run the following commands to initialize the project and install the required packages using npm
    ```plaintext
    npm init -y
    npm i fastify @fastify/etag
    ```
- Add the following code to the "server.js" file
    ```javascript
    const Fastify = require('fastify');
    const fastifyEtag = require('@fastify/etag');

    const fastify = Fastify();
    fastify.register(fastifyEtag);


    fastify.get('/dynamic', async (request, reply) => {
        console.log('Received request on dynamic route');

        const staticContent = {
            message: 'This is some dynamic content',
            timestamp: new Date().toISOString(),
        };

        reply.type('application/json');
        reply.headers({
            'cache-control': 'must-revalidate, max-age=60'
        });

        reply.send(staticContent);
    });

    fastify.get('/static', async (request, reply) => {
        console.log('Received request on static route');

        const staticContent = {
            message: 'This is some static content',
        };

        reply.type('application/json');
        reply.headers({
            'cache-control': 'must-revalidate, max-age=60'
        });

        reply.send(staticContent);
    });

    fastify.get('/staticEtag', async (request, reply) => {
        console.log('Received request on staticEtag route');

        const staticContent = {
            message: 'This will serve a static etag',
        };

        reply.type('application/json');
        
        reply.headers({
            'cache-control': 'must-revalidate, max-age=60'
        });

        reply.header('etag', '"foobar"');
        reply.send(staticContent);
    });

    const start = async () => {
        try {
            await fastify.listen({ port: Number(process.env.PORT) || 3000, host: '0.0.0.0' });
            console.log(`Server is running at PORT:${Number(process.env.PORT) || 3000}`);
        } catch (err) {
            fastify.log.error(err);
            process.exit(1);
        }
    };

    start();
    ```
- Run the following command to initialize a new project in Railway
    ```plaintext
    railway init
    ```
- Follow the prompts and name your project "fastify-cdn"
- Run the following command to deploy your Fastify server
    ```plaintext
    railway up -d
    ```
- Run the following command to generate a domain for the Fastify service
    ```plaintext
    railway domain
    ```
- Run the following command to open your Railway project in your browser
    ```plaintext
    railway open
    ```

### Checkpoint

Nice!  You now have a Fastify server running in Railway serving three routes, which will serve to demonstrate a few different concepts related to caching:
- `/static` - the static route serves a static message which never changes, unless the code is updated
- `/dynamic` - the dynamic route servers a dynamic message which changes when the route is accessed and the `Date()` function runs
- `/staticEtag` - the staticEtag route demonstrates how you can manually set an [HTTP Etag](https://www.rfc-editor.org/rfc/rfc9110.html#section-8.8.3) on a route

    *Note: The Fastify server code above implements [Fastify's eTag plugin](https://www.npmjs.com/package/@fastify/etag).*


#### Observe Route Behavior with no CDN

To observe the behavior without a CDN in place, navigate to any of the routes above from the Railway-provided domain, your request will always go directly to the service running in Railway.

One way you can visualize this, is by navigating to the `/static` route in your browser, opening up Network Tools, and observing that each request always receives a **HTTP 200** status code:

<Image src="https://res.cloudinary.com/railway/image/upload/v1719001891/docs/tutorials/CDN/CleanShot_2024-06-21_at_15.28.36_2x_em6o5s.png"
alt="Screenshot of DevTools no CDN"
layout="responsive"
width={1477} height={623} quality={100} />

Since the data for the route has not been cached on a CDN, the server receives every request, generates a new timestamp, and sends it back with a 200 status code.

Once we setup the CloudFront CDN, we will see how this behavior changes.

## 2. Create a CloudFront Distribution in AWS

*This step assumes you have already [configured the AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) to connect to your AWS account.*

Now let's create a CloudFront distribution using the AWS CDK.

- In your "fastify" folder, create a new folder called "cloudfront"
- Within the "cloudfront" folder, run the following command to initialize a new CDK project in TypeScript
    ```plaintext
    cdk init app --language typescript
    ```
- Run the following command to install the CDK packages for CloudFront
    ```plaintext
    npm install @aws-cdk/aws-cloudfront @aws-cdk aws-cloudfront-origins @aws-cdk/core
    ```
- Replace the contents of the "/bin/cloudfront.ts" file with the following code.  

    *When you run `cdk bootstrap` in the following steps, the account and region environment variables should be added for you.*
    ```javascript
    #!/usr/bin/env node
    import 'source-map-support/register';
    import * as cdk from '@aws-cdk/core';
    import { CloudfrontCdkStack } from '../lib/cloudfront-stack';

    const app = new cdk.App();
    new CloudfrontCdkStack(app, 'CloudfrontCdkStack', {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION,
    },
    });
    ```
    
- Replace the contents of the "/lib/cloudfront-stack.ts" file with the following code
    ```javascript
    import * as cdk from '@aws-cdk/core';
    import * as cloudfront from '@aws-cdk/aws-cloudfront';
    import * as origins from '@aws-cdk/aws-cloudfront-origins';

    export class CloudfrontCdkStack extends cdk.Stack {
    constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
        super(scope, id, props);

        // Replace with the Domain provided by Railway
        const origin = new origins.HttpOrigin('RAILWAY PROVIDED DOMAIN');

        // Custom Cache Policy
        const cachePolicy = new cloudfront.CachePolicy(this, 'CustomCachePolicy', {
            cachePolicyName: 'CustomCachePolicy',
            minTtl: cdk.Duration.seconds(0),
            maxTtl: cdk.Duration.seconds(86400),
            defaultTtl: cdk.Duration.seconds(60),
            cookieBehavior: cloudfront.CacheCookieBehavior.all(),
            queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),
            headerBehavior: cloudfront.CacheHeaderBehavior.allowList(
                'CloudFront-Viewer-Country',
                'CloudFront-Is-Mobile-Viewer'
            ),
        });

        // CloudFront distribution
        const distribution = new cloudfront.Distribution(this, 'Distribution', {
        defaultBehavior: {
            origin,
            cachePolicy: cachePolicy,
            viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,
        },
        });
    }
    }
    ```
    **IMPORTANT: Be sure to replace the `HttpOrigin` in the code above with the Railway-provided domain (e.g. *fastify-server.up.railway.app*)**
- Run the following command to bootstrap the environment for the CDK
    ```plaintext
    cdk bootstrap
    ```
- Run the following command to deploy the CloudFront distribution
    ```plaintext
    cdk deploy
    ```

*If you experience any problems with the AWS utilities used in this step, you can create and configure the CloudFront distribution manually using the AWS Management Console, using the same settings defined in the "cloudfront-stack.ts" file.*

### Checkpoint 2

Great job!  You should now have a CloudFront distribution pointed to your Fastify service in Railway.  Your distribution will be assigned a domain similar to the one below:

- `https://d1a23bcdefg.cloudfront.net`

Now let's see how the behavior for the `/dynamic` route has changed when accessing the server from the CloudFront distribution domain.

<Image src="https://res.cloudinary.com/railway/image/upload/v1719001866/docs/tutorials/CDN/CleanShot_2024-06-21_at_15.24.47_2x_knqo9f.png"
alt="Screenshot of DevTools with CDN"
layout="responsive"
width={1477} height={623} quality={100} />

Notice how the first request was served an **HTTP 200** from the server with the dynamically generated data, but subsequent requests were served a **HTTP 304 Not Modified** code.

This is the CloudFront CDN in action!

If you inspect the route definition for `/dynamic`, you'll see that the headers include a `cache-control` parameter:

    ```javascript
    reply.headers({
        'cache-control': 'must-revalidate, max-age=60'
    });
    ```
This cache control definition tells CloudFront to revalidate the data at the route after 60s.  

#### Cache Behavior

When the initial request is made to the route, CloudFront retrieves the data from the server, then stores it.  For 60s after the intial request, CloudFront will serve the cached response with **HTTP 304**, and after 60s, it will check the server for new data.

#### Faster Response Time

In the screenshot above, take note of the Size and Time columns.

When CloudFront serves the cached data, it takes significantly less time to resolve the route, and, probably due to less headers, the Size of the message is also smaller.


## 3. Connect a Custom Domain with SSL enabled

Now that the CloudFront distribution is up and running, you may want to connect a custom domain and ensure SSL is enabled.  

This step will *quickly* cover how to generate a SSL certificate in AWS and configure the custom domain in Namecheap and CloudFront.

Let's first generate an SSL certificate -
- In AWS Management Console, navigate to your CloudFront distribution
- Under the General tab, click the `Edit` button
- Under *Custom SSL certificate*, click the *"Request certificate"* link below the input field.  This will take you to AWS Certificate Manager.
- Click the `Next` button to request a public certificate
- Enter your fully qualified domain name, e.g. `www.railway.com`
  - If you'd like the cert to include the apex domain, click `Add another name to this certificate` and enter it, e.g. `railway.com`
- Click the `Next` button to generate the certificate
- In **Namecheap**, in the Advanced DNS section for the domain, add the host record(s).
  - If you set up the certificate for both www and the apex domain, you will add two **CNAME** records
  - The CNAME name value provided by AWS, should be used as the **Host** value in Namecheap.
  - The CNAME name value provided by AWS, includes the domain name, but in Namecheap, you should add everything except the domain, e.g. 
    - if your CNAME name is `_6cf3abcd1234abcd1234aabb11cc22.www.railway.com` 
    - you should add `_6cf3abcd1234abcd1234aabb11cc22.www` to the **Host** value in Namecheap
- Once you add the DNS records in Namecheap, refresh the Certificate status page in AWS to confirm the Status shows **Success**

Now, we'll add the certificate in the CloudFront distribution settings and finish setting up the custom domain -
- Return the the CloudFront distribution settings
- Under *Custom SSL certificate*, choose the certificate you just created from the drop down menu
- Under *Alternate domain name (CNAME)*, add your custom domain.
  - If you want both www and apex domain, be sure to add both
- At the bottom, click the `Save changes` button
- In **Namecheap**, in the Advanced DNS section for the domain, add the host record(s)
  - If you are setting up both www and the apex domain, you will add two **ALIAS** records
  - The record value should be your Cloudfront distribution domain, e.g. `d1a23bcdefg.cloudfront.net`
  - The **Host** value should be `@` for the apex domain and `www` for the www subdomain.

That's it!  You should now be able to navigate to the three routes in the Fastify service from your custom domain.

## Conclusion

Congratulations!  You have deployed a Fastify app to Railway, created a CloudFront distribution in AWS connected to the Railway service, and (optionally) connected your custom domain in Namecheap to the CloudFront distribution with SSL enabled.

#### Additional Resources

This is a *very* simple tutorial covering the most basic steps to implement CloudFront CDN in your stack.  There are many, many more concepts you should explore related to CDNs and caching in general, to take full advantage of the technology and tailor it to your specific needs.

We recommend checking out these resources to start:
- [What is a CDN?](https://aws.amazon.com/what-is/cdn/)
- [What is caching?](https://www.cloudflare.com/learning/cdn/what-is-caching/)
- [CDN vs Caching](https://www.fastly.com/blog/leveraging-browser-cache-fastlys-cdn/)



================================================
FILE: src/docs/tutorials/bridge-railway-to-rds-with-tailscale.md
================================================
---
title: Create a Bridge from Railway to AWS RDS with Tailscale
description: Learn how to securely access your AWS RDS database from Railway using a Tailscale subnet router.
---

## How can we privately send traffic from Railway to RDS?

In this tutorial, you will set up a Tailscale bridge to AWS RDS. This creates a secure tunnel between your Railway services and your AWS RDS database instances. This allows you to connect to your RDS databases privately without exposing traffic to the public internet.

### Objectives

In this tutorial, you will:

1. Deploy a Tailscale subnet router EC2 instance
1. Set up split DNS for domain resolution
1. Verify and test connectivity to your RDS instance
1. Route traffic from Railway to RDS using Railtail

This tutorial is in depth, so if it's your first time using Tailscale or setting up a bridge to your RDS instance, we'll cover every detail!

### Prerequisites

1. You will need an [AWS IAM access key or IAM Role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html) to stand up resources with Terraform or OpenTofu.

  **NOTE:** While you can just put these secrets in a `~/.aws` folder or a `terraform.tfvars` file, its a good practice to avoid putting secrets on disk unencrypted. If you have 1Password, you can use [1Password Secret References](https://developer.1password.com/docs/cli/secret-references/) so that your secrets are never stored permenantly on disk. This is especially important to prevent AI tools from reading your keys and as an extra layer of protection from commiting secrets to your git repositories.

2. You'll need to install [Terraform](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli) or [OpenTofu](https://opentofu.org/docs/intro/install/).

3. You will need to generate a new ssh key that we can use to provision the AWS Instance.

4. You will need a [Tailscale account](https://tailscale.com/) and have [Tailscale installed](https://tailscale.com/kb/1347/installation) on your local machine. The free tier is generous and sufficient for this tutorial.

5. You will need to generate, store, and reference a [Tailscale Auth Key](https://login.tailscale.com/admin/settings/keys)

```bash
# Set your AWS credentials
export AWS_ACCESS_KEY_ID=my-access-key
export AWS_SECRET_ACCESS_KEY=my-secret-key
# or with 1Password
export AWS_ACCESS_KEY_ID=$(op read op://vault-name/aws-personal-access-key/access_key_id)
export AWS_SECRET_ACCESS_KEY=$(op read op://vault-name/aws-personal-access-key/secret_access_key)

# Generate an SSH key for the EC2 instance if you don't have one
ssh-keygen -t rsa -b 2048 -f ~/.ssh/tailscale-rds

# Set your TailScale Auth Key
# terraform.tfvars
#...
tailscale_auth_key = "tskey-auth-1234567890"
# or with 1Password
tailscale_auth_key = $(op read op://vault-name/tailscale-auth-key/credential)
```

### Generate a Tailscale Auth Key

- Head over to the [Keys](https://login.tailscale.com/admin/settings/keys) page located within the settings menu on the Tailscale dashboard.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349121/docs/tutorials/tailscale-subnet-router/keys_page_vohahp.png"
alt="screenshot of the tailscale settings page"
layout="intrinsic"
width={1261} height={772} quality={100} />

- Click **Generate auth key**.

  Put in a description like "AWS RDS Subnet Router" and leave all other settings as the default.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349121/docs/tutorials/tailscale-subnet-router/generate_auth_key_oxqr8m.png"
alt="screenshot of the generate auth key modal in tailscale"
layout="intrinsic"
width={602} height={855} quality={100} />

- Click **Generate key**.

  Tailscale will now show you the newly generated auth key. **Be sure to copy it down, and store it in secret store (like 1Password)**.

- Click **Done**.

## git clone the example project

We've prepared [an example project built in Terraform](https://github.com/echohack/rds-tailscale) (or OpenTofu if you prefer) to stand up all the AWS resources you'll need to test out connectivity to RDS.

```bash
git clone git@github.com:echohack/rds-tailscale.git
```

### Create terraform.tfvars

Create a `terraform.tfvars` file to store your variables:

```
aws_account = "your-aws-account-id"
rds_password = "your-secure-rds-password"
tailscale_auth_key = "tskey-your-tailscale-auth-key"
```

**!IMPORTANT**: Make sure you update your `userlist.txt` password to the same password as your new `rds_password`.

### Deploy

Initialize and apply the Terraform configuration:

```bash
terraform init
terraform plan
terraform apply
```

Review the changes and type `yes` to confirm deployment.

When the deployment completes, you'll see outputs including instructions for configuring split DNS and how to run the test script to verify your deployment.

## Configure Split DNS in Tailscale

Split DNS allows Tailscale to resolve AWS RDS domain names using AWS DNS servers, which is required for RDS connectivity.

- Go to the [Tailscale Admin Console DNS settings](https://login.tailscale.com/admin/dns)
- Click **Add Nameserver** → Choose **Custom**

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349122/docs/tutorials/tailscale-subnet-router/tailscale_nameservers_en8oma.png"
alt="screenshot of the nameservers dropdown in tailscale"
layout="intrinsic"
width={813} height={683} quality={100} />

- Enter the VPC DNS server IP: `172.16.0.2` (VPC CIDR base + 2)
- Enable **Restrict to domains**
- Enter: `us-west-2.rds.amazonaws.com` (replace `us-west-2` with your AWS region)

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349120/docs/tutorials/tailscale-subnet-router/add_nameserver_mlkk5y.png"
alt="screenshot of the add nameserver modal in tailscale"
layout="intrinsic"
width={602} height={572} quality={100} />

- Click **Save**

## Approve Advertised Subnet Routes and/or Enable Route Acceptance on Your Devices

For devices you can't install Tailscale on, you need to [approve the routes in the Tailscale admin UI](https://login.tailscale.com/admin/machines).
- You will see a `Subnets !` badge on the machine you set up. This indicates it is advertising routes but hasn't been approved.
- Click the `...` next to the machine
- Click the checkbox and click save.
- Now the `!` will be removed from the `Subnets` badge, indicating that the advertised routes are approved.

For your local devices to access the subnet routes advertised by the subnet router, you can also enable route acceptance via the CLI:

```bash
tailscale set --accept-routes=true
```

## Verify Connectivity

Run the verification script:

```bash
./verify_tailscale_routing.sh <rds_endpoint> postgres <password> rds-tailscale
```

The endpoint and other details can be found in the Terraform outputs after deployment.

If you're running into issues at this point, head down to the Troubleshooting section to help figure out what might be wrong.

## Connect to Your RDS Instance

Once the verification passes, you can connect to your RDS instance directly from your local machine using standard PostgreSQL tools or any database client:

```bash
psql -h <rds_endpoint> -U postgres -d tailscale_test_db
```

If you've never used Tailscale before, take a moment to familiarize yourself with the `tailscale` CLI and wrap your head around what's happening here. This is fantastic! We're routing traffic privately to our RDS instance from our local machine!

Similarly, you can now use this subnet router to route traffic from other devices in your Tailnet, including as a way to create a bridge between networks. Now we're ready to connect our Railway services! Let's do that next.

## Deploy Railtail into your project

Railtail is a project that will forward SOCK5 traffic for us RDS, because right now Railway containers don't allow priviledge escalation. This way we can use private IPv6 networking to Railtail and forward our traffic privately to our AWS Subnet Router, which will then route to RDS.

- In a project where you want to bridge services privately to RDS, click the Create button in the upper right corner. Then select Template -> Type in RailTail.

You will need four variables to deploy Railtail and start bridging traffic to your RDS instance:

- **LISTEN_PORT**: This is the port that Railtail listens on to forward traffic. We like `41641`, which is Tailscale's default UDP port for making peer-to-peer connections.
- **TARGET_ADDR**: The target address that Railtail will forward traffic to. In our case it should be `tailscale-test-db.<subnet>.<region>.rds.amazonaws.com`. You can grab this from the output of the terraform run we did earlier, or in the AWS console.
- **TS_AUTH_KEY**: The tailscale auth key we set up earlier. In the format: `tskey-auth-0123456789`
- **TS_HOSTNAME**: The friendly DNS name you can reference in your Tailnet. You can name this whatever you want. `railtail` or `railtail-project-name` is a good name here.

Click **Deploy Template**.

## Bridge Traffic to RDS

Now you can connect any service to your RDS backend. Add a variable to your connecting Service like: `DATABASE_URL="postgresql://USERNAME:PASSWORD@${{railtail.RAILWAY_PRIVATE_DOMAIN}}:${{railtail.LISTEN_PORT}}/postgres"`

That's it! Now you're bridging traffic privately from Railway to RDS.

<Image src="https://res.cloudinary.com/railway/image/upload/v1747163544/docs/tutorials/tailscale-subnet-router/railtail-to-rds_g10rrq.png"
alt="screenshot of railtail"
layout="intrinsic"
width={1544} height={533} quality={100} />

## Cleanup

When you're done with the tutorial, and so that AWS doesn't charge you money while your instances sit idle, you can destroy the resources you created automatically with:

```bash
terraform destroy -auto-approve
```

## Troubleshooting

If you encounter issues with connectivity check the `verify_tailscale_routing` script included with the repository. You may be encountering:

1. **DNS Resolution**:
  - Verify split DNS configuration in Tailscale.
  - Check that the correct AWS DNS server IP is being used.

2. **Route Acceptance**:
  - Ensure subnet routes are being advertised by the subnet router and that you've approve those routes in the Tailscale Admin Console.
  - Verify your client is accepting routes with `tailscale status`.

3. **Database Connection Failures**:
  - Check security group rules to ensure the subnet router can access RDS.
  - Confirm you're using the correct credentials. (!IMPORTANT `manage_master_user_password = false` must be set or else the RDS module will ignore using your set password)

4. **Subnet Router Issues**:
  - Check that IP forwarding on is enabled with `cat /proc/sys/net/ipv4/ip_forward`.
  - Verify Tailscale is running with `sudo systemctl status tailscaled`.

## Additional Resources

- [Tailscale: Subnet Routers](https://tailscale.com/kb/1019/subnets)
- [Tailscale: AWS RDS](https://tailscale.com/kb/1235/rds-aws/)
- [Tailscale: High Availability](https://tailscale.com/kb/1115/high-availability)
- [AWS RDS PostgreSQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html)
- [PgBouncer Documentation](https://www.pgbouncer.org/usage.html)
- [RDS Parameter List](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.PostgreSQL.CommonDBATasks.Parameters.html)
- [Terraform AWS VPC Provider](https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/latest)
- [Terraform AWS RDS Module Provider](https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/latest#input_parameters)
- [Tailscale Site-to-Site VPN Example (Terraform)](https://github.com/tailscale/terraform-aws-tailscale-site2sitevpn/tree/main)
- [Set Up a Tailscale Subnet Router on Railway](https://docs.railway.com/tutorials/set-up-a-tailscale-subnet-router)



================================================
FILE: src/docs/tutorials/deploy-an-otel-collector-stack.md
================================================
---
title: Deploy an OpenTelemetry Collector and Backend on Railway
description: Monitor and trace your applications by deploying an OpenTelemetry Collector and backend on Railway.
---

## What is OpenTelemetry?

>OpenTelemetry is an Observability framework and toolkit designed to create and manage telemetry data such as traces, metrics, and logs. Crucially, OpenTelemetry is vendor- and tool-agnostic, meaning that it can be used with a broad variety of Observability backends, including open source tools like Jaeger and Prometheus, as well as commercial offerings. 

## About this Tutorial

There is an overwhelming number of options for applying OpenTelemetry in your software stack.  This tutorial uses the libraries and tools endorsed and/or maintained by the OpenTelemetry community.

OpenTelemetry is commonly referred to simply as "Otel".  You will see both terms used throughout this tutorial.

**Objectives**

In this tutorial you will learn how to -
- Deploy the <a href="https://opentelemetry.io/docs/collector/" target="_blank">OpenTelemetry Collector</a>, listening for traces, metrics, and logs.
- Deploy a backend stack ([Jaeger](https://www.jaegertracing.io/), [Zipkin](https://zipkin.io/), and [Prometheus](https://prometheus.io/)) to receive the traces, metrics, and logs from the collector
- Build and instrument an <a href="https://expressjs.com/" target="_blank">Express</a> application to send data to the collector.

**Prerequisites**

To be successful using this tutorial, you should already have - 

- Latest version of Railway [CLI installed](/guides/cli#installing-the-cli)
- A GitHub account

**OpenTelemetry Collector Template and Demo**

If you are looking for a quicker way to get started, you can deploy the collector and backend stack from a template by clicking the button below.
<a href="https://railway.com/template/7KNDff" target="_blank"><img src="https://railway.com/button.svg" alt="Deploy on Railway" /></a>

We also have a live demo of the project you will build in this tutorial <a href="https://classy-writing-production.up.railway.app/" target="_blank">here</a>, and you can access the code repository <a href="https://github.com/railwayapp-templates/opentelemetry-collector-stack" target="_blank">here in Github</a>.  You can find some example apps, including the one we will build in this tutorial, in the <a href="https://github.com/railwayapp-templates/opentelemetry-collector-stack/tree/main/exampleApps" target="_blank">exampleApps folder</a>.

**Let's get started!**

## 1. Deploy the Backend Services

First, we will deploy the backend services: 

- <a href="https://www.jaegertracing.io/" target="_blank">Jaeger</a> - an open-source, distributed tracing system that will receive telemetry data from the collector
- <a href="https://zipkin.io/" target="_blank">Zipkin</a> - also an open-source, distributed tracing system that will receive telemetry data from the collector
- <a href="https://prometheus.io/" target="_blank">Prometheus</a> - an open-souce, systems monitoring and alerting toolkit that will receive telemetry data from the collector

*Jaeger and Zipkin offer similar functionality, and it is not necessary to run both.  The intent is to give you different examples of backend services.*

Each of the following steps should be completed in the same Railway project.

### Add Jaeger Service

- Add a New service by clicking `+ New`
- Select Docker Image as the Source
- Add `jaegertracing/all-in-one` as the image name and hit Enter
- Add the following variable to the service
    ```plaintext
    PORT=16686
    ```
    *This is the port that serves the UI.  Setting this variable allows you to access the Jaeger UI from your browser*
- In the Settings tab, rename the service `Jaeger`
- Click `Deploy` to apply and deploy the service
- In the Settings tab, under Networking, click `Generate Domain`

You should be able to acess the Jaeger UI by clicking on the service domain.

### Add Zipkin Service

- Add a New service by clicking `+ New`
- Select Docker Image as the Source
- Add `openzipkin/zipkin` as the image name and hit Enter
- Add the following variable to the service
    ```plaintext
    PORT=9411
    ```
    *This is the port that serves the UI.  Setting this variable allows you to access the Zipkin UI from your browser*
- In the Settings tab, rename the service `Zipkin`
- Click `Deploy` to apply and deploy the service
- In the Settings tab, under Networking, click `Generate Domain`

You should be able to acess the Zipkin UI by clicking on the service domain.

### Add Prometheus Service

- Add a New service by clicking `+ New`
- Select Template as the Source
- Type Prometheus and select the Prometheus template (be sure to select [this one](https://railway.com/template/KmJatA))
- Click `Deploy` to apply and deploy the service

*The template deploys with the proper UI port already configured to enable accessing the Prometheus UI from your browser*

You should be able to acess the Prometheus UI by clicking on the service domain.

## 2. Deploy the OpenTelemetry Collector

The OpenTelemetry Collector is a vendor-agnostic service that receives, processes, and exports telemetry data.  

It is not strictly necessary to run a collector when implementing OpenTelemetry, but it is recommended by the OpenTelemetry community.  More information on the subject can be found <a href="https://opentelemetry.io/docs/collector/#when-to-use-a-collector" target="_blank">here</a>.

### Fork the Open Telemetry Collector repository
- Navigate to the <a href="https://github.com/railwayapp-templates/opentelemetry-collector-stack" target="_blank">Open Telemetry Collector repository</a> in GitHub
- Click `Fork` then `Create fork`

### Add the Open Telemetry Service
In the Railway project -
- Add a New service by clicking `+ New`
- Select GitHub Repo as the Source
- Select the `opentelemetry-collector-stack` repository (if you renamed the repo in the previous step, yours will be named differently) 
- Add the following variable to the service
    ```plaintext
    PORT=55679
    ```
    *This is the port that serves the collector's debugging UI.  Setting this variable allows you to access the UI from your browser*
- In the Settings tab, rename the service `OpenTelemetry Collector`
- Click `Deploy` to apply and deploy the service
- In the Settings tab, under Networking, click `Generate Domain`

The Collector's debugging UI is enabled by default and accessible from the browser.  This is controlled by the inclusion of the <a href="https://github.com/railwayapp-templates/opentelemetry-collector-stack/blob/main/otel-collector-config.yaml#L31" target="_blank">zpages extension in the collector's configuration yaml</a>.  You can read more about the UI and the available routes, in the collector's <a href="https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension/zpagesextension/README.md" target="_blank">source repo</a>. 

---
## Checkpoint

Congrats!  You should now have a working OpenTelemetry Collector along with a backend stack to which the collector will forward data.  Your project in Railway should look something like this - 

<Image src="https://res.cloudinary.com/railway/image/upload/v1709927450/docs/tutorials/otel/CleanShot_2024-03-08_at_13.47.12_2x_iuhawv.png"
alt="Screenshot of Project Canvas"
layout="responsive"
width={1177} height={823} quality={100} />

Be sure to familiarize yourself with the Otel Collector's <a href="https://github.com/railwayapp-templates/opentelemetry-collector-stack/blob/main/otel-collector-config.yaml" target="_blank">configuration file</a>.  The documentation on the format and structure of the file can be found <a href="https://opentelemetry.io/docs/collector/configuration/" target="_blank">here in Otel's official docs</a>.

---

## 3. Build and Instrument an Express App

Now that the collector stack is up, let's build and instrument an application!

*Note: The full source code for the <a href="https://github.com/railwayapp-templates/opentelemetry-collector-stack/tree/main/exampleApp" target="_blank">express app</a> that we will build is available in the Open Telemetry Collector repository that you forked in the previous steps.*


### Create and initialize the project

From your local machine -

- Create a folder for your project called `otel-example-app`
- Use `npm` (or your preferred package manager) to install the required dependencies - 

  ```npm
  npm i express @opentelemetry/api @opentelemetry/auto-instrumentations-node @opentelemetry/exporter-metrics-otlp-proto @opentelemetry/exporter-trace-otlp-proto @opentelemetry/resources @opentelemetry/sdk-metrics @opentelemetry/sdk-node @opentelemetry/semantic-conventions
  ```

### Build the App

- In the `otel-example-app` folder, create an `app.js` file and add the following code - 
  ```javascript
  // app.js //
  const express = require('express');
  const { rollTheDice } = require('./dice.js');

  const PORT = parseInt(process.env.PORT || '8080');
  const app = express();

  app.get('/rolldice', (req, res) => {
    const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;
    if (isNaN(rolls)) {
      res
        .status(400)
        .send("Request parameter 'rolls' is missing or not a number.");
      return;
    }
    res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));
  });

  app.listen(PORT, () => {
    console.log(`Listening for requests on http://localhost:${PORT}`);
  });

  ```
- Create the `dice.js` file in the project folder and add the following code -
  ```javascript
  // Otel Docs Reference - https://opentelemetry.io/docs/languages/js/instrumentation/
  const { trace } = require('@opentelemetry/api');

  // obtain a trace
  const tracer = trace.getTracer('dice-lib');

  function rollOnce(i, min, max) {
    // start a span
    return tracer.startActiveSpan(`rollOnce:${i}`, (span) => {
      const result = Math.floor(Math.random() * (max - min) + min);

      // Add an attribute to the span
      span.setAttribute('dicelib.rolled', result.toString());

      // end the span
      span.end();
      return result;
    });
  }
    
  function rollTheDice(rolls, min, max) {
    // Create a span. A span must be closed.
    return tracer.startActiveSpan('rollTheDice', (parentSpan) => {
      const result = [];
      for (let i = 0; i < rolls; i++) {
        result.push(rollOnce(i, min, max));
      }
      // Be sure to end the span!
      parentSpan.end();
      return result;
    });
  }

  module.exports = { rollTheDice };
  ```

  We encourage you to refer to the OpenTelemetry documentation to gain a richer understanding of this code.  The code you see above can be found <a href="https://opentelemetry.io/docs/languages/js/instrumentation/" target="_blank">here</a>.
  

### Build the Instrumentation SDK

- In the `otel-example-app` folder, create an `instrumentation.js` file and add the following code -

  ```javascript
  // Otel Docs Reference - https://opentelemetry.io/docs/languages/js/instrumentation
  const { NodeSDK } = require('@opentelemetry/sdk-node');
  const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
  const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-proto');
  const { Resource } = require('@opentelemetry/resources')
  const { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_SERVICE_VERSION, } = require('@opentelemetry/semantic-conventions')
  const { OTLPMetricExporter } = require('@opentelemetry/exporter-metrics-otlp-proto');
  const { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');


  const sdk = new NodeSDK({
    resource: new Resource({
      [SEMRESATTRS_SERVICE_NAME]: 'dice-server',
      [SEMRESATTRS_SERVICE_VERSION]: '0.1.0',
    }),
    traceExporter: new OTLPTraceExporter({
      url: `http://${process.env.OTEL_EXPORTER_OTLP_ENDPOINT}/v1/traces`
    }),
    metricReader: new PeriodicExportingMetricReader({
      exporter: new OTLPMetricExporter({
          url: `http://${process.env.OTEL_EXPORTER_OTLP_ENDPOINT}/v1/metrics`
        }),
    }),
    instrumentations: [getNodeAutoInstrumentations()],
  });

  sdk.start();

  ```
  This code will wrap your application code and capture the telemetry data.  In the steps that follow, you will see how to start your application in Railway with a custom start command that utilizes this SDK.

  We encourage you to refer to the OpenTelemetry documentation to gain a richer understanding of this code.  The code you see above can be found <a href="https://opentelemetry.io/docs/languages/js/instrumentation/" target="_blank">here</a>.

## 4. Deploy the Express App

### Create an Empty Service and Configure the Environment
In the same Railway project - 
- Add a New service by clicking `+ New`
- Select `Empty Service`
- Add the following variable to the service
    ```plaintext
    OTEL_EXPORTER_OTLP_ENDPOINT=${{OpenTelemetry Collector.RAILWAY_PRIVATE_DOMAIN}}:4318
    ```
    *This is used by the Express app to connect to the OpenTelemetry Collector*
- In the service Settings, add the following [Custom Start Command](/guides/start-command):
    ```plaintext
    node --require ./instrumentation.js app.js
    ```
    *This wraps the Express app on startup with the instrumentation SDK you created above.*
- In the service Settings, rename the service to `Express App`
- Click `Deploy` to apply and create the empty service
- In the Settings tab, under Networking, click `Generate Domain`

### Deploy from the Railway CLI
*This step assumes you have the latest version of the [Railway CLI](/guides/cli#installing-the-cli) installed.*

On your local machine -
- Open your terminal and change directory to the `otel-example-app` folder
- Link to the Railway project and service by running the following command - 
  ```plaintext
  railway link
  ```
  Follow the prompts selecting the correct project name and environment (click <a href="https://res.cloudinary.com/railway/image/upload/v1709917423/docs/tutorials/otel/CleanShot_2024-03-08_at_10.58.55_2x_kacssj.png" target="_blank">here</a> for a reference), and choose the `Express App` service.

- Deploy the Express App by running the following command -
  ```plaintext
  railway up -d
  ```

## 5. Test and Confirm

Test that everything is working by generating some traffic to your Express App.  There is a single route, `/rolldice`, that takes a `rolls` query string -
- `<YOUR_SERVICE_DOMAIN>/rolldice?rolls=10`

Generate some traffic to this route, updating the number of rolls to different numbers, and verify that you see traces and spans in Jaeger and Zipkin.

<div style={{ display: 'flex', flexDirection: 'row', gap: '5px', fontSize: '0.9em', alignItems: 'stretch' }}>
    <div style={{ flex: '1 1 50%', overflow: 'auto', minWidth: '200px', maxWidth: '350px' }}>
        <Image src="https://res.cloudinary.com/railway/image/upload/v1709927026/docs/tutorials/otel/CleanShot_2024-03-08_at_13.42.44_2x_ym2ojg.png"
        alt="Screenshot of Jaeger UI"
        layout="responsive"
        width={1177} height={823} quality={100} />
        <p style={{ marginTop: '-0.2em', fontSize: '1em'}}>Jaeger</p>
    </div>
    <div style={{ flex: '1 1 50%', overflow: 'auto', minWidth: '200px', maxWidth: '350px' }}>
        <Image src="https://res.cloudinary.com/railway/image/upload/v1709926920/docs/tutorials/otel/CleanShot_2024-03-08_at_13.39.53_2x_zd69mq.png"
        alt="Screenshot of Zipkin Ui"
        layout="responsive"
        width={1177} height={823} quality={100} />
        <p style={{ marginTop: '-0.2em', fontSize: '1em'}}>Zipkin</p>
    </div>
</div>

## Bonus - NextJS

This tutorial was born out of an exploration into instrumenting some of our applications with <a href="https://nextjs.org/docs/pages/building-your-application/optimizing/open-telemetry#custom-exporters" target="_blank">NextJS's Otel library</a>.  This means that you can use this Otel collector stack to capture telemetry data from your NextJS app!  

### Send Telemetry Data from NextJS

Assuming you've followed the docs mentioned above to instrument your NextJS app, you can configure it to send requests to your collector in Railway by setting the required environment variable in the NextJS application.

*If your Next App is deployed in the **same Railway project as the collector**, you can use the private network -*

```plaintext
OTEL_EXPORTER_OTLP_ENDPOINT=http://${{otel-collector.RAILWAY_PRIVATE_DOMAIN}}:4318
```

*If your Next App is deployed in **another Railway project, or outside of Railway entirely**, you can use the public network -*

```plaintext
OTEL_EXPORTER_OTLP_ENDPOINT=https://<PUBLIC DOMAIN OF THE COLLECTOR IN RAILWAY>
```
- Note: If you use the public domain, you will need to update the PORT environment variable in your Otel Collector service to `PORT=4318`

#### Debugging in NextJS

Another helpful environment variable, specific to Node, is the debug directive -

```plaintext
OTEL_LOG_LEVEL=debug
```

## Helpful Resources

The OpenTelemetry Documentation is complete and easy to follow.  We encourage you to spend time getting familiar with the docs, but here are some sections that we found especially helpful -
- [OpenTelemetry Components](https://opentelemetry.io/docs/concepts/components/)
- [OTLP Spec](https://opentelemetry.io/docs/specs/otlp/)
- [Collector Docs](https://opentelemetry.io/docs/collector/)
- [Collector Configuration Tool OTelBin](https://www.otelbin.io)
- [Supported Languages](https://opentelemetry.io/docs/languages/)
- [Vendors with Native OTLP Support](https://opentelemetry.io/ecosystem/vendors/) (explore this list for different backend options)

## Conclusion

Congratulations!  You have deployed an OpenTelemetry Collector and a Node Express app that sends data to the collector which then sends it to Jaeger, Prometheus, and Zipkin.

This is a *very* basic implementation, and you should refer to the <a href="https://opentelemetry.io/docs/" target="_blank">OpenTelemetry documentation</a> for information on how to customize your implementation.



================================================
FILE: src/docs/tutorials/deploy-and-monitor-mongo.md
================================================
---
title: Deploy and Monitor a Mongo Replica Set
description: Learn how to deploy and monitor a Mongo replica set on Railway.
---

## What is a Mongo Replica Set?

>A replica set in MongoDB is a group of mongod processes that maintain the same data set.  Replica sets provide redundancy and high availability, and are the basis for all production deployments.  

Source: [MongoDB Manual](https://www.mongodb.com/docs/manual/replication/#replication)

## About this Tutorial

In addition to ensuring your data layer is redundant and highly available, monitoring the data layer is key to production readiness.  There are a number of ways to monitor your Mongo replica set in Railway, but this tutorial covers how to do so using popular open source tools, [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/).

**Objectives**

In this tutorial, you will learn how to -
- Deploy a [Mongo Replica Set](https://www.mongodb.com/docs/manual/replication/) from a Railway template
- Deploy a Python [FastAPI](https://fastapi.tiangolo.com/) app that connects to the replica
- Set up monitoring of the replica set with [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/)

**Prerequisites**

To be successful using this tutorial, you should already have - 
- A [Railway API token](/guides/public-api#creating-a-token)
- A Github account connected to Railway
- Latest version of Railway [CLI installed](/guides/cli#installing-the-cli)

Most of the source code you will deploy as part of this tutorial can be found [here](https://github.com/railwayapp-templates/init-mongo-ha).

By the end of this tutorial, you will have a project similar to the one below.

<Image src="https://res.cloudinary.com/railway/image/upload/v1717181432/docs/tutorials/mongo-replica-set/CleanShot_2024-05-31_at_13.49.55_2x_awtp73.png"
alt="Screenshot of Project Canvas"
layout="responsive"
width={1477} height={823} quality={100} />
<p style={{ marginTop: '-0.2em', fontSize: '0.8em', opacity: '0.6' }}>[Live Demo in Railway](https://railway.com/project/0976c33d-031f-4c31-9f6c-1457c66273e6)</p>

**Let's get started!**

## 1. Deploy the Mongo Replica Set

*This step assumes you have created a [Railway API token](/guides/public-api#creating-a-token).*

First, we will deploy the Mongo replica set using the template in the Railway marketplace.

- <a href="https://railway.com/new/template/ha-mongo" target="_blank">Click here to open the deployment page for the Mongo replica set</a>
- Click `Configure` next to the **init-mongo-ha** service and add your [Railway API token](/guides/public-api#creating-a-token)
- Click `Deploy`

After clicking Deploy, you will be taken to your new project in Railway.

*Note:  The **init-mongo-ha** service is designed to be ephemeral, existing only to initiate the Mongo replica set before it is removed.*

## 2. Deploy the Python FastAPI app

Now we'll deploy a Python FastAPI and connect it to the Mongo replica set.

### Create the app locally

From your local machine -

- Create a folder for your FastAPI app called `fastApi`
- Within the `fastApi` folder, create the following 3 files -
  - **main.py**:
        ```python
        from fastapi import FastAPI, HTTPException
        from motor.motor_asyncio import AsyncIOMotorClient
        import os
        from typing import List, Dict
        import random
        import string

        app = FastAPI()

        print(os.getenv("MONGO_URI"))

        # MongoDB client (motor)
        client = AsyncIOMotorClient(os.getenv("MONGO_URI"))
        db = client[os.getenv("DATABASE_NAME")]
        collection = db[os.getenv("COLLECTION_NAME")]

        def generate_random_string(length=8):
            letters = string.ascii_lowercase
            print("generated random string")
            return ''.join(random.choice(letters) for i in range(length))

        @app.get("/")
        async def set_item():
            random_key = generate_random_string()
            random_value = generate_random_string()
            print("sending to Mongo")
            result = await collection.update_one(
                {"key": random_key}, {"$set": {"value": random_value}}, upsert=True
            )
            print(result)
            if result.upserted_id or result.modified_count:
                return {"status": "success", "key": random_key, "value": random_value}
            raise HTTPException(status_code=500, detail="Failed to set item")

        @app.get("/get", response_model=List[Dict[str, str]])
        async def get_all_items():
            cursor = collection.find({})
            print("retrieving from Mongo")
            items = await cursor.to_list(length=None)
            for item in items:
                item['_id'] = str(item['_id'])
            return items

        @app.get("/health")
        async def healthcheck():
            print("starting healthcheck, pulling from mongo")
            cursor = collection.aggregate([{'$sample': {'size': 1}}])
            random_doc = await cursor.to_list(length=1)
            
            if random_doc:
                print("healthcheck successful")
                return {"status": "success", "document": random_doc[0]}
            else:
                print("No documents found")
                raise HTTPException(status_code=500, detail="No documents found in the collection")

        ```
  - **Procfile**:
    ```procfile
    web: uvicorn main:app --host 0.0.0.0 --port ${PORT:-5000}
    ```
  - **requirements.txt**:
    ```plaintext
    fastapi
    uvicorn
    motor
    ```

### Create and Configure an Empty Service in Railway

Now that you have the necessary files to run the Python FastAPI app in Railway, let's deploy it.

In the Railway project that contains your Mongo replica set - 
- Add a New service by clicking `+ New`
- Select `Empty Service`
- Add the following variables to the service
    ```plaintext
    COLLECTION_NAME=mycollection
    DATABASE_NAME=railway
    MONGO_HOSTS=${{mongo1.RAILWAY_PRIVATE_DOMAIN}}:27017,${{mongo2.RAILWAY_PRIVATE_DOMAIN}}:27017,${{mongo3.RAILWAY_PRIVATE_DOMAIN}}:27017
    MONGO_URI=mongodb://${{MONGO_HOSTS}}/?replicaSet=${{REPLICA_SET_NAME}}
    REPLICA_SET_NAME=${{mongo1.REPLICA_SET_NAME}}
    ```
- In the service Settings, rename the service to `fastApi`
- Click `Deploy` to apply and create the empty service
- In the Settings tab, under Networking, click `Generate Domain`

### Deploy from the Railway CLI
*This step assumes you have the latest version of the [Railway CLI](/guides/cli#installing-the-cli) installed.*

On your local machine -
- Open your terminal and change directory to the `fastApi` folder
- Link to the Railway project and service by running the following command - 
  ```plaintext
  railway link
  ```
  Follow the prompts selecting the correct project name and environment (click <a href="https://res.cloudinary.com/railway/image/upload/v1709917423/docs/tutorials/otel/CleanShot_2024-03-08_at_10.58.55_2x_kacssj.png" target="_blank">here</a> for a reference), and choose the `fastApi` service.

- Deploy the app by running the following command -
  ```plaintext
  railway up -d
  ```

---
## Checkpoint

Congrats!  You should now have a Mongo replica set and a Python FastAPI app connected to it.  Your project in Railway should look something like this - 

<Image src="https://res.cloudinary.com/railway/image/upload/v1717181350/docs/tutorials/mongo-replica-set/CleanShot_2024-05-31_at_13.48.17_2x_os95j4.png"
alt="Screenshot of Project Canvas"
layout="responsive"
width={1477} height={823} quality={100} />

This is a very basic implementation of the Mongo replica set, so be sure to familiarize yourself with the <a href="https://www.mongodb.com/docs/manual/replication/" target="_blank">MongoDB documentation</a> to understand how you might want to tailor it to your needs.

---

## 3. Test Mongo Replication

At this point, you should have a Mongo replica set running in Railway as well as a Python application connected to it.

Let's test the connection to Mongo -
- Open your `fastApi` service settings
- Click on the domain to open the app in your browser
  - The `/` route connects to the Mongo replica set and inserts a single document
- Refresh your browser a few times to add more data to Mongo
- Access the `/get` route to retrieve all of the documents you have just added

Now let's perform some chaos engineering to ensure Mongo replication is working -
- Open the `mongo1` service settings
- Open the three-dot menu on the active deployment and click `Remove` to remove the deployment
- Access the Python app's `/get` route to confirm it continues working

You can also check out the Mongo logs for detection of node failure and leader elections!

## 4. Set up Monitoring of the Replica Set

Finally, let's set up some monitoring so you can keep track of the health of your replica set.

### Add the Mongo Exporter Service

There are various ways you could retrieve metrics data from the Mongo instances, but we'll use the [MongoDB exporter provided by Percona](https://hub.docker.com/r/percona/mongodb_exporter).
- Add a New service by clicking `+ New` in your Railway project
- Select `Docker Image` as the Source
- Add 'percona/mongodb_exporter:0.40.0' and hit Enter
- In the service Settings, rename the service to `mongo-exporter`
- In the service Variables, add the following -
    ```plaintext
    MONGO_HOSTS=${{mongo1.RAILWAY_PRIVATE_DOMAIN}}:27017,${{mongo2.RAILWAY_PRIVATE_DOMAIN}}:27017,${{mongo3.RAILWAY_PRIVATE_DOMAIN}}:27017
    REPLICA_SET_NAME=${{ mongo1.REPLICA_SET_NAME }}
    MONGODB_URI_SINGLE=mongodb://${{mongo1.RAILWAY_PRIVATE_DOMAIN}}:27017
    MONGODB_URI=mongodb://${{MONGO_HOSTS}}/?replicaSet=${{REPLICA_SET_NAME}}
    PORT=9216
    RAILWAY_BETA_ENABLE_RUNTIME_V2=1
    ```
- In the service Settings, add the following [Start Command](/guides/start-command) -
    ```plaintext
    /mongodb_exporter --log.level="debug" --collect-all
    ```
- Click `Deploy`

This service will connect to the MongoDB and retrieve various metrics.  It makes those metrics available on a `/metrics` route which Prometheus will use to retrieve them.

### Add the Prometheus Service

- Add a New service by clicking `+ New`
- Select `Template` as the Source
- Type Prometheus, and select the Prometheus template (be sure to select [this one](https://railway.com/template/KmJatA))
- Click `Deploy Template` to apply and deploy the service

Now we need to configure Prometheus to scrape metrics from the exporter.
- In the service Settings, eject from the Upstream Repo by clicking the `Eject` button
- Choose your Github organization
- Click `Eject Service`
- Open the repository that was created for you in Github
- Navigate to the `prometheus.yml` file
- Click the pencil icon to edit in place, and add the following job -
    ```plaintext
    - job_name: 'mongodb'
        static_configs:
        - targets: ['mongo-exporter.railway.internal:9216']
    ```
    *Note: If you find that the exporter is not retrieving data from Mongo as expected, confirm the internal domain in the Service Settings*
- Click `Commit` to commit the changes and redeploy the service in Railway

### Add the Grafana Service

- Add a New service by clicking `+ New`
- Select `Template` as the Source
- Type Grafana, and select the Grafana template
- Configure the required variables to your liking
- Click `Save Config`
- Click `Deploy` to apply and deploy the service

Once Grafana is up and running, let's connect it to Prometheus.
- Access Grafana by clicking on the domain from the service settings
- Login with the credentials you configured in the steps above
    *(If you forgot the credentials, you can access them from the service variables tab).*
- Click on the hamburger menu in the top left-hand corner
- Expand **Connections**
- Click **Data Sources**
- Click **Add Data Source**
- Find and click **Prometheus**
- In the Connection section, add the following **Prometheus server URL** -
  ```plaintext
  http://railway-prometheus.railway.internal:9090
  ```
- Scroll down to the bottom and click `Save & test`

Grafana is now set up to retrieve data from Prometheus!  Let's add a dashboard to visualize the MongoDB data.
- Click on the hamburger menu in the top left-hand corner
- Click **Dashboards**
- Click **Create Dashboard**
- Click **Import Dashboard**
- Copy the [dashboard.json from the template repo](https://github.com/railwayapp-templates/init-mongo-ha/blob/main/grafanaDashboard/dashboard.json)
- Paste the json into the input box and click **Load**
- Select the prometheus data source and click **Import**

Nice!  You should have a dashboard now that looks something like this -

<Image src="https://res.cloudinary.com/railway/image/upload/v1717181180/docs/tutorials/mongo-replica-set/CleanShot_2024-05-31_at_13.44.08_2x_g0ys0g.png"
layout="responsive"
width={1477} height={823} quality={100} />

## Conclusion

Congratulations!  You have deployed a Mongo replica set, connected a Python FastAPI, and set up monitoring of the replica set using Prometheus and Grafana.

Hopefully you have learned something new or at least gotten a start on implementing your own application stack with Mongo as your highly available, redundant database.

Note that is a very basic implementation, and you should refer to the [MongoDB](https://www.mongodb.com/docs/manual/replication/), [Prometheus](https://prometheus.io/docs/introduction/overview/), and [Grafana](https://grafana.com/docs/grafana/latest/) documentation for information on how to customize your implementation.



================================================
FILE: src/docs/tutorials/deploying-a-monorepo.md
================================================
---
title: Deploying a Monorepo to Railway
description: Learn how to deploy a monorepo to Railway.
---

## What is a Monorepo?

A monorepo is a project directory structure in which multiple, co-dependent codebases (such as a frontend and a backend) are maintained within the same repository, and in some cases, share common packages.

## About This Tutorial

Deploying a monorepo in Railway requires some extra configuration to get the applications up and running.

This tutorial aims to provide a simple step-by-step on how to deploy a frontend and backend from an isolated monorepo, one of the most commonly deployed types of monorepo. 

The procedure outlined in this tutorial can easily be adapted to deploy different apps that are contained within a isolated monorepo as well.

For more information on deploying a shared monorepo check out our <a href="/guides/monorepo#deploying-a-shared-monorepo" target="_blank">guide</a> that explains some of the specific configurations you would need.

**Objectives**

In this tutorial, you will learn how to -

- Create an empty project.
- Rename a project.
- Create empty services.
- Rename services.
- Generate domains for services.
- Set variables on a service.
- Connect a GitHub repo to a service. 

**Prerequisites**

For the sake of this tutorial, we have a simple [example monorepo](https://github.com/railwayapp-templates/monorepo-example) with a frontend and a backend service. In practice, your monorepo is probably alot more complicated, but the principles here will enable you to wire up each of your applications in your monorepo to a service and network those services together.

The frontend is built with [React](https://react.dev/) and [Vite](https://vitejs.dev/), and the static files are served with [Caddy](https://caddyserver.com/).

The backend, built with [Go](https://go.dev/), will stream quotes that will be displayed on the frontend.

Before you start:

1. Fork the repo: https://github.com/railwayapp-templates/monorepo-example
2. [Connect your GitHub to Railway.](https://docs.railway.com/quick-start#deploying-your-project---from-github) This will enable you to deploy any of your repositories to Railway in the future as well!

**Let's get started!**

## 1. Create a New Empty Project

- From [your dashboard](https://railway.com/dashboard) click `+ New Project` or `⌘ k`

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269034/docs/tutorials/monorepo/dashboard_zojmjg.png"
alt="Screenshot of dashboard"
layout="responsive"
width={1280} height={511} quality={100} />

- Choose `Empty project`

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269027/docs/tutorials/monorepo/new_project_hxiif2.png"
alt="Screenshot of new project page"
layout="responsive"
width={345.5} height={388} quality={100} />

**Note:** We chose an empty project instead of deploying from a GitHub repo since we want to set up the project before deploying.

## 2. Project Setup

- You'll notice Railway automatically named the project, but we want something more recognizable. Open the Settings tab to `Update` the name of your project. You'll also notice the Danger tab here, when you want to delete your project after you're done with the tutorial.

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269026/docs/tutorials/monorepo/project_settings_ym1vul.png"
alt="Screenshot of project settings"
layout="responsive"
width={1381} height={731} quality={100} />

- Click `Update`

## 3. Service Creation

- Add **two** new **empty** services from the `+ Create` button in the top right of the project canvas.

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269020/docs/tutorials/monorepo/create_menu_gtpxtb.png"
alt="Screenshot of create menu"
layout="responsive"
width={735} height={510} quality={100} />

**Note:** We chose an empty service instead of deploying from a GitHub repo since we want to configure the service before deploying.

The result will look like this -

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269019/docs/tutorials/monorepo/two_services_unamed_nmwimm.png"
alt="Screenshot of project canvas with two empty services"
layout="responsive"
width={766} height={450} quality={100} />

- Give them both applicable names.

    **Note:** This can be done easiest via the right-click context menu.

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269022/docs/tutorials/monorepo/naming_a_service_qy7sg5.png"
alt="Screenshot of naming a service"
layout="responsive"
width={766} height={450} quality={100} />

In the case of this tutorial, they will be named `Frontend` and `Backend`

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269024/docs/tutorials/monorepo/deploy_button_gmnqf8.png"
alt="Screenshot showing the deploy button"
layout="responsive"
width={766} height={450} quality={100} />

- Click the `Deploy` button or `⇧ Enter` to create these two services.

## 4. Directory Setup

Both of our apps deploy from subdirectories of our monorepo, so we need to tell Railway where they are located.

- Open the Frontend service to its service settings and you will see a **Root Directory** option, in this case, we will set it to `/frontend`

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269052/docs/tutorials/monorepo/frontend_root_dir_e52vkz.png"
alt="Screenshot showing the frontend root directory"
layout="responsive"
width={1386} height={760} quality={100} />

- Open the Backend service settings and we will set its root directory to `/backend`

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269046/docs/tutorials/monorepo/backend_root_dir_misneo.png"
alt="Screenshot showing the backend root directory"
layout="responsive"
width={1386} height={760} quality={100} />

- Click the `Deploy` button or `⇧ Enter` to save these changes.

## 5. Connecting the Repo

Now we need to configure the source of the service where the code is deployed.

- Open the service settings for each service and connect your monorepo.

Frontend

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269039/docs/tutorials/monorepo/frontend_repo_connect_llgsmf.png"
alt="Screenshot showing the frontend repo connected"
layout="responsive"
width={1386} height={760} quality={100} />

Backend

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269044/docs/tutorials/monorepo/backend_repo_connect_evt8v3.png"
alt="Screenshot showing the backend repo connected"
layout="responsive"
width={1386} height={760} quality={100} />

- Click the `Deploy` button or  `⇧ Enter` to deploy your applications

**Your services will now build and deploy.**

## 6. Domain Setup

Even though the services are now running, the frontend and backend aren't networked together yet. So let's setup domains for each service.

Both the Vite Frontend and the Go Backend are already configured so that Railway will ✨automagically detect the port they're running on. Railway does this by detecting the `env.$PORT` variable that the service is binding. For simplicity's sake, we will connect these two services over their public domain so you can get a handle on the basics. In practice, you may need to configure your networking a bit differently. You can [read more about networking in the docs](https://docs.railway.com/guides/public-networking).

Let's add public domains to both services.

- Click on the service and then open the Settings tab.

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269032/docs/tutorials/monorepo/service_settings_networking_ckrss1.png"
alt="Screenshot showing the service settings"
layout="responsive"
width={1381} height={760} quality={100} />

- Click on `Generate Domain`. Railway will ✨automagically assign the port based on the deployed service.

- Do these steps for both services, so that they both have public domains.

**Notes:**

- **Setting a Custom `$PORT`:** Adding the domain after the service is deployed allows Railway to detect the bound `env.$PORT`. You could instead decide to manually set the `$PORT` variable on the Variables tab, and set the Domain to use that custom port instead.

## 7. Variable Setup

For our example monorepo the Frontend service needs a `VITE_BACKEND_HOST` variable, and our backend needs an `ALLOWED_ORIGINS` variable.

Let's add the Frontend variable first.

- Click on Frontend service, then the `Variables` tab

- Add the required variable -

    ```plaintext
    VITE_BACKEND_HOST=${{Backend.RAILWAY_PUBLIC_DOMAIN}}
    ```
It should look like this once added:

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269049/docs/tutorials/monorepo/adding_frontend_variables_jqn4rf.png"
alt="Screenshot showing the frontend service variables"
layout="responsive"
width={1386} height={760} quality={100} />

Now let's add the Backend variable.

- Click on the Backend service, then the `Variables` tab

- Add the required variable -

    ```plaintext
    ALLOWED_ORIGINS=${{Frontend.RAILWAY_PUBLIC_DOMAIN}}
    ```

It should look like this once added:

<Image src="https://res.cloudinary.com/railway/image/upload/v1721269042/docs/tutorials/monorepo/adding_backend_variables_aplgej.png"
alt="Screenshot showing the backend service variables"
layout="responsive"
width={1386} height={760} quality={100} />

- Click the `Deploy` button or `⇧ Enter` to save these changes.

- Your services should be deployed and available now! Click on your frontend service on the Deployment tab and you can click your domain to see the webapp.

**Notes:**

- The variables used here are reference variables, learn more about them [here](https://docs.railway.com/guides/variables#referencing-another-services-variable).

- Both the Frontend and Backend variables reference each other's public domains. The `RAILWAY_PUBLIC_DOMAIN` variable will be automatically updated whenever you deploy or re-deploy a service.

- See a list of additional variables [here](https://docs.railway.com/reference/variables#railway-provided-variables).

## Conclusion

Congratulations! You have setup a project, setup services, added variables and deployed your monorepo project to Railway.  The Frontend service should be accessible on its public domain to access the deployed website.



================================================
FILE: src/docs/tutorials/getting-started.md
================================================
---
title: Welcome to Railway Tutorials!
description: Discover tutorials to help you get the most out of Railway."
---

The Railway Team and community provide content, like tutorials and blogs, on how to make the most out of Railway.

Explore the pages in this section to learn or get inspired!  

Also checkout our [Quick Start Tutorial](/quick-start) to deploy an app in minutes.

### Contributing

Pull requests are welcome.  If you make a quality tutorial for other Railway users, we would really love to include it!

If there is a tutorial you hope to see, please create a post in <a href="https://station.railway.com/" target="_blank">Forums</a>!




================================================
FILE: src/docs/tutorials/github-actions-post-deploy.md
================================================
---
title: GitHub Actions Post-Deploy
description: Learn how to use GitHub Actions to run post-deployment commands.
---

[Github Actions](https://github.com/features/actions) come with a pretty neat set of features to automate your workflows. In this post, we talk about using Github Actions to run post-deploy actions.

At Railway, we've set up Github triggers for automatic deployments when you push to a selected branch, and with Github Actions, you can automate several parts of your development workflow. Recently, within our [Discord](https://discord.gg/railway) and [Slack](/reference/support#slack), we've had a couple of users ask us how they'd go about running commands or webhooks after their app is deployed so we thought it'd be a good idea to publish a short tutorial doing just that, with Github Actions.

## The Action

Since Railway makes the deployment status available to Github, we'll be using the `deployment_status` event to trigger our action. This event is triggered when a deployment status changes, and we'll be using the `success` state to trigger our action.

Make a new file in your repository called `.github/workflows/post-deploy.yml` and add the following -

```yaml
name: Post-Deployment Actions

on:
  deployment_status:
    states: [success]

jobs:
  post-deploy:
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
      - name: Debug - Print github.event object
        run: |
          echo "github.event context:"
          echo '${{ toJSON(github.event) }}'
          
      # Only run if this is a production environment deployment that succeeded
      - name: Run post-deploy actions
        if: github.event.deployment.environment == 'production'
        run: |
          echo "Production deployment succeeded"
```

If you have your repository deploying to multiple services, you can modify the `if` condition to check for the service you want to run the command for -

```yaml
if: github.event.deployment.environment == 'production' && github.event.deployment.payload.serviceId == '<service-id>'
```
You can also see what `github.event` contains and build your own conditions from there.

Information on how to find the Service ID and Environment IDs as needed can be found [here](https://docs.railway.com/guides/public-api#resource-ids).

It's that simple! You can now customize the final run step to execute any commands or send webhooks using Curl or other methods of your choice.

## Conclusion

We hope this tutorial has been helpful and that you'll find it useful for your own projects. If you have any questions or feedback, please feel free to reach out to us on [Discord](https://discord.gg/railway), [Slack](/reference/support#slack) or the [Central Station](https://station.railway.com). Happy coding!


================================================
FILE: src/docs/tutorials/github-actions-pr-environment.md
================================================
---
title: GitHub Actions PR Environment
description: Learn how to use the CLI in a GitHub Action to create environments for PRs
---

[Github Actions](https://github.com/features/actions) come with a pretty neat set of features to automate your workflows. In this post, we talk about using Github Actions alongside the [Railway CLI](https://github.com/railwayapp/cli) to create specific environments for any PR that is created, alongside closing it whenever it is closed/merged.

This can be useful if you need to create a branch on a [Neon](https://neon.tech) database, allowing you to automatically inject the correct database url.

## The Action

Make a new file in your repository called `.github/workflows/railway-pr-envs.yml` and add the following -

```yaml
# NOTE
# if you have 2fa on your account, the pr close part of the action will hang (due to 2fa not being supported non-interactively)

name: Manage PR environments (Railway)

on:
  pull_request:
    types: [opened, closed]

env:
    RAILWAY_API_TOKEN: "" # get this in account settings (make sure this is NOT a project token), and scope it to your account (not a workspace)
    SERVICE_ID: "" # service ID to inject database variable into
    ENV_NAME: "" # the environment variable name to inject (e.g DATABASE_URL)
    ENV_VALUE: "" # the value to inject
    DUPLICATE_FROM_ID: "" # railway environment to duplicate from
    LINK_PROJECT_ID: "" # project ID
    # TEAM_ID: "" if you are linking to a project in team, uncomment this

jobs:
    pr_opened:
        if: github.event.action == 'opened'
        runs-on: ubuntu-latest
        container: ghcr.io/railwayapp/cli:latest
        steps:
        - name: Link to project
          run: railway link --project ${{ env.LINK_PROJECT_ID }} --environment ${{ env.DUPLICATE_FROM_ID }} # --team ${{ env.TEAM_ID }} # uncomment this if you are linking to a team project  
        - name: Create Railway Environment for PR
          run: railway environment new pr-${{ github.event.pull_request.number }} --copy ${{ env.DUPLICATE_FROM_ID }} --service-variable ${{ env.SERVICE_ID }} "${{ env.ENV_NAME }}=${{ env.ENV_VALUE }}"

    pr_closed:
        if: github.event.action == 'closed'
        runs-on: ubuntu-latest
        container: ghcr.io/railwayapp/cli:latest
        steps:
        - name: Link to project
          run: railway link --project ${{ env.LINK_PROJECT_ID }} --environment ${{ env.DUPLICATE_FROM_ID }} # --team ${{ env.TEAM_ID }} # uncomment this if you are linking to a team project       
        - name: Delete Railway Environment for PR
          run: railway environment delete pr-${{ github.event.pull_request.number }} || true
```

**Note:** if you are using a team project, you need to ensure that the token specified is scoped to your account, not a workspace.

This can very easily be modified to run commands in order to find variables and values, and can simply be passed as flags to the railway environment create command.

## Conclusion

We hope this tutorial has been helpful and that you'll find it useful for your own projects. If you have any questions or feedback, please feel free to reach out to us on [Discord](https://discord.gg/railway), [Slack](/reference/support#slack) or the [Central Station](https://station.railway.com). Happy coding!



================================================
FILE: src/docs/tutorials/github-actions-runners.md
================================================
---
title: GitHub Actions Self Hosted Runners
description: Learn how to deploy your own scalable self hosted GitHub Actions Runners on Railway. Build your own fleet of runners for your Enterprise and then scale your self-hosted runners with Railway replicas for blazing fast builds.
---

<Image src="https://res.cloudinary.com/railway/image/upload/v1746477484/docs/github-actions/j7y3ibttsmfepak5ohcb.png
"
alt="screenshot of a deployment of a self hosted GitHub Actions runner on Railway"
layout="responsive"
width={1211} height={820} quality={100} />

Deploying [GitHub Actions Self Hosted Runners](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners) on Railway is an excellent way to run your own CI infrastructure because you only [pay for what you use](/reference/pricing/plans). With self-hosted runners, you also unlock the ability to cache expensive and time-consuming dependencies (`node_modules`, `cargo`, etc.) or large git repositories. Best of all, Railway's built-in [replicas](/reference/scaling#horizontal-scaling-with-replicas) means you can scale your runners horizontally, or even distribute them to different regions with just a click and redeploy. You'll save build times and costs over using standard runners, *AND* you'll unlock more sophistocated workflows to streamline building your app.

In this guide you'll learn:
1. The basics to deploy a GitHub Actions Self Hosted Runner on Railway.
1. How to authenticate self-hosted runners on Railway with your GitHub Organization or Enterprise.
1. How to scale up [replicas](/reference/scaling#horizontal-scaling-with-replicas) to serve bigger Actions workloads.
1. Best Practices for configuring your self-hosted runners on Railway.

**Quickstart:** [Deploy your self-hosted Runners with our Railway template](https://railway.com/new/template/pXId5Q?teamId=d546a817-7743-4892-b03a-f5a75df596f9).

## Deploy a GitHub self-hosted runner on Railway

1. Navigate to the [GitHub Actions self-hosted Runner Template](https://railway.com/new/template/pXId5Q?teamId=d546a817-7743-4892-b03a-f5a75df596f9). You'll notice the template requires an `ACCESS_TOKEN`. This token, along with our `RUNNER_SCOPE` will determine *where* our self-hosted runners get registered on GitHub. Thankfully, this template supports self registration of your runners -- which means you can dynamically scale up or down the number of runners you have just by adjusting your `replicas`!

2. Set your `RUNNER_SCOPE` to `org`. We want to set up our self-hosted runners to register with a GitHub Organization, so any repositories within our organization can use the same pool of runners. This is super useful because you don't have to set up permissions for every single repository!

If you have a GitHub Enterprise, you can similarly set up your runners using an `ACCESS_TOKEN`, you just need to set your `RUNNER_SCOPE` as `ent` instead.

If you need additional configuration, then you can simply [add a variable to your Service](https://github.com/myoung34/docker-github-actions-runner?tab=readme-ov-file#environment-variables).

## Setup a GitHub ACCESS_TOKEN

For this guide, we will create a new [GitHub Fine-Grained Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#fine-grained-personal-access-tokens). These are modern personal access tokens that obey the [principle of least priviledge](https://en.wikipedia.org/wiki/Principle_of_least_privilege), making them easy to secure, revoke, and audit!

**Note:** You need to have Admin access to the organization for which you are making the `ACCESS_TOKEN`.

<Image src="https://res.cloudinary.com/railway/image/upload/v1746477254/docs/github-actions/g9uzz9dksi80zsazlohk.png
"
alt="screenshot of a GitHub Fine Grained Access Token"
layout="responsive"
width={1131} height={702} quality={100} />

1. Create a new fine-grained personal access token. [Navigate to your Settings -> Developer Settings -> Personal Access Token -> Fine-grained tokens -> Generate New Token](https://github.com/settings/personal-access-tokens)
1. Set the Resource owner as your Organization. Alternatively, if you are using a `ent` `RUNNER_SCOPE`, select your Enterprise.
1. Set Expiration
1. Under Permissions, Select Organization Permissions -> Self Hosted Runners -> Read and Write (If Enterprise, select Enterprise instead).
1. Click Generate. Save your `ACCESS_TOKEN` in a safe place! You won't see it again. (Save it in a Password Vault as an API Key!)
1. DONE. You don't need any other permissions!

## Scaling up your Railway Self Hosted Runners

<Image src="https://res.cloudinary.com/railway/image/upload/v1746476747/docs/github-actions/edwass7m7pn35zx8xqw9.png
"
alt="screenshot of scaling up your Railway self hosted Runners with Railway Replicas"
layout="responsive"
width={1328} height={690} quality={100} />

1. Navigate to the Settings tab of your Service to the Region area.
1. Change the number next to your region from `1` to your desired number of replicas.
1. Click Deploy.
1. Done! Your new replicas will automatically spin up and register themselves with GitHub.

## View Your Registered Self Hosted Runners

<Image src="https://res.cloudinary.com/railway/image/upload/v1746477028/docs/github-actions/g0twzm5fhqrgjhtltrec.png
"
alt="screenshot of viewing your Registered self hosted runners"
layout="responsive"
width={1271} height={776} quality={100} />

You can view all your runners by navigating to your organization's Actions -> Runners page at https://github.com/organizations/(your-organization-name)/settings/actions/runners?page=1

## Routing Actions Jobs

You can route jobs by simply changing the `LABELS` variable. By default, we include the `railway` label on runners you make through the [Template](https://railway.com/new/template/pXId5Q?teamId=d546a817-7743-4892-b03a-f5a75df596f9). `LABELS` is a comma (no spaces) delimited list of all the labels you want to appear on that runner. This enables you to [route jobs](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/using-self-hosted-runners-in-a-workflow#using-custom-labels-to-route-jobs) with the specificity that your workflows need, while still allowing you to make runners available for your entire Organization.

## Setting up GitHub Actions workflows for Pull Requests

GitHub Actions uses workflow files located in `.github/workflows/<workflow>.yml`. You can easily incorporate pre-built steps to get up-and-running quickly.

- When you want to run a workflow every time a pull request is opened, set the `on` key to `pull_request` in your `.github/workflows/<workflow>.yml`.

- Set the `runs-on` key when you want to route your workflow job to a particular runner. Use a comma delimited list for greater specificity. For example, a `[self-hosted, linux, x86, railway]` workflow needs to match all labels to an appropriate runner in order to route the job correctly.

## Example GitHub Actions Workflow

If you've never made a workflow before, here is a basic out-of-the-box example of a NuxtJS project using Bun to execute an `eslint` check.

```yml
name: eslint check

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: Check
    runs-on: [self-hosted, railway]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install bun
        uses: oven-sh/setup-bun@v2

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Files
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            path: ${{ github.workspace }}/**/node_modules
            path: ${{ github.workspace }}/**/.nuxt
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock', 'nuxt.config.ts', 'app.config.ts', 'app.vue') }}

      - name: Install packages
        run: bun install --prefer-offline

      - name: Lint
        run: bun run lint
```

## Best Practices

1. **Only use private repositories and disable forks:** Make sure when using self-hosted runners, that you only attach them to private repositories. A known attack vector is for a malicious actor to fork a public repository and then exfiltrate your private keys from your self-hosted runners by executing workflows on them. Disabling forks can also mitigate this attack, and it's a good idea in general for locking down security on your repositories!

1. **Seal your `ACCESS_KEY`:** While all variables are encrypted on Railway, you can prevent prying eyes (including your future self) from ever viewing your API Key. Navigate to the Variables tab and next to the `ACCESS_KEY` variable click the three-dots-menu `...` -> `Seal`. Make sure your `ACCESS_KEY` is stored in a secure Password Vault before doing this!

1. **Security Harden your self-hosted Runners:** [Security Hardening](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions) will make your runners robust and prevent any concerns about your build infrastructure. GitHub's [detailed guide](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions) can help you secure secrets, authentication, auditing, and managing your runners. Similarly [dduzgun-security](https://github.com/dduzgun-security/github-self-hosted-runners) and [Wiz](https://www.wiz.io/blog/github-actions-security-guide) both have excellent guides to securing your runners that are worth your time.

### Known Limitations

- Because Railway containers are non-priveleged, GitHub Workflows that [build-and-then-mount](https://github.com/super-linter/super-linter) containers on the same host (i.e. Docker-in-Docker) will fail.

- Using the Serverless Setting on this Service is *not* recommended and will result in idle runners disconnecting from GitHub and needing to reauthenticate. GitHub Runners have a 50 second HTTP longpoll which keeps them alive. While the runners in this template can automatically reauth with an `ACCESS_TOKEN` it will result in unnecessary offline / abandoned runners. If you want your runners to deauthenticate and spin down, consider using ephemeral runners instead.

### Troubleshooting self-hosted runner communication

> A self-hosted runner connects to GitHub to receive job assignments and to download new versions of the runner application. The self-hosted runner uses an HTTPS long poll that opens a connection to GitHub for 50 seconds, and if no response is received, it then times out and creates a new long poll. The application must be running on the machine to accept and run GitHub Actions jobs.

GitHub's [documentation details all of the different endpoints](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/communicating-with-self-hosted-runners) your self-hosted runner needs to communicate with. If you are operating in a [GitHub Allow List](https://docs.github.com/en/enterprise-cloud@latest/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/managing-allowed-ip-addresses-for-your-organization) environment you must add your self-hosted runners IP Address to this allow list for communication to work.

If you are using a [proxy server](https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/using-a-proxy-server-with-self-hosted-runners), refer to GitHub's documentation on configuring your self-hosted runner. You can simply add the required environment variables by adding them to the Variables tab of your Service.

### Cost Comparison

On Railway you only [pay for what you use](/reference/pricing/plans), so you'll find your GitHub workflows are significantly cheaper. For this guide we tested over ~2,300 1 minute builds on Railway self-hosted runners and our usage costs were `$1.80` compared to [GitHub's Estimated Hosted Runner](https://github.com/pricing/calculator?feature=actions) cost of `$18.40` for the same workload. Even better? We had 10x Railway replicas with 32 vCPU and 32GB RAM for this test, meaning that our actions workflows would never slow down.

On other platforms you pay for the *maximum available* vCPUs and Memory. On Railway, you're only paying for usage, or in the below screenshot, the filled in purple area. This enables your workloads to still burst up to the *maximum available* resources you have configured, with no tradeoffs on cost.

<Image src="https://res.cloudinary.com/railway/image/upload/v1746386242/docs/github-actions/urc6rirvsb3folwoqoml.png"
alt="screenshot of Railway's Observability dashboard demonstrating burstable usage of Memory"
layout="responsive"
width={1604} height={800} quality={100} />


================================================
FILE: src/docs/tutorials/proximity-steering.md
================================================
---
title: Setting up Proximity Steering using Cloudflare
description: Learn how to set up proximity steering using Cloudflare in this step-by-step tutorial.
---

## What is Proximity Steering?

>Proximity steering routes visitors ... to the closest physical data center.

*Source: <a href="https://developers.cloudflare.com/load-balancing/understand-basics/traffic-steering/steering-policies/proximity-steering/" target="_blank">Proximity steering</a>*

Sometimes also referred to as Geo-Load Balancing.

## About this Tutorial

As Railway does not offer native Proximity Steering at this time, we instead need to place Cloudflare in front of our services to do this for us.

This tutorial aims to provide a simple step-by-step guide on setting everything up on Cloudflare to ensure Proximity Steering works flawlessly!

**Objectives**

In this tutorial, you will learn how to do the following in Cloudflare -

- Create a Health monitor.
- Create pools for each region.
- Set up the Proximity Load Balancer.

**Prerequisites**

**In Railway -**

- Have two or more identical services deployed in two or more different regions in Railway.

    Duplicating a service can be done by right clicking and selecting **Duplicate**, opening its service settings and changing the region, then clicking **Deploy**.

    The services should be configured with a Railway-generated domain, do not assign a custom domain. It is also helpful to indicate the region in the domain.

    It's recommended to use [shared variables](/guides/variables#shared-variables) or [reference variables](/guides/variables#referencing-another-services-variable) for duplicated services to keep variables in sync.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015743/docs/tutorials/proximity-load-balancing/region_services_u10ukp.png"
alt="screenshot of two railway services in different regions"
layout="responsive"
width={890} height={435} quality={100} />

- Have a `/health` or similar endpoint in the services deployed to Railway, which should return a 200 status code when queried.

    This allows Cloudflare to check the health of our Railway services so they can handle region failover. As a bonus this can also be used on Railway to achieve [zero-downtime deployments](/reference/healthchecks).

**In Cloudflare -**

- Have your desired domain setup with Cloudflare's nameservers, they have a general guide for that [here](https://developers.cloudflare.com/dns/zone-setups/full-setup/setup/).

- Have **SSL/TLS** mode set to **Full**.

    **SSL/TLS → Overview → Full**

- Have **Always Use HTTPS** enabled.
    
    **SSL/TLS → Edge Certificates → Always Use HTTPS**
    
    This ensures that Railway avoids managing the insecure redirect, which would otherwise lead to an incorrect redirection to an upstream endpoint.

## 1. Creating a Health Monitor

- Open the Load Balancing page.

    **Traffic → Load Balancing**

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015860/docs/tutorials/proximity-load-balancing/load_balancing_page_yn5bm8.png"
alt="screenshot of the load balancing page"
layout="responsive"
width={1060} height={555} quality={100} />

- Click **Manage Monitors** and then **Create**.

- Enter your desired name for this health monitor.

- Choose **HTTPS** as the type.

- Enter your health endpoint path

    Example - `/health`

- Leave Port 443 as the default.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015787/docs/tutorials/proximity-load-balancing/health_monitor_oty6pd.png"
alt="screenshot of the cloudflare health monitor"
layout="responsive"
width={1060} height={315} quality={100} />

- Click **Save**.

## 2. Creating the Pools

- Go back to the Load Balancing page.

- Click **Manage Pools** and then **Create**.

- Fill out the name and description and leave **Endpoint Steering** as its default of **Random**, it will not be used with only a single endpoint.

- Enter the endpoint name, using the service name is ideal.

- For the **Endpoint Address** we use the Railway generated domain.

    Example -  `region-us-west1.up.railway.app`

    This should only be the domain, excluding both the scheme and trailing slash.

- For the weight option we will use a value of **1**.

- Click **Add host header** and enter the same value as used for the Endpoint Address.

    This step is important since Railway uses host-based routing and requires the host header to know how to route the incoming requests from Cloudflare.

- Remove the second empty endpoint.

    Our pool only needs to contain a single endpoint as Railway handles single region replicas for us.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015878/docs/tutorials/proximity-load-balancing/pool_settings_config_qh5s1k.png"
alt="screenshot of end endpoint settings in the pool creator"
layout="responsive"
width={1060} height={600} quality={100} />

- Click **Configure coordinates for Proximity Steering** and enter the Latitude and Longitude for your service region that can be found in this [JSON file](https://www.google.com/about/datacenters/json/locations.json).

    To find the coordinates of a region, look up its location and copy the corresponding **latitude** and **longitude** values into Cloudflare.

    You can find information on Railway's available regions and their locations [here](/reference/regions#region-options).

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015901/docs/tutorials/proximity-load-balancing/pool_settings_proximity_rybg2r.png"
alt="screenshot of the proximity settings in the pool creator"
layout="responsive"
width={1060} height={600} quality={100} />

- Select the Monitor dropdown and add our **Health** monitor we created earlier.

- Choose the applicable health check region according to the region that the Railway service was deployed to.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015844/docs/tutorials/proximity-load-balancing/pool_settings_health_ydlzvo.png"
alt="screenshot of the health settings in the pool creator"
layout="responsive"
width={1060} height={375} quality={100} />

- Click **Save**.

- Create another pool for your other services that are deployed into your desired regions, follow the same procedure.

This should be the end result, two or more pools -

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015821/docs/tutorials/proximity-load-balancing/pools_w1gext.png"
alt="screenshot of adding pools in the load balancer creator"
layout="responsive"
width={1060} height={435} quality={100} />

## 3. Creating the Load Balancer

- Go back to the Load Balancing page.

- Click **Create Load Balancer**.

- Enter the desired hostname or leave as the default for the root hostname.

    You may need to remove the leading period from the default hostname.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722016030/docs/tutorials/proximity-load-balancing/load_balancer_hostname_pfeolj.png"
alt="screenshot of the hostname in the load balancer creator"
layout="responsive"
width={1060} height={315} quality={100} />  

- Click **Next**.

- Add all the pools that were previously setup.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722016015/docs/tutorials/proximity-load-balancing/load_balancer_pools_egolib.png"
alt="screenshot of selected pools in the load balancer creator"
layout="responsive"
width={1060} height={585} quality={100} />

- Select the appropriate fallback pool.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015976/docs/tutorials/proximity-load-balancing/load_balancer_fallback_pool_krelrk.png"
alt="screenshot of fallback pool in the load balancer creator"
layout="responsive"
width={1060} height={260} quality={100} />

- Click **Next**.

- Monitors have already been setup on both pools, Click **Next**.

- Choose **Proximity steering**.

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015998/docs/tutorials/proximity-load-balancing/load_balancer_traffic_steering_bv3kwm.png"
alt="screenshot of traffic steering options in the load balancer creator"
layout="responsive"
width={1060} height={585} quality={100} />

- Click **Next**.

- If needed, create Custom Rules, otherwise click **Next**.

- Review the Load Balancing setup, if all looks good click **Save and Deploy**.

## Conclusion

After that process you should see something like the following -

<Image src="https://res.cloudinary.com/railway/image/upload/v1722015766/docs/tutorials/proximity-load-balancing/load_balancer_exgakv.png"
alt="screenshot of the finished load balancer"
layout="responsive"
width={1060} height={585} quality={100} />

That's all for the setup! You can now open your domain and Cloudflare will automatically route your requests to the Railway service you are in closest proximity to.

**Additional Resources**

This tutorial covers setting up a Proximity Load Balancer on Cloudflare but does not cover all the settings and configurations Cloudflare offers.

We recommend checking out these resources from Cloudflare:

- [What is load balancing?](https://developers.cloudflare.com/learning-paths/load-balancing/concepts/load-balancing/)
- [Proximity steering](https://developers.cloudflare.com/load-balancing/understand-basics/traffic-steering/steering-policies/proximity-steering/)
- [Components of a load balancer](https://developers.cloudflare.com/learning-paths/load-balancing/concepts/load-balancer-components/)
- [Monitors and health checks](https://developers.cloudflare.com/learning-paths/load-balancing/concepts/health-checks/)
- [Session affinity](https://developers.cloudflare.com/learning-paths/load-balancing/planning/session-affinity/)
- [Override HTTP Host headers](https://developers.cloudflare.com/load-balancing/additional-options/override-http-host-headers/)


================================================
FILE: src/docs/tutorials/set-up-a-datadog-agent.md
================================================
---
title: Set Up a Datadog Agent in Railway
description: Learn how to set up a Datadog agent in Railway.
---

Datadog provides a centralized location for logs, metrics, and traces emitted from applications deployed in various locations.

While Railway has a native, [centralized logging mechanism](/guides/logs#log-explorer), you may have a need to ship this data to another location, to view it alongside data collected from systems outside of Railway.

**Objectives**

In this tutorial you will learn how to -
- Deploy a Datadog agent in Railway - listening for metrics, logs, and traces.
- Configure an application to send metrics, logs, and traces to the agent.

If you are looking for a quicker way to get started, you can also deploy this project from a <a href="https://railway.com/template/saGmYG" target="_blank">template</a>.

**Prerequisites**

To be successfull, you should already have - 

- Railway [CLI installed](/guides/cli#installing-the-cli)
- Datadog API key and site value

**Caveats**

Keep in mind that the Datadog agent sends data to Datadog over the Internet, meaning you will see an increase in egress cost.  If this is a concern, you may be interested in exploring self-hosted solutions, and we encourage you to check out the [OpenTelemetry Tutorial](/tutorials/deploy-an-otel-collector-stack).

## 1. Create the Project Structure

First we'll create the project structure.

From your local machine -

- Create a folder for your project called `railway-project`.
- Create two folders inside of `railway-project` called `agent` and `expressapi`.

You project structure should look like this

```
railway-project/
├── agent/
└── expressapi/
```


## 2. Set Up the Datadog Agent

Now we'll add files to the `agent` folder, which will build the Datadog Agent image.

- Inside of the `agent` folder, create three files -
  - `Dockerfile`
  - `syslog.yaml`
  - `datadog.yaml`

#### Define the Dockerfile

Let's define the Dockerfile.  

- Within your Dockerfile, add the following contents.

  ```dockerfile
  FROM datadog/agent:7

  # Set environment variables
  ENV DD_LOGS_ENABLED=true
  ENV DD_APM_ENABLED=true
  ENV DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
  ENV DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
  ENV DD_APM_NON_LOCAL_TRAFFIC=true
  ENV DD_BIND_HOST=::1

  # Reference Variables defined in Railway
  ARG DD_API_KEY
  ARG DD_HOSTNAME
  ARG DD_SITE

  # Copy datadog.yaml into the container
  COPY datadog.yaml /etc/datadog-agent/datadog.yaml

  # Copy syslog configuration file
  COPY syslog.yaml /etc/datadog-agent/conf.d/syslog.d/

  # DogStatsD port, APM port, and the syslog port
  EXPOSE 8125/udp
  EXPOSE 8126
  EXPOSE 514/udp
  ```

#### Define the syslog.yaml file

The `syslog.yaml` file is used to instruct the agent to listen for syslogs to be forwarded on the configured port.

- Within the `syslog.yaml` file, add the following contents - 

  ```
  logs:
    - type: udp
      port: 514
      service: "node-app"
      source: syslog
  ```

#### Define the datadog.yaml file

The `datadog.yaml` file is used to instruct the agent to send logs to Datadog over `http` instead of the default `tcp`.

- Within the `datadog.yaml` file, add the following contents -

  ```
  logs_config:
    force_use_http: true
  ```

## 3. Set Up the Node Express App

Now let's build a Node Express App that will send logs and metrics to the Datadog Agent over the [Private Network](/reference/private-networking).

- Create an `app.js` file inside of the `expressapi` folder you created in Step 1.
- Use `npm` (or your preferred package manager) to install the required dependencies - 

  ```npm
  npm i express winston winston-syslog dd-trace
  ```

#### Define the app.js file

The `app.js` file defines your express server.  This is where we will import the DataDog tracer and initialize the StatsD client and the Winston logger, which will send traces, metrics, and logs, respectively, to the Datadog agent.

- Within the `app.js` file, add the following contents -

  ```javascript
  // ** it is important to import the tracer before anything else **
  const tracer = require('dd-trace').init();

  const express = require('express');
  const app = express();

  const StatsD = require('hot-shots');
  const { createLogger, format, transports } = require('winston');
  require('winston-syslog').Syslog;
  const port = process.env.PORT || 3000;

  // Configure the StatsD client
  const statsdClient = new StatsD({
    host: process.env.DD_AGENT_HOST,
    port: process.env.DD_AGENT_STATSD_PORT,
    protocol: 'udp',
    cacheDns: true,
    udpSocketOptions: {
      type: 'udp6',
      reuseAddr: true,
      ipv6Only: true,
    },
  });

  // Configure Winston logger
  const logger = createLogger({
    level: 'info',
    exitOnError: false,
    format: format.json(),
    transports: [
      new transports.Syslog({
        host: process.env.DD_AGENT_HOST,
        port: process.env.DD_AGENT_SYSLOG_PORT,
        protocol: 'udp6',
        format: format.json(),
        app_name: 'node-app',
      }),
    ],
  });

  app.get('/', (req, res) => {
    // Increment a counter for the root path
    statsdClient.increment('data_dog_example.homepage.hits');
    statsdClient.gauge('data_dog_example.homepage.hits', 124);

    // forward logs from root path
    logger.info('Root route was accessed');

    res.send('Hello World!');
  });

  app.get('/test', (req, res) => {
    // Increment a counter for the test path
    statsdClient.increment('data_dog_example.testpage.hits');

    // forward logs from test path
    logger.info('Test route was accessed');

    res.send('This is the test endpoint!');
  });

  app.listen(port, () => {
    console.log(`Example app listening at port ${port}`);
  });

  ```

#### Winston and hot-shots

In this example app, we are using `Winston` as the logger and `hot-shots` as the StatsD client.  

- `Winston` is configured using `winston-syslog` to transport **logs** to the Datadog agent via Syslog over `udp6`.
- `hot-shots` is configured to send **metrics** to the Datadog agent over `udp6`.

## 4. Set Up the Railway Project

Now let's create the project using the CLI, then create the services and variables from within the project in Railway.

You will need your **Datadog API key** and **Site** value in this step.

If you have not already done so, please [install the CLI](/guides/cli#installing-the-cli) and [authenticate](/guides/cli#authenticating-with-the-cli).

#### Create a Project

- In your terminal, run the following command to create a new project -

    ```plaintext
    railway init
    ```

- Name your project `datadog-project` when prompted (you can change this later).

- Open your project in Railway by running the following - 

    ```plaintext
    railway open
    ```

#### Create the Services

-  In Railway, create an Empty Service by clicking `+ New` button in the top right-hand corner and choosing `Empty Service` in the prompt.
- Right click on the service that is created, select `Update Info` and name it `datadog-agent`.
- Repeat the above steps to create a second service, but name the second service `expressapi`.

#### Add the Variables

Each service requires unique variables listed below.  For each service, follow the steps to add the variables required for the service.

`datadog-agent` Variables -

```plaintext
DD_API_KEY=<YOUR_API_KEY>
DD_HOSTNAME=${{RAILWAY_PRIVATE_DOMAIN}}
DD_SITE=<YOUR_DATADOG_SITE>
```

`expressapi` Variables -

```plaintext
DD_AGENT_HOST=${{datadog-agent.DD_HOSTNAME}}
DD_AGENT_STATSD_PORT=8125
DD_AGENT_SYSLOG_PORT=514
DD_TRACE_AGENT_PORT=8126
```

- Click on the service card
- Click on the `Variables` tab
- Click on `Raw Editor`
- Paste the required variables (be sure to update the Datadog API key and site with your own values)
- Click `Update Variables` and `Deploy`

## 5. Deploy to Railway

Now we're ready to deploy our services.  We will use the CLI to push code from our local machine to Railway.

#### Railway Up

Follow these steps for each service -

- In your local terminal, change directory into the `agent` folder.
- Link to `datadog-project` by running the following command - 
  ```plaintext
  railway link
  ```
- Follow the prompts, selecting the `datadog-project` and `production` environment.
- Link to the `datadog-agent` service by running the following command -
  ```plaintext
  railway service
  ```
- Follow the prompt, selecting the `datadog-agent` service.
- Deploy the agent by running the following command -
  ```plaintext
  railway up -d
  ```
- Change directory into your `expressapi` folder and repeat the steps above, but for the `expressapi` service.

#### Create a Domain for the Express App

The express app will send logs and metrics to the Datadog agent upon navigation to either of its two routes.  So let's give it a domain -
- Ensure that you are linked to the `datadog-project` and `expressapi` service (refer to the steps above)
- Assign the `expressapi` a domain by running the following command - 
  ```plaintext
  railway domain
  ```

## 6. Test and Confirm

Test that your Datadog Agent is receiving and forwarding data to Datadog by navigating to the routes in the Express app -
- `/`
- `/test`

Generate some traffic to these two routes and verify in your Datadog instance that the data is there.

*Note: it can take a few minutes to see the data in Datadog, check the Datadog Agent's logs in Railway*

## Bonus - Add a Python service

Once you have your agent setup and working with a node app.  It's easy to add more services and configure the agent to accept data from them.  In this bonus section, we'll quickly cover a Python implementation.

In the following example, we are using the <a href="https://fastapi.tiangolo.com/" target="_blank">FastAPI Python framework</a>.  

**In the `main.py` file we have configured both metrics and logs to be sent over StatsD and SysLog respectively -**

```python
import logging.handlers
from fastapi import FastAPI
from datadog import initialize, statsd, DogStatsd
import logging
import random
import os
import json_log_formatter

## Configuration for sending logs
formatter = json_log_formatter.JSONFormatter()

json_handler = logging.handlers.SysLogHandler(address=(os.getenv("DD_AGENT"), os.getenv("DD_AGENT_SYSLOG_PORT")))
json_handler.setFormatter(formatter)

logger = logging.getLogger('python-app')
logger.addHandler(json_handler)
logger.setLevel(logging.INFO)


# Configuration for sending metrics
config = {
    "api_key": os.getenv("DD_API_KEY"),
    "statsd_host": os.getenv("DD_AGENT_HOST"),
    "statsd_port": os.getenv("DD_AGENT_STATSD_PORT"),
    "statsd_constant_tags": ["env:prod"],
}

initialize(**config)

app = FastAPI()

# Use DogStatsd client for more custom metrics
dog_statsd = DogStatsd()

@app.get("/")
async def root():
    # Increment a simple counter
    statsd.increment('example_app.page.views')

    # Record a random gauge value
    gauge_value = random.uniform(1, 100)
    statsd.gauge('example_app.random_value', gauge_value)

    # Log a message
    logger.info(f"Page viewed, gauge value: {gauge_value}")

    # Custom metric using DogStatsd
    dog_statsd.histogram('example_app.response_time', random.uniform(50, 300))

    return {"message": "Hello World"}

# Additional route for testing
@app.get("/test")
async def test():
    # Custom metrics and logging
    statsd.increment('example_app.test.endpoint.hits')
    test_value = random.randint(1, 10)
    dog_statsd.gauge('example_app.test.value', test_value)
    logger.info(f"Test endpoint hit, value: {test_value}")

    return {"test_value": test_value}

```

**Ensure that you configure all of the required variables in the Python service in Railway -**
- DD_AGENT_HOST - *should be the private domain of the DataDog agent*
- DD_API_KEY
- DD_AGENT_STATSD_PORT - *should be 8125*
- DD_AGENT_SYSLOG_PORT - *should be **515** to work with the configuration below*

**Update the DataDog agent's `syslog.yaml` file to accept data from the new source -**
```plaintext
logs:
  - type: udp
    port: 514
    service: "node-app"
    source: syslog
  - type: udp
    port: 515
    service: "python-app"
    source: syslog
```

## Conclusion

Congratulations!  You have deployed a Datadog Agent and a Node Express app (and maybe a Python service) that sends logs and metrics to Datadog.

This is a *very* basic implementation, and you should refer to the <a href="https://docs.datadoghq.com/" target="_blank">Datadog documentation</a> for information on how to customize the data you send.


================================================
FILE: src/docs/tutorials/set-up-a-tailscale-subnet-router.md
================================================
---
title: Set up a Tailscale Subnet Router
description: Learn how to access a private network on Railway by using a Tailscale Subnet Router.
---

## What is a Subnet router?

> A subnet router is a device within your tailnet that you use as a gateway that advertises routes for other devices that you want to connect to your tailnet without installing the Tailscale client.

*Source: <a href="https://tailscale.com/kb/1019/subnets" target="_blank">Subnet routers</a> Via Tailscale's Documentation*

In the context of Railway, The "other devices" are the services within a project.

## About this Tutorial

This tutorial will help you connect to your database via the private network without you having to use public endpoints.

Since Railway doesn't currently offer a native way to access the <a href="https://docs.railway.com/reference/private-networking" target="_blank">private network</a> from our local environment, we can use a Tailscale Subnet Router to accomplish this.

Deploying Tailscale as a subnet router into our project means that we can access the `railway.internal` private domains from any device connected to our tailnet.

This tutorial aims to provide a simple step-by-step guide on setting up everything needed so that we can access the private domains of our services.

**Objectives**

In this tutorial, you'll learn how to do the following: -

- Generate an Auth Key.
- Set up split DNS.
- Deploy the Tailscale Subnet Router template.
- Approve the private network subnet.
- (Bonus) Connect to Postgres locally via the private domain.

**Prerequisites**

This guide assumes you are familiar with the concepts of Private Network, for a quick explainer check out our <a href="/guides/private-networking" target="_blank">guide</a> and <a href="/reference/private-networking" target="_blank">reference</a> page.

**In Railway -**

- Have all the services you plan on connecting to via the tailnet, listening on IPv6.

    This is necessary because the Tailscale tunnel will communicate with your services over Railway's IPv6-only private network.

    All database services already do this but for information on configuring your service to listen on IPv6, see [here](/guides/private-networking#listen-on-ipv6).

**In Tailscale -**

- Have an account.

    You can sign up <a href="https://login.tailscale.com/start" target="_blank">here</a> - For what this template achieves you do not need a paid plan.

- Have the Tailscale app installed on your computer.

    You can find the downloads for your OS <a href="https://tailscale.com/download" target="_blank">here</a>.

## 1. Getting an Auth Key

The Auth key will authenticate the Tailscale machine that we'll deploy into our Railway project in a later step.

- Head over to the [Keys](https://login.tailscale.com/admin/settings/keys) page located within the settings menu on the Tailscale dashboard.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349121/docs/tutorials/tailscale-subnet-router/keys_page_vohahp.png"
alt="screenshot of the tailscale settings page"
layout="intrinsic"
width={1261} height={772} quality={100} />

- Click **Generate auth key**.

    Put in a description and leave all other settings as the default.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349121/docs/tutorials/tailscale-subnet-router/generate_auth_key_oxqr8m.png"
alt="screenshot of the generate auth key modal in tailscale"
layout="intrinsic"
width={602} height={855} quality={100} />

- Click **Generate key**.

    Tailscale will now show you the newly generated auth key, **be sure to copy it down**.

- Click **Done**.

## 2. Configure Split DNS

Properly configuring our nameserver in Tailscale is essential for enabling local DNS lookups for our private domains.

- Open the <a href="https://login.tailscale.com/admin/dns" target="_blank">DNS</a> page.

- Under the **Nameservers** Header, click **Add Nameserver** → Click **Custom**.

    This is where we'll tell Tailscale how to route the DNS lookups for our `railway.internal` domains.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349122/docs/tutorials/tailscale-subnet-router/tailscale_nameservers_en8oma.png"
alt="screenshot of the nameservers dropdown in tailscale"
layout="intrinsic"
width={813} height={683} quality={100} />

- Enter `fd12::10` as the Nameserver.

    This DNS nameserver is used across all private networks in every environment and will handle our DNS queries for private domains.

- Enable the **Restrict to domain** option, AKA Split DNS.

- Enter in `railway.internal` as our domain.

    This makes sure only DNS lookups for our private domain are forwarded to the private DNS resolver.
    
<Image src="https://res.cloudinary.com/railway/image/upload/v1724349120/docs/tutorials/tailscale-subnet-router/add_nameserver_mlkk5y.png"
alt="screenshot of the add nameserver modal in tailscale"
layout="intrinsic"
width={602} height={572} quality={100} />

- Click **Save**.

## 3. Deploy the Tailscale Subnet Router

This will be the gateway into our environment's private network.

- Open the project that contains the services you want to access privately.

    For this tutorial, we will deploy the Subnet Router into a project with a Postgres database service.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349122/docs/tutorials/tailscale-subnet-router/project_with_postgres_x19ggr.png"
alt="screenshot of a project canvas on railway showing a single postgres service"
layout="intrinsic"
width={1363} height={817} quality={100} />

- In the top right of the project canvas, click **Create** → Choose **Template**.

- Search for the <a href="https://railway.com/template/tailscale" target="_blank">Tailscale Subnet Router</a> template.

    Choose the result that is published by **Railway Templates**.

<Image src="https://res.cloudinary.com/railway/image/upload/v1743471191/docs/template-tailscale_ryph2o.png"
alt="screenshot of the choose a template modal showing the tailscale template within railway"
layout="intrinsic"
width={1200} height={634} quality={100} />

- A ghost service will appear, Paste in your Auth Key from earlier.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349120/docs/tutorials/tailscale-subnet-router/tailscale_subnet_router_ghost_jjyt2s.png"
alt="screenshot of the tailscale template asking for the auth key"
layout="intrinsic"
width={1363} height={817} quality={100} />

- Click **Deploy Template**

This template will start to deploy and once deployed it will register itself as a machine in your tailnet with the name automatically derived from the project's name and environment name.

## 4. Approve the Subnet

Our subnet router will advertise the private network's CIDR range but we will need to manually approve it.

- Head back over to our [Machines dashboard](https://login.tailscale.com/admin/machines).

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349122/docs/tutorials/tailscale-subnet-router/tailscale_machines_d3qcey.png"
alt="screenshot of the machine's dashboard in tailscale that is showing a subnet needs approving"
layout="intrinsic"
width={1261} height={560} quality={100} />

You will see your newly deployed machine with its name that was previously derived from the project and environment.

<div style={{'display': "inline-flex", 'align-items': "center"}}>
    <span style={{ "marginRight": "8px" }}>Notice the</span><strong style={{ "marginRight": "3px" }}>Subnets</strong>
    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.75" stroke-linecap="round" stroke-linejoin="round" class="ml-1"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
    <span style={{ "marginLeft": "6px" }}>Info box under the machine name.</span>
</div>

- Click on the machine's 3-dot menu → **Edit route settings**.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349121/docs/tutorials/tailscale-subnet-router/machine_3_dot_menu_ygqktw.png"
alt="screenshot of the machines page in tailscale with the 3-dot menu open and edit route settings selected"
layout="intrinsic"
width={1320} height={593} quality={100} />

- Click the radio button on the `fd12::/16` to accept it.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349120/docs/tutorials/tailscale-subnet-router/edit_route_settings_tyna0n.png"
alt="screenshot of the edit route settings in tailscale showing our route being accepted"
layout="intrinsic"
width={602} height={526} quality={100} />

    This route covers the entire private networking range allowing us to access all services within the project.

- Click **Save**.

- Ensure that the **Use Tailscale subnets** option is enabled in your Tailscale client's Settings or Preferences menu.

**That is it for all the configurations needed, you can now call any service via its private domain and port just as if you were another service within the private network!**

## 5. Connecting To a Service On the Private Network (Bonus)

During this tutorial we have used Postgres as an example service, so let's finally connect to it via its private domain and port!

You can use any database GUI tool you prefer, or none at all, since our setup allows you to connect to the database over the private network using any software.

Example: Your `prisma migrate deploy` or `python manage.py migrate` commands will now work locally without the need to use the public host and port for the database.

<Image src="https://res.cloudinary.com/railway/image/upload/v1724349120/docs/tutorials/tailscale-subnet-router/dbgate_priv_net_mdjnlh.png"
alt="screenshot of dbgate showing that we have successfully connected to our database"
layout="intrinsic"
width={1316} height={506} quality={100} />

*Note the use of our private domain and port in the database URL.*

**Additional Resources**

This tutorial explains how to set up a Tailscale Subnet router on Railway but does not delve into all the terminology and settings related to Tailscale.

We recommend reviewing the following Tailscale documentation:

- [Subnet router](https://tailscale.com/kb/1019/subnets)
- [Auth keys](https://tailscale.com/kb/1085/auth-keys)
- [Machine names](https://tailscale.com/kb/1098/machine-names)
- [DNS](https://tailscale.com/kb/1054/dns?q=dns#use-dns-settings-in-the-admin-console)
- [Tailscale FAQ](https://tailscale.com/kb/1366/faq)



================================================
FILE: src/hooks/useCopy.ts
================================================
import { useRef, useState } from "react";
import copy from "copy-to-clipboard";

export const useCopy = (): [boolean, (text: string) => void] => {
  const [showCopied, setShowCopied] = useState(false);
  const timeoutRef = useRef<any>(null);

  const copyText = (text: string) => {
    copy(text);
    setShowCopied(true);

    if (timeoutRef.current != null) {
      clearTimeout(timeoutRef.current);
    }

    timeoutRef.current = setTimeout(() => {
      setShowCopied(false);
      timeoutRef.current = null;
    }, 1500);
  };

  return [showCopied, copyText];
};



================================================
FILE: src/hooks/useDebouncedSearch.ts
================================================
import { Search } from "@/types";
import { trackGoal } from "fathom-client";
import { MeiliSearch, SearchParams, SearchResponse } from "meilisearch";
import { useCallback, useEffect, useMemo, useState } from "react";

const FATHOM_SEARCH_PERFORMED_EVT_ID = "IMSTAYP4";

type Transformer<Source, Result extends any> = (
  src: SearchResponse<Source>,
) => Result;

/**
 * Default transformer for the document structure created by
 * https://github.com/meilisearch/docs-scraper.
 */
const defaultTransformResponse: Transformer<
  Search.Document,
  Search.Result
> = response => {
  const { hits } = response;
  const chapters = Array.from(new Set(hits.map(r => r.hierarchy_lvl0)));
  return chapters.reduce((acc, curr) => {
    acc[curr] = [
      ...hits
        .filter(r => r.hierarchy_lvl0 === curr)
        .map(hit => ({
          hierarchies: [
            // `hit.hierarchy_lvl0` is intentionally ignored here; we're
            // grouping the rendered output by it so it's redundant.
            // In practice, this means that we'll render:
            //   >> "Databases"
            //   >> "PostgreSQL"
            //   >> ...
            // instead of:
            //   >> "Databases"
            //   >> "Databases -> PostgreSQL"
            //   >> ...
            hit.hierarchy_lvl1,
            hit.hierarchy_lvl2,
            hit.hierarchy_lvl3,
            hit.hierarchy_lvl4,
          ].filter(h => h !== null),
          slug: hit.url,
          text: (hit._formatted && hit._formatted.content) ?? "",
        })),
    ];
    return acc;
  }, {} as Search.Result);
};

/**
 * This hook provides functionality for searching a MeiliSearch index. It
 * exposes a `query` string and `setQuery` method for controlling an
 * <input /> element in a debounced manner, a `results` object containing
 * the search results, and a `clearResults` method for clearing search
 * results.
 *
 * It can also take in a `transformResponse` method for transforming the
 * raw response from Meilisearch into a structure you define.
 */
export const useDebouncedSearch = <
  Response extends Record<string, any>,
  Result,
>(
  host: string,
  apiKey: string,
  indexName: string,
  params: SearchParams,
  debounceMs: number = 500,
  transformResponse: Transformer<
    Response,
    Result
  > = defaultTransformResponse as Transformer<any, any>,
) => {
  if (host === "") {
    console.error(`useDebouncedSearch.host is missing`);
  }
  if (apiKey === "") {
    console.error(`useDebouncedSearch.apiKey is missing`);
  }
  if (indexName === "") {
    console.error(`useDebouncedSearch.indexName is missing`);
  }

  // Controlled input for rendering
  const [rawInput, setRawInput] = useState("");
  // Actual query from input that gets sent in search requests
  const [query, setQuery] = useState("");
  // Loading indicator
  const [isSearching, setIsSearching] = useState(false);

  const [results, setResults] = useState<Result | null>(null);

  // Get index
  const index = useMemo(() => {
    const meilisearch = new MeiliSearch({
      host,
      apiKey,
    });
    return meilisearch.index<Response>(indexName);
  }, [host, apiKey, indexName]);

  // Get search response
  const search = useCallback(async () => {
    if (query === "") {
      return;
    }
    setIsSearching(true);
    try {
      const response = await index.search<Response>(query, params);
      trackGoal(FATHOM_SEARCH_PERFORMED_EVT_ID, 0);
      setResults(transformResponse(response));
    } catch (e) {
      console.error(`Search for query "${query}" failed (${e})`);
    }
    setIsSearching(false);
  }, [query, setIsSearching]);

  // Perform search and clear search results if query is empty
  useEffect(() => {
    if (query === "") {
      setResults(null);
      return;
    }
    search();
  }, [query, search]);

  // Debounce query input
  useEffect(() => {
    const debouncedFn = setTimeout(() => setQuery(rawInput), debounceMs);
    return () => clearTimeout(debouncedFn);
  }, [rawInput, debounceMs]);

  return {
    query: rawInput,
    isSearching,
    clearResponse: () => {
      setQuery("");
      setRawInput("");
      setResults(null);
    },
    setQuery: setRawInput,
    results,
  };
};



================================================
FILE: src/hooks/useFathom.ts
================================================
import * as Fathom from "fathom-client";
import { useRouter } from "next/router";
import { useEffect } from "react";

export const useFathom = (trackingCode: string, siteUrl: string) => {
  const router = useRouter();

  useEffect(() => {
    // Initialize Fathom when the app loads
    Fathom.load(trackingCode, {
      includedDomains: [siteUrl],
    });

    const onRouteChangeComplete = () => {
      Fathom.trackPageview();
    };
    // Record a pageview when route changes
    router.events.on("routeChangeComplete", onRouteChangeComplete);

    // Unassign event listener
    return () => {
      router.events.off("routeChangeComplete", onRouteChangeComplete);
    };
  }, []);
};



================================================
FILE: src/hooks/useGlobalBanners.tsx
================================================
import { BannerVariant } from "@/components/Banner";
import { Link } from "@/components/Link";
import { useMemo } from "react";
import useLocalStorageState from "use-local-storage-state";
import tw from "twin.macro";

export interface GlobalBanner {
  id: string;
  message: string | React.ReactElement;
  variant?: BannerVariant;
}

// const LaunchWeekBanner = ({
//   linkText,
//   isFirstStop,
//   isLastStop,
// }: {
//   linkText: string;
//   isFirstStop?: boolean;
//   isLastStop?: boolean;
// }) => (
//   <>
//     <span role="img">🚅</span>{" "}
//     <span>
//       <strong>Launch Week 02</strong> is{" "}
//       {isFirstStop ? "boarding soon" : "in service"}.{" "}
//       {isFirstStop ? "First" : isLastStop ? "Last" : "Next"} stop:{" "}
//       <Link href="https://railway.com/launch-week-02/day-4" tw="underline">
//         {linkText}
//       </Link>
//       !
//     </span>
//   </>
// );

const GLOBAL_BANNERS_KEY = "@railway/globalBanners";
const useGlobalBannersLocalStorage = () =>
  useLocalStorageState<Record<string, boolean>>(GLOBAL_BANNERS_KEY, {
    defaultValue: {},
  });

export const allGlobalBanners: GlobalBanner[] = [
  // // Day 0
  // {
  //   id: "day-00",
  //   message: <LaunchWeekBanner linkText="Railway for Frontend" />,
  // },
];

export const useGlobalBanners = () => {
  const [viewedGlobalBanners, setViewedGlobalBanners] =
    useGlobalBannersLocalStorage();

  const dismissGlobalBanner = (id: string) => {
    setViewedGlobalBanners(currentBanners => ({
      ...currentBanners,
      [id]: true,
    }));
  };

  // Oldest banner that should be visible
  const currentBanner = useMemo(() => {
    const viewedBanners = Object.entries(viewedGlobalBanners)
      .filter(([, viewed]) => viewed)
      .map(([id]) => id);

    const unviewedBanners = allGlobalBanners.filter(
      banner => !viewedBanners.includes(banner.id),
    );

    return unviewedBanners[0] ?? null;
  }, [allGlobalBanners, viewedGlobalBanners]);

  return {
    currentBanner,
    dismissGlobalBanner,
  };
};



================================================
FILE: src/hooks/useHashRedirect.ts
================================================
import { useEffect } from "react";
import { hashRedirects } from "../../redirects";

export function useHashRedirect() {
  useEffect(() => {
    const { hash } = window.location;

    if (!hash) return;

    const { pathname } = window.location;

    const redirect = hashRedirects.find(redirect => {
      const sourceParts = redirect.source.split("#");
      
      return sourceParts.length === 2 && sourceParts[0] !== ""
        ? pathname + hash === redirect.source
        : hash === redirect.source;
    });

    if (redirect) window.location.replace(redirect.destination);
  }, []);
}



================================================
FILE: src/hooks/useIsMounted.ts
================================================
import { useEffect, useState } from "react";

export const useIsMounted = (): boolean => {
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => setIsMounted(true), []);
  return isMounted;
};



================================================
FILE: src/hooks/useMediaQuery.ts
================================================
import { useEffect, useState, useMemo } from "react";

const onBrowser = typeof window !== "undefined" && window.matchMedia != null;

export const useMediaQuery = (query: string): boolean => {
  const mediaQuery: MediaQueryList | null = useMemo(
    () => (onBrowser ? window.matchMedia(query) : null),
    [query],
  );

  const [value, setValue] = useState(mediaQuery?.matches);

  useEffect(() => {
    const handler = () => {
      setValue(mediaQuery?.matches);
    };

    mediaQuery?.addListener(handler);
    return () => mediaQuery?.removeListener(handler);
  }, [mediaQuery]);

  return value ?? false;
};



================================================
FILE: src/hooks/usePostHog.ts
================================================
import posthog from "posthog-js";
import { useRouter } from "next/router";
import { useEffect } from "react";

// Define constant for localStorage key
export const POSTHOG_SESSION_ID_KEY = "railway_posthog_session_id";

export const usePostHog = (apiKey: string, hostUrl: string) => {
  const router = useRouter();

  useEffect(() => {
    // Only initialize PostHog in production
    if (process.env.NODE_ENV === "production" && apiKey) {
      try {
        // Check for existing session ID in localStorage
        const existingSessionId = localStorage.getItem(POSTHOG_SESSION_ID_KEY);

        // Initialize PostHog
        posthog.init(apiKey, {
          api_host: hostUrl,
          loaded: ph => {
            // If we have an existing session ID and it differs from the current one, set it
            if (
              existingSessionId &&
              ph.get_distinct_id() !== existingSessionId
            ) {
              ph.identify(existingSessionId);
            } else if (!existingSessionId) {
              // Store the new session ID
              localStorage.setItem(
                POSTHOG_SESSION_ID_KEY,
                ph.get_distinct_id(),
              );
            }
          },
          capture_pageview: false,
        });

        // Track page views when route changes
        const onRouteChangeComplete = () => {
          posthog.capture("$pageview");
        };

        router.events.on("routeChangeComplete", onRouteChangeComplete);

        // Cleanup function
        return () => {
          router.events.off("routeChangeComplete", onRouteChangeComplete);
          // Optionally flush any queued events before unmounting
          posthog.capture("$pageleave");
        };
      } catch (error) {
        console.error("Error initializing PostHog:", error);
      }
    }

    // Return empty cleanup function if not initialized
    return () => {};
  }, [apiKey, hostUrl, router.events]);
};



================================================
FILE: src/hooks/usePrefersDarkMode.ts
================================================
import { useMediaQuery } from "./useMediaQuery";

export const prefersDarkModeMediaQuery = "(prefers-color-scheme: dark)";

export const usePrefersDarkMode = (): boolean => {
  return useMediaQuery(prefersDarkModeMediaQuery);
};



================================================
FILE: src/hooks/useScrollToOpenCollapse.ts
================================================
import { useEffect } from "react";

export function useScrollToOpenCollapse() {
  useEffect(() => {
    const hash = window.location.hash.slice(1);
    if (!hash) return;

    const element = document.getElementById(hash);
    if (!element) return;

    const handleMutation = (mutations: MutationRecord[]) => {
      if (
        mutations.some(
          mutation =>
            mutation.type === "attributes" &&
            mutation.attributeName === "open" &&
            mutation.target === element,
        )
      ) {
        element.scrollIntoView();
        observer.disconnect();
      }
    };

    const observer = new MutationObserver(handleMutation);
    observer.observe(element, { attributes: true });

    return () => observer.disconnect();
  }, []);
}



================================================
FILE: src/layouts/DocsLayout.tsx
================================================
import { useRouter } from "next/router";
import React, { PropsWithChildren, useMemo } from "react";
import "twin.macro";
import { Link } from "../components/Link";
import { PageNav } from "../components/PageNav";
import { SEO } from "../components/SEO";
import { sidebarContent } from "../data/sidebar";
import { FrontMatter, ISidebarContent, IPage } from "../types";
import { Props as PageProps } from "./Page";

export interface Props extends PageProps {
  frontMatter: FrontMatter;
}

const getOGImage = (title: string) =>
  `https://og.railway.com/api/image?fileType=png&layoutName=Docs&Theme=Dark&URL=&Page=${encodeURIComponent(
    title,
  )}`;

const domainUrl = "https://docs.railway.com";
const fallbackDescription = "Documentation for Railway";

export const flattenSidebarContent = (sidebarContent: ISidebarContent): IPage[] => {
  let flatPages: IPage[] = [];
  sidebarContent.forEach(section => {
    section.content.forEach(item => {
      if ('url' in item) {
        // Skip external links
        return;
      } else if ('subTitle' in item) {
        // this is the subTitle page
        if (typeof item.subTitle !== 'string') {
          flatPages.push(item.subTitle);
        }
        // also used for skipping external links
        item.pages.forEach(page => {
          if (!('url' in page)) {
            flatPages.push(page);
          }
        });
      } else {
        // This is a page
        flatPages.push(item);
      }
    });
  });
  return flatPages;
};

export const DocsLayout: React.FC<PropsWithChildren<Props>> = ({
  frontMatter,
  children,
  ...props
}) => {
  const {
    query: { slug },
  } = useRouter();

  const prefixedSlug = useMemo(
    () => `/${(slug as string[] | undefined)?.join("/")}`,
    [slug],
  );
  const gitHubFileLink = useMemo(
    () =>
      `https://github.com/railwayapp/docs/edit/main/src/docs${prefixedSlug}.md`,
    [prefixedSlug],
  );

  const { prevPage, nextPage } = useMemo(() => {
    const flatPages = flattenSidebarContent(sidebarContent);
    const pageIndex = flatPages.findIndex(p => p.slug === prefixedSlug);

    const prevPage = pageIndex > 0 ? flatPages[pageIndex - 1] : null;
    const nextPage = pageIndex < flatPages.length - 1 ? flatPages[pageIndex + 1] : null;

    return { prevPage, nextPage };
  }, [slug]);

  return (
    <>
      
      <SEO
        title={`${frontMatter.title} | Railway Docs`}
        twitterTitle={`${frontMatter.title}`}
        description={`${frontMatter.description || fallbackDescription}`}
        url={`${domainUrl}${frontMatter.url}`}
        image={getOGImage(frontMatter.title)}
      />
      <div tw="max-w-full flex flex-row min-h-screen">
        <div tw="flex-auto prose dark:prose-invert">
          <div className="docs-content">
            <h1>{frontMatter.title}</h1>
            {children}
          </div>

          <hr tw="my-16" />

          <div
            tw="flex items-center justify-between space-x-4 mb-8 md:mb-16"
            className="prev-next-buttons"
          >
            {prevPage != null ? (
              <Link href={prevPage.slug} tw="hover:text-pink-500">
                <div tw="max-w-full">
                  <div tw="text-gray-600 text-sm mb-1">Prev</div>{" "}
                  <div tw="font-medium text-lg">{prevPage.title}</div>
                </div>
              </Link>
            ) : (
              <div />
            )}

            {nextPage != null && (
              <Link href={nextPage.slug} tw="hover:text-pink-500">
                <div tw="text-right">
                  <div tw="text-gray-600 text-sm mb-1">Next</div>{" "}
                  <div tw="font-medium text-lg">{nextPage.title}</div>
                </div>
              </Link>
            )}
          </div>

          <Link
            className="edit-github-link"
            tw="text-gray-500 text-sm underline hover:text-pink-500"
            href={gitHubFileLink}
          >
            Edit this file on GitHub
          </Link>
        </div>
        <PageNav title={frontMatter.title} />
      </div>
    </>
  );
};



================================================
FILE: src/layouts/Page.tsx
================================================
import { Modal } from "@/components/Modal";
import { SearchModal } from "@/components/Search";
import { searchStore } from "@/store";
import { useStore } from "@nanostores/react";
import React, { PropsWithChildren, useEffect } from "react";
import tinykeys from "tinykeys";
import "twin.macro";
import { MobileNav, Nav } from "../components/Nav";
import { Props as SEOProps, SEO } from "../components/SEO";
import { Sidebar } from "../components/Sidebar";
import { Background } from "../pages";
import { GlobalBanners } from "@/components/GlobalBanner";

export interface Props {
  seo?: SEOProps;
}

export const Page: React.FC<PropsWithChildren<Props>> = props => {
  const isSearchOpen = useStore(searchStore);

  useEffect(() => {
    const unsubscribe = tinykeys(window, {
      "$mod+K": e => {
        e.preventDefault();
        searchStore.set(!isSearchOpen);
      },
    });

    return () => unsubscribe();
  }, [isSearchOpen]);

  return (
    <>
      <SEO {...props.seo} />
      <GlobalBanners />
      <div tw="min-h-screen relative flex">
        <Sidebar />
        <div tw="flex flex-col flex-1 max-w-[100vw]">
          <Background />

          {/*This area would be perfect to add the bg image.*/}
          <Nav />
          <MobileNav />

          <main tw="flex justify-between px-4 w-full max-w-5xl mx-auto md:px-8 pt-8 pb-12 md:pb-24">
            {props.children}
          </main>
        </div>
      </div>
      <Modal
        title="Search Docs"
        isOpen={isSearchOpen}
        onClose={() => searchStore.set(false)}
      >
        <SearchModal closeModal={() => searchStore.set(false)} />
      </Modal>
    </>
  );
};



================================================
FILE: src/mdxLayouts/index.tsx
================================================
import React, { PropsWithChildren } from "react";
import "twin.macro";
import { DocsLayout } from "../layouts/DocsLayout";
import { FrontMatter } from "../types";

const Layout: React.FC<
  PropsWithChildren<{ frontMatter: FrontMatter }>
> = props => <DocsLayout {...props}>{props.children}</DocsLayout>;

export default Layout;



================================================
FILE: src/pages/404.tsx
================================================
import React from "react";
import "twin.macro";
import { Link } from "../components/Link";
import { SEO } from "../components/SEO";

const NotFoundPage: React.FC = () => (
  <>
    <SEO title="Not Found" />
    <div tw="prose dark:prose-invert">
      <h1>Page not found</h1>

      <p>Maybe you were looking for one of the following</p>

      <ul>
        <li>
          <Link href="/">Home</Link>
        </li>
        <li>
          <Link href="/getting-started">Getting Started</Link>
        </li>
        <li>
          <Link href="/develop/cli">CLI Quick Start</Link>
        </li>
        <li>
          <Link href="/deploy/railway-up">Railway Up</Link>
        </li>
      </ul>
    </div>
  </>
);

export default NotFoundPage;



================================================
FILE: src/pages/[...slug].tsx
================================================
import { Banner, PriorityBoardingBanner } from "@/components/Banner";
import { Collapse } from "@/components/Collapse";
import { CodeBlock } from "@/components/CodeBlock";
import Layout from "@/mdxLayouts/index";
import { allPages, Page } from "contentlayer/generated";
import { useMDXComponent } from "next-contentlayer/hooks";
import Link from "next/link";
import { Image } from "@/components/Image";
import { InlineCode } from "@/components/InlineCode";
import { H2, H3, H4 } from "@/components/Header";
import { Anchor } from "@/components/Anchor";
import { GetStaticPaths, GetStaticProps } from "next";
import { Props as CodeBlockProps } from "@/components/CodeBlock";
import { Props as InlineCodeProps } from "@/components/InlineCode";
import { TallyButton } from "@/components/TallyButton";

const components: Record<string, React.ElementType> = {
  Collapse,
  Image,
  Banner,
  Link,
  PriorityBoardingBanner,
  a: Anchor,
  h2: H2,
  h3: H3,
  h4: H4,
  TallyButton,
};

export default function PostPage({
  page,
  colorModeSSR,
}: {
  page: Page;
  colorModeSSR: string | null;
}) {
  const MDXContent = useMDXComponent(page.body.code);

  // Create a new components object with the extra props
  const componentsWithProps = {
    ...components,
    pre: (props: CodeBlockProps) => (
      <CodeBlock {...props} colorModeSSR={colorModeSSR} />
    ),
    code: (props: InlineCodeProps) => (
      <InlineCode {...props} colorModeSSR={colorModeSSR} />
    ),
  };

  return (
    <Layout
      frontMatter={{
        title: page.title,
        description: page.description,
        url: page.url,
      }}
    >
      <MDXContent components={componentsWithProps} />
    </Layout>
  );
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const page = allPages.find(
    page =>
      page._raw.flattenedPath ===
      (params?.slug as string[] | undefined)?.join("/"),
  );

  return {
    props: {
      page,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = allPages.map(page => page.url);
  return {
    paths,
    fallback: false,
  };
};



================================================
FILE: src/pages/_app.tsx
================================================
import { AppProps } from "next/app";
import { OverlayProvider } from "react-aria";
import { useFathom } from "../hooks/useFathom";
import { usePostHog } from "../hooks/usePostHog";
import { Page } from "../layouts/Page";
import "../styles/fonts.css";
import { ThemeProvider } from "../styles/theme";
import { useScrollToOpenCollapse } from "../hooks/useScrollToOpenCollapse";
import { useHashRedirect } from "@/hooks/useHashRedirect";

const MyApp = ({ Component, pageProps }: AppProps) => {
  useFathom(process.env.NEXT_PUBLIC_FATHOM_CODE ?? "", "docs.railway.com");
  
  // Initialize PostHog analytics
  usePostHog(
    process.env.NEXT_PUBLIC_POSTHOG_API_KEY ?? "",
    process.env.NEXT_PUBLIC_POSTHOG_HOST ?? "https://app.posthog.com"
  );

  useScrollToOpenCollapse();
  
  useHashRedirect();

  return (
    <ThemeProvider>
      <OverlayProvider>
        <Page>
          <Component {...pageProps} />
        </Page>
      </OverlayProvider>
    </ThemeProvider>
  );
};

export default MyApp;



================================================
FILE: src/pages/_document.tsx
================================================
import Document, {
  DocumentContext,
  Head,
  Html,
  Main,
  NextScript,
} from "next/document";
import { ServerStyleSheet } from "styled-components";

class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;

    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: App => props => sheet.collectStyles(<App {...props} />),
        });

      const initialProps = await Document.getInitialProps(ctx);
      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }

  render() {
    return (
      <Html lang="en">
        <Head>
          <script async src="https://tally.so/widgets/embed.js"></script>
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;



================================================
FILE: src/pages/index.tsx
================================================
import { NextPage } from "next";
import NextImage from "next/legacy/image";
import {
  ArrowRight,
  Book,
  Code,
  Edit3,
  GitPullRequest,
  Layers,
  Youtube,
  GitHub,
} from "react-feather";
import tw, { styled } from "twin.macro";
import { DiscordIcon, RssIcon, XIcon } from "../components/Icons";
import { Link } from "../components/Link";

const Home: NextPage = () => {
  return (
    <>
      <div tw="max-w-5xl mx-auto z-10">
        <div tw="mb-12">
            <h1 tw="text-4xl font-semibold mb-4 text-gray-900" style={{ letterSpacing: "-1px", fontSize: "2.5rem" }}>
                Railway Documentation
            </h1>
            <p tw="text-xl text-gray-600" style={{ fontSize: '1.125rem', color: 'var(--colors-gray-700)' }} className="dark:!text-[var(--colors-gray-700)]">
                Find user guides, quickstarts, tutorials, use cases, deploy templates, functions and more.
            </p>
        </div>

        <div tw="grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-4">
          <Link href="overview/about-railway">
            <div className="group" tw="relative bg-gradient-to-br from-[#8CAEF2]/25 to-white hover:from-[#8CAEF2]/40 hover:to-white dark:from-[#1D4596]/25 dark:to-[#131415] dark:hover:from-[#1D4596]/40 dark:hover:to-[#131415] border border-gray-100 dark:border-gray-200 rounded-lg transition-all duration-200 cursor-pointer overflow-hidden h-40 md:h-56">
              <img src="/images/card-light-how-railway-works.svg" alt="How Railway Works" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none dark:hidden" />
              <img src="/images/card-dark-how-railway-works.svg" alt="How Railway Works" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none hidden dark:block" />
              <div tw="relative z-10 p-6">
                <div tw="font-medium mb-1 text-gray-900" style={{ letterSpacing: '-0.25px', fontSize: '1.125rem' }}>How Railway Works</div>
                <div tw="text-gray-600 text-base font-normal max-w-[20rem] md:max-w-[16rem]" className="dark:!text-[var(--colors-gray-700)]">Understand what Railway offers, including the main components of the platform.</div>
              </div>
            </div>
          </Link>
          <Link href="/guides/foundations">
            <div className="group" tw="relative bg-gradient-to-br from-[#F1C1C0]/25 to-white hover:from-[#F1C1C0]/40 hover:to-white dark:from-[#741D1B]/25 dark:to-[#131415] dark:hover:from-[#741D1B]/40 dark:hover:to-[#131415] border border-gray-100 dark:border-gray-200 rounded-lg transition-all duration-200 cursor-pointer overflow-hidden h-40 md:h-56">
              <img src="/images/card-light-guides.svg" alt="Guides" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none dark:hidden" />
              <img src="/images/card-dark-guides.svg" alt="Guides" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none hidden dark:block" />
              <div tw="relative z-10 p-6">
                <div tw="font-medium mb-1 text-gray-900" style={{ letterSpacing: '-0.25px', fontSize: '1.125rem' }}>Guides</div>
                <div tw="text-gray-600 text-base font-normal max-w-[20rem] md:max-w-[16rem]" className="dark:!text-[var(--colors-gray-700)]">Explore our guides to learn how to configure or enable a specific feature on the platform.</div>
              </div>
            </div>
          </Link>
          <Link href="/quick-start">
            <div className="group" tw="relative bg-gradient-to-br from-[#EFD580]/25 to-white hover:from-[#EFD580]/40 hover:to-white dark:from-[#675518]/25 dark:to-[#131415] dark:hover:from-[#675518]/40 dark:hover:to-[#131415] border border-gray-100 dark:border-gray-200 rounded-lg transition-all duration-200 cursor-pointer overflow-hidden h-40 md:h-56">
              <img src="/images/card-light-quickstart.svg" alt="Quickstart" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none dark:hidden" />
              <img src="/images/card-dark-quickstart.svg" alt="Quickstart" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none hidden dark:block" />
              <div tw="relative z-10 p-6">
                <div tw="font-medium mb-1 text-gray-900" style={{ letterSpacing: '-0.25px', fontSize: '1.125rem' }}>Quickstart</div>
                <div tw="text-gray-600 text-base font-normal max-w-[20rem] md:max-w-[16rem]" className="dark:!text-[var(--colors-gray-700)]">Deploy in minutes. Jump into our quickstart guide or deploy with your favorite stack below.</div>
              </div>
            </div>
          </Link>
          <Link href="/tutorials/getting-started">
            <div className="group" tw="relative bg-gradient-to-br from-[#95D0B4]/25 to-white hover:from-[#95D0B4]/40 hover:to-white dark:from-[#26543F]/25 dark:to-[#131415] dark:hover:from-[#26543F]/40 dark:hover:to-[#131415] border border-gray-100 dark:border-gray-200 rounded-lg transition-all duration-200 cursor-pointer overflow-hidden h-40 md:h-56">
              <img src="/images/card-light-tutorials.svg" alt="Tutorials" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none dark:hidden" />
              <img src="/images/card-dark-tutorials.svg" alt="Tutorials" tw="absolute bottom-0 right-0 w-auto h-auto max-h-full pointer-events-none hidden dark:block" />
              <div tw="relative z-10 p-6">
                <div tw="font-medium mb-1 text-gray-900" style={{ letterSpacing: '-0.25px', fontSize: '1.125rem' }}>Tutorials</div>
                <div tw="text-gray-600 text-base font-normal max-w-[20rem] md:max-w-[16rem]" className="dark:!text-[var(--colors-gray-700)]">Step-by-step guides on common developer scenarios.</div>
              </div>
            </div>
          </Link>
        </div>

        <div tw="mt-24">
          <h3 tw="text-3xl md:text-4xl font-semibold mb-2 leading-10 text-left" style={{ fontSize: '2rem', letterSpacing: '-0.5px' }}>Your stack, your way</h3>
          <p tw="text-[#6c6a7b] text-lg font-normal leading-relaxed text-left" style={{ color: 'var(--colors-gray-700)' }}>Use your favorite language and framework</p>
        </div>
        <div tw="mt-8 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          <FrameworkLink href="/quick-start">
            <svg width="28" height="28" viewBox="0 0 1000 1000" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto" className="text-black dark:text-white">
              <path d="M467.253 0.269139C465.103 0.464613 458.26 1.14878 452.102 1.63747C310.068 14.4411 177.028 91.0671 92.7664 208.841C45.8456 274.325 15.8358 348.605 4.49658 427.284C0.488759 454.748 0 462.86 0 500.098C0 537.336 0.488759 545.448 4.49658 572.912C31.6716 760.666 165.298 918.414 346.53 976.861C378.983 987.319 413.196 994.453 452.102 998.754C467.253 1000.42 532.747 1000.42 547.898 998.754C615.054 991.326 671.945 974.71 728.055 946.073C736.657 941.675 738.319 940.502 737.146 939.525C736.364 938.939 699.707 889.777 655.718 830.352L575.758 722.353L475.562 574.085C420.43 492.572 375.073 425.915 374.682 425.915C374.291 425.818 373.9 491.693 373.705 572.13C373.412 712.97 373.314 718.639 371.554 721.962C369.013 726.751 367.058 728.706 362.952 730.856C359.824 732.42 357.087 732.713 342.327 732.713H325.415L320.919 729.878C317.986 728.021 315.836 725.578 314.37 722.744L312.317 718.345L312.512 522.382L312.805 326.321L315.836 322.509C317.4 320.457 320.723 317.818 323.069 316.547C327.077 314.592 328.641 314.397 345.552 314.397C365.494 314.397 368.817 315.179 373.998 320.848C375.464 322.411 429.717 404.12 494.624 502.541C559.531 600.963 648.289 735.352 691.887 801.324L771.065 921.248L775.073 918.609C810.557 895.543 848.094 862.703 877.81 828.495C941.056 755.877 981.818 667.326 995.503 572.912C999.511 545.448 1000 537.336 1000 500.098C1000 462.86 999.511 454.748 995.503 427.284C968.328 239.53 834.702 81.7821 653.47 23.3352C621.505 12.975 587.488 5.84016 549.365 1.53972C539.98 0.562345 475.367 -0.51276 467.253 0.269139ZM671.945 302.668C676.637 305.014 680.45 309.51 681.818 314.201C682.6 316.743 682.796 371.085 682.6 493.549L682.307 669.281L651.32 621.781L620.235 574.281V446.538C620.235 363.95 620.626 317.525 621.212 315.277C622.776 309.803 626.197 305.503 630.89 302.962C634.897 300.909 636.364 300.714 651.711 300.714C666.178 300.714 668.719 300.909 671.945 302.668Z" fill="currentColor"/>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Next.js</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="/guides/nuxt">
            <svg width="28" height="28" viewBox="0 0 32 22" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto">
              <path d="M17.92 21.3333H29.76C30.1379 21.3334 30.4995 21.2006 30.8267 21.0133C31.1539 20.8261 31.4911 20.591 31.68 20.2667C31.8689 19.9423 32.0001 19.5743 32 19.1999C31.9999 18.8254 31.8691 18.4576 31.68 18.1334L23.68 4.37333C23.4912 4.04907 23.2605 3.81389 22.9333 3.62667C22.6062 3.43944 22.1377 3.30667 21.76 3.30667C21.3823 3.30667 21.0205 3.43944 20.6933 3.62667C20.3662 3.81389 20.1355 4.04907 19.9467 4.37333L17.92 7.89333L13.8667 1.06641C13.6777 0.742173 13.4472 0.400524 13.12 0.213333C12.7928 0.0261426 12.4311 0 12.0533 0C11.6755 0 11.3139 0.0261426 10.9867 0.213333C10.6595 0.400524 10.3223 0.742173 10.1333 1.06641L0.213334 18.1334C0.0242117 18.4576 0.000165207 18.8254 8.11525e-07 19.1999C-0.000163584 19.5743 0.0244964 19.9423 0.213334 20.2666C0.402171 20.5909 0.739461 20.8261 1.06667 21.0133C1.39387 21.2006 1.75549 21.3334 2.13333 21.3333H9.6C12.5586 21.3333 14.712 20.0061 16.2133 17.4933L19.84 11.2L21.76 7.89333L27.6267 17.92H19.84L17.92 21.3333ZM9.49333 17.92H4.26667L12.0533 4.48L16 11.2L13.3857 15.7573C12.3887 17.3877 11.252 17.92 9.49333 17.92Z" fill="#00DC82"/>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Nuxt</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="/guides/laravel">
            <svg width="28" height="28" viewBox="0 0 31 32" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto">
              <g clip-path="url(#clip0_12_438)">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M30.5391 7.11623C30.5504 7.15817 30.5562 7.2014 30.5563 7.24484V13.9968C30.5563 14.0835 30.5334 14.1686 30.49 14.2436C30.4466 14.3186 30.3841 14.3808 30.3089 14.4239L24.6418 17.6867V24.1538C24.6418 24.3298 24.5483 24.4922 24.3957 24.5808L12.5662 31.3907C12.5391 31.4061 12.5095 31.4159 12.48 31.4264C12.4689 31.4301 12.4585 31.4368 12.4468 31.4399C12.3641 31.4617 12.2772 31.4617 12.1945 31.4399C12.1809 31.4362 12.1686 31.4288 12.1557 31.4239C12.1286 31.4141 12.1003 31.4055 12.0745 31.3907L0.247385 24.5808C0.172251 24.5377 0.109822 24.4755 0.0663905 24.4005C0.022959 24.3255 5.95319e-05 24.2404 0 24.1538L0 3.89777C0 3.85346 0.00615385 3.81038 0.0172308 3.76854C0.0209231 3.75438 0.0295385 3.74146 0.0344615 3.72731C0.0436923 3.70146 0.0523077 3.675 0.0658462 3.651C0.0750769 3.635 0.0886154 3.62207 0.0996923 3.60731C0.113846 3.58761 0.126769 3.56731 0.143385 3.55007C0.157538 3.53592 0.176 3.52546 0.192 3.51315C0.209846 3.49838 0.225846 3.48238 0.246154 3.47069L6.16061 0.0657669C6.2355 0.022678 6.32038 0 6.40677 0C6.49316 0 6.57804 0.022678 6.65292 0.0657669L12.5668 3.47069H12.568C12.5877 3.483 12.6043 3.49838 12.6222 3.51254C12.6382 3.52484 12.656 3.53592 12.6702 3.54946C12.6874 3.56731 12.6997 3.58761 12.7145 3.60731C12.7249 3.62207 12.7391 3.635 12.7477 3.651C12.7618 3.67561 12.7698 3.70146 12.7797 3.72731C12.7846 3.74146 12.7932 3.75438 12.7969 3.76915C12.8083 3.81109 12.814 3.85433 12.8142 3.89777V16.5495L17.7422 13.7119V7.24423C17.7422 7.20115 17.7483 7.15746 17.7594 7.11623C17.7637 7.10146 17.7717 7.08854 17.7766 7.07438C17.7865 7.04854 17.7951 7.02207 17.8086 6.99807C17.8178 6.98207 17.8314 6.96915 17.8418 6.95438C17.8566 6.93469 17.8689 6.91438 17.8862 6.89715C17.9003 6.883 17.9182 6.87254 17.9342 6.86023C17.9526 6.84546 17.9686 6.82946 17.9883 6.81777L23.9034 3.41284C23.9782 3.3697 24.0631 3.34698 24.1495 3.34698C24.2359 3.34698 24.3208 3.3697 24.3957 3.41284L30.3095 6.81777C30.3305 6.83008 30.3465 6.84546 30.3649 6.85961C30.3803 6.87192 30.3982 6.883 30.4123 6.89654C30.4295 6.91438 30.4418 6.93469 30.4566 6.95438C30.4677 6.96915 30.4812 6.98207 30.4898 6.99807C30.504 7.02207 30.512 7.04854 30.5218 7.07438C30.5274 7.08854 30.5354 7.10146 30.5391 7.11623ZM29.5705 13.7119V8.09715L27.5009 9.28854L24.6418 10.9347V16.5495L29.5711 13.7119H29.5705ZM23.6566 23.8688V18.2504L20.8443 19.8565L12.8135 24.4399V30.1113L23.6566 23.8688ZM0.985846 4.75007V23.8688L11.8277 30.1107V24.4405L6.16369 21.235L6.16185 21.2338L6.15938 21.2325C6.14031 21.2215 6.12431 21.2055 6.10646 21.1919C6.09108 21.1796 6.07323 21.1698 6.05969 21.1562L6.05846 21.1544C6.04246 21.139 6.03138 21.1199 6.01785 21.1027C6.00554 21.0861 5.99077 21.0719 5.98092 21.0547L5.98031 21.0528C5.96923 21.0344 5.96246 21.0122 5.95446 20.9913C5.94646 20.9728 5.936 20.9556 5.93108 20.9359C5.92492 20.9125 5.92369 20.8873 5.92123 20.8633C5.91877 20.8448 5.91385 20.8264 5.91385 20.8079V20.8067V7.58761L3.05538 5.94084L0.985846 4.75007ZM6.40738 1.06146L1.48 3.89777L6.40615 6.73407L11.3329 3.89715L6.40615 1.06146H6.40738ZM8.96985 18.7624L11.8283 17.1168V4.75007L9.75877 5.94146L6.89969 7.58761V19.9544L8.96985 18.7624ZM24.1495 4.40854L19.2228 7.24484L24.1495 10.0812L29.0757 7.24423L24.1495 4.40854ZM23.6566 10.9347L20.7975 9.28854L18.728 8.09715V13.7119L21.5865 15.3575L23.6566 16.5495V10.9347ZM12.32 23.5876L19.5465 19.4621L23.1588 17.4005L18.2357 14.5661L12.5674 17.8295L7.40123 20.8036L12.32 23.5876Z" fill="#FF2D20"/>
              </g>
              <defs>
                <clipPath id="clip0_12_438">
                  <rect width="30.7692" height="32" fill="white"/>
                </clipPath>
              </defs>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Laravel</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="/guides/django">
            <svg width="28" height="28" viewBox="0 0 25 32" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto" className="text-[#092E20] dark:text-white">
              <path d="M11.2803 0H16.5128V24.2194C13.8286 24.729 11.8579 24.9329 9.71749 24.9329C3.32969 24.9327 0 22.0451 0 16.5066C0 11.1722 3.53375 7.70688 9.00382 7.70688C9.85317 7.70688 10.4987 7.77461 11.2803 7.97845V0ZM11.2803 12.1913C10.6688 11.9876 10.1592 11.9197 9.51365 11.9197C6.86344 11.9197 5.33438 13.5507 5.33438 16.4045C5.33438 19.1908 6.79549 20.7197 9.47967 20.7197C10.057 20.7197 10.5329 20.6857 11.2803 20.584V12.1913Z" fill="currentColor"/>
              <path d="M24.8366 8.08037V20.2098C24.8366 24.3891 24.5309 26.3936 23.6136 28.1265C22.764 29.7916 21.6426 30.8446 19.3324 31.9999L14.4736 29.6895C16.7841 28.6023 17.9052 27.6513 18.6187 26.1897C19.3664 24.6948 19.6044 22.9619 19.6044 18.4092V8.08037H24.8366ZM19.6044 0.027832H24.8366V5.39619H19.6044V0.027832Z" fill="currentColor"/>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Django</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="/guides/rails">
            <svg width="28" height="28" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto">
              <g clip-path="url(#clip0_12_561)">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M27.4205 3.68421C24.369 2.17846 21.2435 2.02521 18.0435 3.15646C15.0988 4.19746 12.7498 6.06021 11.0035 8.59721C8.04877 12.8902 5.90252 17.5745 4.69977 22.663C4.08377 25.2672 3.68477 28.0295 3.79202 30.719C3.80077 30.9372 3.83327 31 3.85477 31.5H18.9463C18.903 31 18.8745 31.146 18.837 31.0507C18.0433 29.0242 17.4148 26.8842 16.98 24.7512C16.3555 21.6885 16.0285 18.569 16.6735 15.478C17.5763 11.1497 20.0435 8.02671 24.2028 6.40721C26.5588 5.49046 28.795 5.75121 30.7563 7.47271C30.7743 7.48846 30.8113 7.47896 30.8593 7.48671L31.5005 6.51596C30.2655 5.34021 28.9085 4.41871 27.4205 3.68421ZM0.834023 23.5985C0.719023 24.5792 0.611523 25.4975 0.499023 26.4612L3.28202 26.7952L3.79177 23.822C2.77802 23.7452 1.81527 23.6725 0.834023 23.5985ZM6.29652 15.052L3.67877 14.0277L2.83277 16.4295L5.50052 17.2845C5.77052 16.5267 6.02452 15.814 6.29652 15.052ZM18.6513 28.4667C19.545 28.5332 20.4405 28.579 21.427 28.6365C21.0688 27.8917 20.7505 27.2182 20.4173 26.5527C20.3808 26.4805 20.2575 26.4107 20.1738 26.4095C19.4155 26.3985 18.6568 26.4032 17.851 26.4032C18.0325 27.0602 18.1903 27.6665 18.375 28.264C18.4028 28.3542 18.5518 28.4595 18.6513 28.4667ZM10.7333 7.77571L8.74452 6.45871C8.21152 7.05446 7.69752 7.62871 7.15477 8.23496L9.19927 9.60896L10.7333 7.77571ZM17.0668 21.118C17.0635 21.1982 17.1358 21.326 17.2063 21.3577C17.9225 21.6797 18.6463 21.9865 19.4343 22.326C19.4015 21.703 19.3795 21.1822 19.3423 20.6625C19.3355 20.569 19.2915 20.4345 19.2223 20.396C18.5645 20.032 17.8975 19.6842 17.1683 19.2972C17.1285 19.9635 17.088 20.5402 17.0668 21.118ZM16.4775 3.07496L15.116 1.52971L13.2413 2.50421C13.7103 3.07571 14.153 3.61496 14.605 4.16521L16.4775 3.07496ZM17.3313 15.369C17.2905 15.4625 17.3443 15.6607 17.4245 15.733C17.9683 16.2235 18.5305 16.693 19.156 17.2282C19.2993 16.6282 19.4343 16.0935 19.5488 15.555C19.569 15.4592 19.5408 15.301 19.4743 15.2475C18.9878 14.8552 18.4855 14.4817 17.965 14.0847C17.7363 14.5385 17.5145 14.9455 17.3313 15.369ZM20.4438 2.26296C21.1388 2.28171 21.8345 2.27346 22.5685 2.27346C22.4953 1.76246 22.4603 1.37521 22.373 1.00046C22.347 0.888961 22.1793 0.740461 22.066 0.730961C21.3693 0.674461 20.6698 0.652711 19.9033 0.616211C20.0055 1.13196 20.0835 1.58646 20.1938 2.03321C20.217 2.12796 20.3555 2.26046 20.4438 2.26296ZM21.29 11.1817C21.3255 11.1152 21.3345 10.9945 21.2973 10.9365C20.9558 10.4022 20.601 9.87621 20.2338 9.32271L19.0438 10.4157L20.6893 12.2392C20.9103 11.8545 21.108 11.5222 21.29 11.1817ZM22.5738 7.54996L23.2845 8.87021C24.3968 8.26071 24.5033 8.04021 24.1095 7.16171L22.5738 7.54996ZM27.8955 3.48171C28.3583 3.76721 28.847 4.01046 29.3435 4.27796L29.676 3.76046C29.0705 3.31771 28.486 2.88946 27.8228 2.40396C27.7968 2.67996 27.758 2.87271 27.768 3.06321C27.776 3.20846 27.8003 3.42321 27.8955 3.48171ZM27.25 7.66146C27.75 7.71571 28.5 7.76746 29 7.82221V7.14271C28.5 7.03321 27.75 6.92471 27.25 6.81196V7.66146Z" fill="#CC0000"/>
              </g>
              <defs>
                <clipPath id="clip0_12_561">
                  <rect width="32" height="32" fill="white"/>
                </clipPath>
              </defs>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Rails</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="/guides/remix">
            <svg width="28" height="28" viewBox="0 0 32 20" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto" className="text-black dark:text-white">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M16.2806 15.2294C16.4568 17.5112 16.4568 18.5807 16.4568 19.7483H11.218C11.218 19.4939 11.2225 19.2613 11.227 19.0253C11.2412 18.292 11.256 17.5274 11.1381 15.983C10.9823 13.7222 10.0161 13.2198 8.23961 13.2198H6.66571H0V9.10626H8.48894C10.7329 9.10626 11.8549 8.41838 11.8549 6.59713C11.8549 4.99568 10.7329 4.02521 8.48894 4.02521H0V0H9.42393C14.5041 0 17.0286 2.41787 17.0286 6.28018C17.0286 9.16906 15.2521 11.0531 12.8522 11.3671C14.8781 11.7754 16.0623 12.9372 16.2806 15.2294Z" fill="currentColor"/>
              <path d="M0 19.7482V16.6816H5.53933C6.46459 16.6816 6.66548 17.3732 6.66548 17.7855V19.7482H0Z" fill="currentColor"/>
              <path d="M27.8647 14.4411C27.3983 15.5375 26.5278 16.0074 25.1597 16.0074C23.6362 16.0074 22.3925 15.193 22.2682 13.47H31.9999V12.0603C31.9999 8.26994 29.5437 5.07471 24.9109 5.07471C20.5892 5.07471 17.3557 8.23861 17.3557 12.6556C17.3557 17.1038 20.5271 19.7978 24.9732 19.7978C28.642 19.7978 31.1916 18.0122 31.9067 14.817L27.8647 14.4411ZM22.3304 11.0266C22.5169 9.71093 23.2321 8.7085 24.8488 8.7085C26.3412 8.7085 27.1495 9.77357 27.2118 11.0266H22.3304Z" fill="currentColor"/>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Remix</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="/guides/rocket">
            <img src="https://res.cloudinary.com/railway/image/upload/v1739370994/rocket_o65iea.png" width="28" height="28" tw="mx-auto" />
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Rocket</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="/guides/phoenix">
            <svg width="28" height="28" viewBox="0 0 32 22" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto">
              <path d="M12.0168 15.2549L11.7653 15.2091C9.979 14.8769 8.85025 13.7966 8.316 12.0974C7.98175 11.0381 8.58775 10.2586 9.6985 10.2074C10.6077 10.1649 11.2308 10.6879 11.781 11.2961C12.4908 12.0799 13.141 12.9176 13.838 13.7136C14.8415 14.8594 16.024 15.5971 17.6418 15.3694C19.092 15.1654 20.3567 14.5834 21.4562 13.6251C21.6215 13.4811 21.803 13.3554 21.9775 13.2214L21.8675 13.0919C20.944 13.3794 20.0025 13.4751 19.04 13.4269C17.5843 13.3539 16.1968 13.0494 14.9555 12.2504C13.8228 11.5209 12.9873 10.5434 12.5905 9.23789C12.2697 8.18289 12.9255 7.44514 14.0192 7.59764C14.451 7.65814 14.8145 7.85264 15.1415 8.12814C15.407 8.35314 15.6623 8.59064 15.9333 8.80864C17.2093 9.83414 18.992 9.89114 20.6108 8.77764C17.9487 8.76564 16.1375 7.30089 14.5468 5.44514C13.9242 4.71889 13.3165 3.97989 12.6807 3.26464C11.451 1.88139 10.087 0.662889 8.21975 0.246639C5.83275 -0.283861 3.52925 0.0636389 1.31825 1.07564C0.8775 1.27739 0.45425 1.51264 0 1.89064C0.225 1.89064 0.3475 1.89314 0.47 1.89064C1.585 1.86139 2.4205 2.35664 3.023 3.26864C3.4615 3.93239 3.668 4.68289 3.8255 5.45489C4.05925 6.60089 3.938 7.76864 4.07325 8.92014C4.42 11.8794 5.9325 13.9444 8.7485 15.0019C9.7815 15.3899 10.8405 15.5189 12.0165 15.2544L12.0168 15.2549ZM4.899 1.75489C4.45425 1.86689 4.09875 1.68739 3.7325 1.31664C4.36 1.16039 4.9135 1.09964 5.50825 1.07589C5.4595 1.46239 5.2315 1.67089 4.8995 1.75489H4.899ZM19.482 19.0364C19.4433 18.7511 19.1995 18.6256 19.008 18.4769C18.162 17.8179 17.1717 17.5844 16.1222 17.5654C15.4957 17.5536 14.8757 17.5071 14.2855 17.2874C14.0145 17.1874 13.711 17.0574 13.7185 16.7079C13.7253 16.3524 14.0343 16.2521 14.3155 16.1681C14.5455 16.1001 14.783 16.0556 15.0448 15.9944C14.3795 15.5679 13.7295 15.5091 12.8632 15.8576C11.4992 16.4051 10.155 16.3406 8.79575 15.8501C8.02825 15.5726 7.347 15.1376 6.63825 14.7526L6.61875 14.7664C6.62479 14.7619 6.63079 14.7574 6.63675 14.7529C6.61925 14.6996 6.588 14.6981 6.547 14.7284L6.6025 14.7771C7.19025 15.7409 7.985 16.5164 8.88275 17.1791C10.6112 18.4549 12.499 19.2161 14.7083 18.8786C15.4224 18.7691 16.1402 18.685 16.8603 18.6266C17.7628 18.5536 18.622 18.8081 19.482 19.0364ZM15.317 5.20889C15.269 5.17439 15.223 5.08789 15.1252 5.17739C15.9205 6.25289 16.9412 7.04489 18.1707 7.54389C20.1547 8.34914 22.1685 8.48714 24.2283 7.77639C25.8275 7.22489 26.977 7.76364 27.5742 9.31639C27.6607 7.51414 26.6003 6.20089 24.9118 5.94389C23.9618 5.79889 23.0842 6.11389 22.195 6.37214C19.7188 7.09014 17.417 6.73589 15.3167 5.20889H15.317ZM27.6588 12.2379C27.9813 12.2646 28.3043 12.2939 28.6268 12.3221C27.8978 11.6821 27.0093 11.6309 26.11 11.6821C24.7418 11.7596 23.7558 12.5496 22.8565 13.4921C22.064 14.3236 21.348 15.2559 20.1665 15.5901C20.1865 15.6256 20.1915 15.6436 20.197 15.6436C20.356 15.6459 20.515 15.6531 20.6737 15.6459C22.3908 15.5684 24.0083 15.2061 25.2945 13.9599C25.7 13.5679 26.062 13.1321 26.4535 12.7249C26.78 12.3849 27.1753 12.1966 27.6588 12.2374V12.2379ZM23.6702 10.1099C22.389 10.2221 21.2763 10.7519 20.231 11.4509C19.426 11.9884 18.566 12.2429 17.5987 12.0751C17.4287 12.0451 17.2572 12.0231 17.0865 11.9976L17.0807 12.0686C17.1423 12.1006 17.2015 12.1374 17.2652 12.1631C17.4265 12.2269 17.5853 12.3036 17.7528 12.3431C19.6133 12.7856 21.3948 12.5591 23.0005 11.5216C24.0127 10.8676 25.0605 10.7436 26.1963 10.9126C26.3113 10.9301 26.4255 10.9504 26.5408 10.9616C26.6473 10.9716 26.7587 11.0774 26.903 10.9629C25.9102 10.2456 24.8405 10.0079 23.6702 10.1099ZM19.0915 5.76064C19.7635 5.78389 20.4325 5.69564 21.1357 5.27814C20.9295 5.29614 20.8428 5.29614 20.7588 5.31264C19.79 5.50564 18.921 5.29439 18.1462 4.68239C17.8625 4.45789 17.5737 4.23864 17.2857 4.01839C16.145 3.14639 14.8365 2.85439 13.4058 2.87939C13.4285 2.94939 13.4307 2.99789 13.4552 3.02289C15.0125 4.59714 16.814 5.68239 19.0915 5.76064ZM30.359 13.8404C29.3958 12.8846 28.1025 12.7619 26.906 13.5956C27.698 13.6309 28.2925 13.8836 28.7745 14.3831C28.9434 14.5621 29.1234 14.7303 29.3132 14.8869C30.0425 15.4749 31.2778 15.5031 32 14.9574C31.152 14.6266 31.1517 14.6266 30.359 13.8404ZM20.763 21.1584C19.9165 19.5819 18.4932 19.2264 16.8487 19.3321C17.3338 19.4644 17.7925 19.6786 18.2052 19.9656C18.5882 20.2326 18.9103 20.5626 19.2278 20.9019C19.8563 21.5731 20.8378 21.9844 21.4885 21.8454C21.1898 21.6576 20.9242 21.4586 20.763 21.1584ZM28.642 12.3546C28.642 12.3441 28.6423 12.3344 28.643 12.3236L28.6268 12.3221L28.6362 12.3299L28.6418 12.3541L28.642 12.3546ZM19.5285 19.0736C19.5175 19.0672 19.5065 19.0609 19.4955 19.0546C19.4965 19.0616 19.4988 19.0683 19.5023 19.0744C19.5048 19.0781 19.5195 19.0744 19.5285 19.0736ZM19.4955 19.0546L19.4918 19.0394L19.4818 19.0369L19.4842 19.0484L19.495 19.0546H19.4955Z" fill="#FD4F00"/>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Phoenix</FrameworkLinkHeading>
          </FrameworkLink>
        </div>
        <div tw="mt-8 text-left">
          <a href="/guides/languages-frameworks" className="group" tw="text-[var(--colors-pink-700)] text-sm font-medium leading-tight flex items-center gap-1 transition">View all Frameworks <span tw="text-base transition-transform duration-200 group-hover:translate-x-1">→</span></a>
        </div>

        <div tw="mt-24 text-center">
          <h3 tw="text-3xl md:text-4xl font-semibold mb-2 leading-10 text-left" style={{ fontSize: '2rem', letterSpacing: '-0.5px' }}>Deploy an app in minutes</h3>
          <p tw="text-[#6c6a7b] text-lg font-normal leading-relaxed text-left" style={{ color: 'var(--colors-gray-700)' }}>Quickly set up a project with popular templates</p>
        </div>

        <div tw="mt-8 grid grid-cols-1 gap-4 md:grid-cols-4 md:gap-4">
          <FrameworkLink href="https://railway.com/template/metabase">
            <svg width="28" height="28" viewBox="0 0 26 32" fill="none" xmlns="http://www.w3.org/2000/svg" tw="mx-auto">
              <path d="M1.91734 10.1294C2.97626 10.1294 3.83468 9.25723 3.83468 8.18139C3.83468 7.10554 2.97626 6.2334 1.91734 6.2334C0.858423 6.2334 0 7.10554 0 8.18139C0 9.25723 0.858423 10.1294 1.91734 10.1294Z" fill="#509EE3"/>
              <path d="M1.91734 15.584C2.97626 15.584 3.83468 14.7118 3.83468 13.636C3.83468 12.5601 2.97626 11.688 1.91734 11.688C0.858423 11.688 0 12.5601 0 13.636C0 14.7118 0.858423 15.584 1.91734 15.584Z" fill="#509EE3"/>
              <path opacity="0.2" d="M7.28575 10.1294C8.34467 10.1294 9.20309 9.25723 9.20309 8.18139C9.20309 7.10554 8.34467 6.2334 7.28575 6.2334C6.22683 6.2334 5.36841 7.10554 5.36841 8.18139C5.36841 9.25723 6.22683 10.1294 7.28575 10.1294Z" fill="#509EE3"/>
              <path d="M7.28575 15.6372C8.34467 15.6372 9.20309 14.765 9.20309 13.6892C9.20309 12.6134 8.34467 11.7412 7.28575 11.7412C6.22683 11.7412 5.36841 12.6134 5.36841 13.6892C5.36841 14.765 6.22683 15.6372 7.28575 15.6372Z" fill="#509EE3"/>
              <path opacity="0.2" d="M12.6544 10.1294C13.7133 10.1294 14.5717 9.25723 14.5717 8.18139C14.5717 7.10554 13.7133 6.2334 12.6544 6.2334C11.5955 6.2334 10.7371 7.10554 10.7371 8.18139C10.7371 9.25723 11.5955 10.1294 12.6544 10.1294Z" fill="#509EE3"/>
              <path opacity="0.2" d="M12.6544 3.89598C13.7133 3.89598 14.5717 3.02383 14.5717 1.94799C14.5717 0.872144 13.7133 0 12.6544 0C11.5955 0 10.7371 0.872144 10.7371 1.94799C10.7371 3.02383 11.5955 3.89598 12.6544 3.89598Z" fill="#509EE3"/>
              <path opacity="0.2" d="M12.6544 15.6372C13.7133 15.6372 14.5717 14.765 14.5717 13.6892C14.5717 12.6134 13.7133 11.7412 12.6544 11.7412C11.5955 11.7412 10.7371 12.6134 10.7371 13.6892C10.7371 14.765 11.5955 15.6372 12.6544 15.6372Z" fill="#509EE3"/>
              <path opacity="0.2" d="M18.0231 10.1294C19.082 10.1294 19.9404 9.25723 19.9404 8.18139C19.9404 7.10554 19.082 6.2334 18.0231 6.2334C16.9641 6.2334 16.1057 7.10554 16.1057 8.18139C16.1057 9.25723 16.9641 10.1294 18.0231 10.1294Z" fill="#509EE3"/>
              <path d="M23.3917 10.1294C24.4506 10.1294 25.309 9.25723 25.309 8.18139C25.309 7.10554 24.4506 6.2334 23.3917 6.2334C22.3328 6.2334 21.4744 7.10554 21.4744 8.18139C21.4744 9.25723 22.3328 10.1294 23.3917 10.1294Z" fill="#509EE3"/>
              <path d="M18.0231 15.6372C19.082 15.6372 19.9404 14.765 19.9404 13.6892C19.9404 12.6134 19.082 11.7412 18.0231 11.7412C16.9641 11.7412 16.1057 12.6134 16.1057 13.6892C16.1057 14.765 16.9641 15.6372 18.0231 15.6372Z" fill="#509EE3"/>
              <path d="M23.3917 15.6372C24.4506 15.6372 25.309 14.765 25.309 13.6892C25.309 12.6134 24.4506 11.7412 23.3917 11.7412C22.3328 11.7412 21.4744 12.6134 21.4744 13.6892C21.4744 14.765 22.3328 15.6372 23.3917 15.6372Z" fill="#509EE3"/>
              <path d="M1.91734 21.0381C2.97626 21.0381 3.83468 20.1659 3.83468 19.0901C3.83468 18.0142 2.97626 17.1421 1.91734 17.1421C0.858423 17.1421 0 18.0142 0 19.0901C0 20.1659 0.858423 21.0381 1.91734 21.0381Z" fill="#509EE3"/>
              <path opacity="0.2" d="M7.28575 21.0908C8.34467 21.0908 9.20309 20.2187 9.20309 19.1428C9.20309 18.067 8.34467 17.1948 7.28575 17.1948C6.22683 17.1948 5.36841 18.067 5.36841 19.1428C5.36841 20.2187 6.22683 21.0908 7.28575 21.0908Z" fill="#509EE3"/>
              <path d="M12.6544 21.0908C13.7133 21.0908 14.5717 20.2187 14.5717 19.1428C14.5717 18.067 13.7133 17.1948 12.6544 17.1948C11.5955 17.1948 10.7371 18.067 10.7371 19.1428C10.7371 20.2187 11.5955 21.0908 12.6544 21.0908Z" fill="#509EE3"/>
              <path opacity="0.2" d="M18.0231 21.0908C19.082 21.0908 19.9404 20.2187 19.9404 19.1428C19.9404 18.067 19.082 17.1948 18.0231 17.1948C16.9641 17.1948 16.1057 18.067 16.1057 19.1428C16.1057 20.2187 16.9641 21.0908 18.0231 21.0908Z" fill="#509EE3"/>
              <path d="M23.3917 21.0908C24.4506 21.0908 25.309 20.2187 25.309 19.1428C25.309 18.067 24.4506 17.1948 23.3917 17.1948C22.3328 17.1948 21.4744 18.067 21.4744 19.1428C21.4744 20.2187 22.3328 21.0908 23.3917 21.0908Z" fill="#509EE3"/>
              <path d="M1.91734 26.4927C2.97626 26.4927 3.83468 25.6205 3.83468 24.5447C3.83468 23.4688 2.97626 22.5967 1.91734 22.5967C0.858423 22.5967 0 23.4688 0 24.5447C0 25.6205 0.858423 26.4927 1.91734 26.4927Z" fill="#509EE3"/>
              <path opacity="0.2" d="M7.28575 26.5459C8.34467 26.5459 9.20309 25.6737 9.20309 24.5979C9.20309 23.522 8.34467 22.6499 7.28575 22.6499C6.22683 22.6499 5.36841 23.522 5.36841 24.5979C5.36841 25.6737 6.22683 26.5459 7.28575 26.5459Z" fill="#509EE3"/>
              <path opacity="0.2" d="M12.6544 26.5459C13.7133 26.5459 14.5717 25.6737 14.5717 24.5979C14.5717 23.522 13.7133 22.6499 12.6544 22.6499C11.5955 22.6499 10.7371 23.522 10.7371 24.5979C10.7371 25.6737 11.5955 26.5459 12.6544 26.5459Z" fill="#509EE3"/>
              <path opacity="0.2" d="M12.6544 32C13.7133 32 14.5717 31.1278 14.5717 30.052C14.5717 28.9761 13.7133 28.104 12.6544 28.104C11.5955 28.104 10.7371 28.9761 10.7371 30.052C10.7371 31.1278 11.5955 32 12.6544 32Z" fill="#509EE3"/>
              <path opacity="0.2" d="M18.0231 26.5459C19.082 26.5459 19.9404 25.6737 19.9404 24.5979C19.9404 23.522 19.082 22.6499 18.0231 22.6499C16.9641 22.6499 16.1057 23.522 16.1057 24.5979C16.1057 25.6737 16.9641 26.5459 18.0231 26.5459Z" fill="#509EE3"/>
              <path d="M23.3917 26.5459C24.4506 26.5459 25.309 25.6737 25.309 24.5979C25.309 23.522 24.4506 22.6499 23.3917 22.6499C22.3328 22.6499 21.4744 23.522 21.4744 24.5979C21.4744 25.6737 22.3328 26.5459 23.3917 26.5459Z" fill="#509EE3"/>
          </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Metabase</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="https://railway.com/template/EP4wIt">
            <svg width="28" height="28" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" className="text-black dark:text-white">
              <path d="M16.007 0C24.8269 0 32 7.14522 32 15.9372C32 20.1807 30.3143 24.2503 27.3137 27.2509C24.3131 30.2515 20.2435 31.9372 16 31.9372C11.7565 31.9372 7.68687 30.2515 4.68629 27.2509C1.68571 24.2503 0 20.1807 0 15.9372C0 7.14522 7.17314 0 16.007 0ZM16.2582 17.1932L11.932 29.6834C14.8323 30.5338 17.926 30.4557 20.7798 29.4601C20.7408 29.3935 20.7081 29.3234 20.6821 29.2508L16.2582 17.1932ZM2.86088 10.1038C1.34082 13.507 1.2077 17.3688 2.48982 20.8685C3.77195 24.3683 6.36824 27.2302 9.72699 28.8461L2.86088 10.1038ZM28.6228 9.05713C28.6925 9.51766 28.7205 10.0061 28.7205 10.5364C28.7205 11.9878 28.4413 13.6206 27.6319 15.672L23.2359 28.3157C26.469 26.4431 28.8421 23.3808 29.8485 19.7827C30.855 16.1845 30.4151 12.3354 28.6228 9.05713ZM16.007 1.6328C10.983 1.6328 6.55909 4.20061 3.97732 8.0942C5.5659 8.1471 7.15622 8.08647 8.73615 7.91278C9.51766 7.87091 9.6014 9.00131 8.83384 9.099C8.83384 9.099 8.05233 9.18273 7.18709 9.23855L12.4204 24.7431L15.5744 15.3371L13.3415 9.21064C12.56 9.16877 11.8203 9.07108 11.8203 9.07108C11.0528 9.02922 11.1365 7.85696 11.918 7.89882C11.918 7.89882 14.2904 8.08024 15.7 8.08024C17.2072 8.0942 19.5377 7.91278 19.5377 7.91278C20.3053 7.87091 20.403 9.00131 19.6354 9.099C19.6354 9.099 18.8539 9.18273 17.9887 9.23855L23.1801 24.6454L24.6175 19.8587C25.2617 18.3935 25.6352 16.8238 25.72 15.2255C25.6995 13.8243 25.2887 12.4566 24.5338 11.2761C23.7942 10.0898 23.1103 9.099 23.1103 7.92673C23.1103 6.60096 24.1151 5.37287 25.5386 5.37287H25.72C23.0668 2.94919 19.6006 1.60951 16.007 1.61884V1.6328Z" fill="currentColor"/>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Wordpress</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="https://railway.com/template/cal">
            <svg width="28" height="28" viewBox="0 0 30 32" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_14_733)">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M7.41591 0.140137H7.41651C8.24312 0.140137 8.91975 0.81678 8.91975 1.64369V4.14197C8.91975 4.96889 8.24312 5.64523 7.41651 5.64523H7.41591C6.5893 5.64523 5.91235 4.96889 5.91235 4.14197V1.64369C5.91235 0.81678 6.5893 0.140137 7.41591 0.140137Z" fill="#2492EB"/>
              <path fill-rule="evenodd" clip-rule="evenodd" d="M21.9841 0.140137H21.9845C22.8112 0.140137 23.4879 0.81678 23.4879 1.64369V4.14197C23.4879 4.96889 22.8112 5.64523 21.9845 5.64523H21.9841C21.1575 5.64523 20.4805 4.96889 20.4805 4.14197V1.64369C20.4805 0.81678 21.1575 0.140137 21.9841 0.140137Z" fill="#2492EB"/>
              <path fill-rule="evenodd" clip-rule="evenodd" d="M20.4546 10.1202H8.87793C8.0552 10.1202 7.38211 10.7933 7.38211 11.616V23.1927C7.38211 24.0154 8.0552 24.6886 8.87793 24.6886H18.3372L21.9505 28.3017V11.616C21.9505 10.7933 21.2775 10.1202 20.4546 10.1202ZM3.41777 2.81934H4.32681V4.11252C4.32681 5.81275 5.71728 7.20324 7.41781 7.20324H7.41842C9.11895 7.20324 10.5094 5.81275 10.5094 4.11252V2.81934H18.8946V4.11252C18.8946 5.81275 20.2851 7.20324 21.9856 7.20324H21.9861C23.6868 7.20324 25.0771 5.81275 25.0771 4.11252V2.81934H25.9854C27.7797 2.81934 29.2472 4.28688 29.2472 6.08114V28.6487C29.2472 30.442 27.7791 31.9105 25.9854 31.9105H14.5994L0.15625 17.4669V6.08114C0.15625 4.28688 1.6238 2.81934 3.41777 2.81934Z" fill="#2492EB"/>
              <path fill-rule="evenodd" clip-rule="evenodd" d="M14.5996 17.4712H0.15625L14.5996 31.9147V17.4712Z" fill="#114D86"/>
              </g>
              <defs>
              <clipPath id="clip0_14_733">
              <rect width="29.2849" height="32" fill="white"/>
              </clipPath>
              </defs>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Cal</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="https://railway.com/template/e10OW1">
            <svg width="28" height="28" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M31.3742 0.000125729H10.2756V10.6721H20.5796C20.9476 10.6721 21.3156 10.9174 21.3156 11.2854V21.5894H31.9876V0.736124C32.006 0.645979 32.0039 0.552845 31.9814 0.463621C31.959 0.374397 31.9167 0.291368 31.8578 0.220686C31.7989 0.150004 31.7249 0.0934798 31.6412 0.0552999C31.5575 0.01712 31.4662 -0.00173705 31.3742 0.000125729Z" fill="#8E75FF"/>
              <path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M10.276 0.000488281V10.6725H0.339999C0.27142 10.6672 0.20568 10.6429 0.150237 10.6022C0.0947928 10.5615 0.0518643 10.5061 0.0263206 10.4422C0.000777009 10.3783 -0.00635936 10.3086 0.00572105 10.2409C0.0178015 10.1732 0.0486151 10.1102 0.0946667 10.0591L10.276 0.000488281ZM21.8066 31.6484C21.7585 31.6675 21.7069 31.6762 21.6551 31.674C21.6034 31.6717 21.5527 31.6586 21.5064 31.6354C21.4601 31.6123 21.4192 31.5796 21.3864 31.5396C21.3536 31.4995 21.3295 31.453 21.3159 31.4031V21.5898H31.9879L21.8066 31.5257V31.6484Z" fill="#8E75FF"/>
              <path opacity="0.4" d="M10.2761 10.6724H20.9481C21.1934 10.6724 21.3161 10.6724 21.3161 10.9177V21.5897H10.8894C10.7974 21.5915 10.7062 21.5727 10.6225 21.5345C10.5388 21.4963 10.4647 21.4398 10.4058 21.3691C10.3469 21.2984 10.3047 21.2154 10.2822 21.1262C10.2598 21.0369 10.2577 20.9438 10.2761 20.8537V10.6724Z" fill="#8E75FF"/>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Strapi</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="https://railway.com/template/elasticsearch">
            <svg width="28" height="28" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_14_724)">
              <path d="M31.995 16.7994C31.995 14.1092 30.3234 11.7847 27.8421 10.8706C27.9472 10.302 27.9996 9.72496 27.9987 9.14674C27.9987 4.15811 23.9505 0.109863 18.9619 0.109863C16.0627 0.109863 13.3465 1.49411 11.6487 3.87086C10.813 3.21786 9.79437 2.87836 8.7235 2.87836C6.0855 2.87836 3.91775 5.01999 3.91775 7.68411C3.91775 8.25874 4.02225 8.83336 4.205 9.35574C1.69775 10.2176 0 12.6205 0 15.2845C0 17.9747 1.67162 20.3254 4.17887 21.2395C4.0745 21.788 4.02225 22.3626 4.02225 22.9632C4.02225 27.9257 8.0705 31.9741 13.033 31.9741C15.9582 31.9741 18.6485 30.5637 20.3461 28.2131C21.1819 28.866 22.2266 29.2317 23.2975 29.2317C25.9355 29.2317 28.1032 27.09 28.1032 24.426C28.1032 23.8514 27.9987 23.2767 27.816 22.7544C30.271 21.8664 31.9949 19.4635 31.9949 16.7994H31.995Z" fill="white"/>
              <path d="M12.5107 13.7954L19.6411 17.0603L26.8497 10.7397C26.9548 10.2151 27.0073 9.6814 27.0063 9.14643C27.0063 4.70643 23.4021 1.10205 18.962 1.10205C16.2978 1.10205 13.8167 2.40793 12.328 4.6018L11.1265 10.8181L12.5107 13.7954Z" fill="#F4BD19"/>
              <path d="M5.11903 21.3438C5.01465 21.8662 4.9624 22.4147 4.9624 22.9632C4.9624 27.4032 8.59278 31.0337 13.0329 31.0337C15.7232 31.0337 18.2044 29.7017 19.7192 27.5077L20.8945 21.2916L19.3013 18.2618L12.1449 14.9971L5.11903 21.3438Z" fill="#3CBEB1"/>
              <path d="M5.06691 8.98998L9.95104 10.1392L11.0479 4.57598C10.3689 4.05361 9.55916 3.79248 8.69729 3.79248C6.58166 3.79248 4.83179 5.51623 4.83179 7.65798C4.83179 8.10198 4.91029 8.57211 5.06691 8.98998Z" fill="#E9478C"/>
              <path d="M4.64894 10.165C2.45506 10.8703 0.940186 12.9859 0.940186 15.2843C0.940186 17.5305 2.32444 19.5417 4.41394 20.3252L11.2831 14.1089L10.0293 11.4189L4.64894 10.165Z" fill="#2C458F"/>
              <path d="M20.9729 27.4813C21.6519 28.0038 22.4617 28.2911 23.2974 28.2911C25.413 28.2911 27.1629 26.5673 27.1629 24.4256C27.1629 23.9555 27.0845 23.5113 26.9279 23.0935L22.0438 21.9443L20.9729 27.4813Z" fill="#95C63D"/>
              <path d="M21.9656 20.6646L27.3459 21.9183C29.5398 21.1871 31.0547 19.0976 31.0547 16.7991C31.0547 14.5528 29.6704 12.5679 27.5809 11.7583L20.5291 17.9222L21.9656 20.6646Z" fill="#176655"/>
              </g>
              <defs>
              <clipPath id="clip0_14_724">
              <rect width="32" height="32" fill="white"/>
              </clipPath>
              </defs>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Elasticsearch</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="https://railway.com/template/umami-analytics">
            <svg
              width="28"
              height="28"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              style={{ display: 'block' }}
            >
              <g clipPath="url(#clip0_14_785)">
                <circle
                  cx="16.0111"
                  cy="14.9867"
                  r="12.88505"
                  className="umami-bg"
                  fill="white"
                  stroke="black"
                  strokeWidth="1.1215"
                  style={{
                    fill: 'white',
                    stroke: 'black',
                  }}
                />
                <path
                  d="M30.8785 11.481H1.14318C0.845738 11.481 0.560482 11.5991 0.350161 11.8094C0.139839 12.0198 0.0216822 12.305 0.0216822 12.6025V13.7464C0.00897196 14.0148 0 14.278 0 14.5464C0 23.383 7.16336 30.5464 16 30.5464C24.7028 30.5464 31.7832 23.5976 31.9948 14.9449C31.9948 14.912 32 14.8791 32 14.8454V12.6025C32 12.305 31.8818 12.0198 31.6715 11.8094C31.4612 11.5991 31.1759 11.481 30.8785 11.481Z"
                  fill="black"
                  className="umami-inner"
                  style={{ fill: 'black' }}
                />
              </g>
              <defs>
                <clipPath id="clip0_14_785">
                  <rect width="32" height="32" fill="white" />
                </clipPath>
              </defs>
            </svg>
            <style jsx>{`
              :global(html.dark) .umami-bg {
                fill: black !important;
                stroke: white !important;
              }
              :global(html.dark) .umami-inner {
                fill: white !important;
              }
            `}</style>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Umami</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="https://railway.com/template/SMKOEA">
            <img src="https://devicons.railway.com/i/minio.svg" width="28" height="28" tw="mx-auto" />
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>MinIO</FrameworkLinkHeading>
          </FrameworkLink>
          <FrameworkLink href="https://railway.com/template/timescaledb-postgis">
            <svg width="28" height="28" viewBox="0 0 256 256" fill="none" xmlns="http://www.w3.org/2000/svg" className="text-[#FFB429] dark:text-white" tw="mx-auto">
              <g clip-path="url(#clip0_1_21)">
                <path d="M108.904 112.466L108.886 91.3715C108.886 90.1178 108.396 88.9187 107.505 88.0284L89.2457 69.7141L76.5093 83.7768L106.27 113.556C107.251 114.519 108.904 113.828 108.904 112.466Z" fill="currentColor"/>
                <path d="M71.1494 166.064L27.871 122.895L11.3555 133.251L69.8957 191.609C70.8587 192.572 72.5302 191.9 72.5302 190.519V169.425C72.5302 168.171 72.0396 166.954 71.1494 166.064Z" fill="currentColor"/>
                <path d="M118.952 0.781271C54.543 5.23265 3.07047 58.5402 0.635839 123.058C-1.72612 186.05 41.5886 239.357 100.074 252.421L22.1115 174.44C20.985 173.313 20.3673 171.805 20.3673 170.225L20.4218 145.024C20.4218 143.97 21.6936 143.444 22.4385 144.189L35.2658 130.253C34.4664 129.454 34.4664 128.145 35.2658 127.346L47.6025 115.046C48.4019 114.246 49.7101 114.246 50.5095 115.046L92.189 156.725C93.9695 158.506 94.9507 160.904 94.9507 163.411V206.889C94.9507 213.158 97.4398 219.172 101.873 223.587L133.65 255.364C141.717 255.019 149.585 253.911 157.197 252.13L116.935 211.85C114.936 209.851 113.828 207.162 113.828 204.346V162.339C113.828 155.453 111.085 148.84 106.215 143.97L63.9182 101.673C63.1187 100.874 63.1187 99.5657 63.9182 98.7662L76.164 86.5567C76.9634 85.7573 78.2716 85.7573 79.071 86.5567L91.8074 72.494C91.5713 72.2214 91.3532 71.9307 91.117 71.6219C87.4832 66.7163 85.2666 58.6129 87.8466 49.4921C89.391 43.6417 92.5887 39.2449 98.5118 33.885C99.0387 33.4126 99.8563 33.3945 100.383 33.8487L115.7 47.112L118.716 49.7283C119.878 50.7276 121.259 51.4544 122.749 51.7996L170.497 63.1552C171.06 63.2823 171.569 63.573 171.969 63.9728L221.007 112.902C221.861 113.719 222.351 114.864 222.351 116.045V126.437C222.351 128.036 221.951 129.617 221.17 131.016L196.896 175.239C195.843 177.183 193.481 177.983 191.446 177.111L180.254 172.241H139.374C136.739 172.241 134.613 174.367 134.613 177.002V195.225C134.613 197.732 135.613 200.149 137.375 201.929L179.727 244.59C224.313 224.731 255.419 180.018 255.419 128.018C255.455 54.5613 193.426 -4.3787 118.952 0.781271Z" fill="currentColor"/>
              </g>
              <defs>
              <linearGradient id="paint0_linear_1_21" x1="109.212" y1="92.0252" x2="88.5685" y2="91.7182" gradientUnits="userSpaceOnUse">
              <stop stop-opacity="0"/>
              <stop offset="1"/>
              </linearGradient>
              <linearGradient id="paint1_linear_1_21" x1="72.0041" y1="157.488" x2="40.5988" y2="157.488" gradientUnits="userSpaceOnUse">
              <stop stop-opacity="0"/>
              <stop offset="0.96"/>
              </linearGradient>
              <clipPath id="clip0_1_21">
              <rect width="256" height="255.836" fill="white"/>
              </clipPath>
              </defs>
            </svg>
            <FrameworkLinkHeading tw="text-center" style={{ fontSize: '1rem', color: 'var(--colors-gray-900)' }}>Timescale</FrameworkLinkHeading>
          </FrameworkLink>
        </div>

        <div tw="text-center mt-8">
          <a href="https://railway.com/templates" className="group" tw="text-[var(--colors-pink-700)] text-sm font-medium leading-tight flex items-center gap-1 transition">View all Templates <span tw="text-base transition-transform duration-200 group-hover:translate-x-1">→</span></a>
        </div>

        <div tw="mt-24 border-t border-gray-200 pt-12">
          <div tw="grid grid-cols-1 md:grid-cols-[1.5fr,1fr] gap-8 items-center">
            <FooterCard href="https://github.com/railwayapp/docs">
              <CardIcon>
                <GitHub size={20} />
              </CardIcon>
              <CardContent>
                <CardTitle>Contribute to the Docs <ArrowRight size={16} tw="transition-transform group-hover:translate-x-1 ml-1" /></CardTitle>
                <CardDesc>Each page footer contains an "Edit on GitHub" Link. Change the markdown, make a pull request, and we'll merge it!</CardDesc>
              </CardContent>
            </FooterCard>
            <FooterLinks>
              <FooterLink href="https://x.com/Railway">
                <XIcon tw="w-5 h-5" />
                <span tw="inline-flex items-center">Follow us on X <ArrowRight size={16} tw="transition-transform group-hover:translate-x-1 ml-1" /></span>
              </FooterLink>
              <FooterLink href="https://discord.gg/railway">
                <DiscordIcon tw="w-5 h-5" />
                <span tw="inline-flex items-center">Join our Discord server <ArrowRight size={16} tw="transition-transform group-hover:translate-x-1 ml-1" /></span>
              </FooterLink>
              <FooterLink href="https://youtube.com/@railwayapp">
                <Youtube tw="w-5 h-5 text-[#FF0000]" />
                <span tw="inline-flex items-center">Watch our YouTube videos <ArrowRight size={16} tw="transition-transform group-hover:translate-x-1 ml-1" /></span>
              </FooterLink>
            </FooterLinks>
          </div>
        </div>
      </div>
      <Background />
    </>
  );
};

export default Home;

const ButtonLink = styled(Link)`
  ${tw`block font-medium rounded shadow`}
  ${tw`px-3 py-2`}
  ${tw`focus:outline-none`}
`;

const OverviewLink = styled(Link)`
  ${tw`flex border border-gray-100 rounded-md dark:bg-[#181622] p-6 hover:bg-gray-100 hover:shadow-lg`}
`;

const FrameworkLink = styled(Link)`
  ${tw`flex flex-col items-center justify-center border transition`}
  border-radius: 0.5rem;
  border-color: var(--colors-gray-100);
  background: rgba(244, 244, 246, 0.5);
  padding: 1.5rem;
  @media (min-width: 768px) {
    padding: 2rem;
  }
  transition: background 0.2s, border-color 0.2s;
  &:hover {
    background: rgba(244, 244, 246, 1);
  }
  .dark & {
    background: rgba(32, 31, 45, 0.2);
    border-color: var(--colors-gray-200);
  }
  .dark &:hover {
    background: rgba(32, 31, 45, 0.6);
  }
`;

const OverviewLinkIcon = styled.div`  ${tw`flex border items-center p-4 h-16 w-16 rounded-md bg-background`}
`;

const FrameworkLinkIcon = styled.div`
  ${tw`mb-2 border-none flex items-center justify-center rounded-full`}
  width: 28px;
  height: 28px;
  background: rgba(244, 244, 246, 0.4);
  .dark & {
    background: rgba(32, 31, 45, 0.2);
  }
  & > svg, & > img {
    width: 28px !important;
    height: 28px !important;
    display: block;
    margin: 0 auto;
  }
`;

const OverviewLinkTextbox = styled.div`
  ${tw`ml-0 mt-2 flex flex-col items-center justify-center`}
  font-size: 1rem;
`;

const FrameworkLinkTextbox = styled.div`
  ${tw`ml-0 mt-2 flex flex-col items-center justify-center`}
  font-size: 1rem;
`;

const OverviewLinkHeading = styled.div`
  ${tw`font-semibold text-lg mb-1`}
`;

const FrameworkLinkHeading = styled.div`
  ${tw`font-normal text-lg mt-2 leading-7`}
  font-size: 1rem;
`;

const OverviewLinkText = styled.div`
  ${tw`font-normal text-base text-gray-600`}
`;

const OverviewSecondaryLink = styled(Link)`
  ${tw`flex items-center text-gray-600 gap-2 hover:text-pink-700`}
  ${tw`justify-center text-center`}
`;

const FooterCard = styled(Link).attrs({ className: 'group' })`
  ${tw`flex items-start border border-gray-200 rounded-lg p-6`}
`;

const CardIcon = styled.div`
  ${tw`mr-4 text-gray-900`}
`;

const CardContent = styled.div`
  ${tw`flex flex-col`}
`;

const CardTitle = styled.h3`
  ${tw`font-medium text-gray-900 text-sm leading-tight flex items-center`}
`;

const CardDesc = styled.p`
  ${tw`text-gray-600 text-sm mt-1`}
  ${tw`dark:!text-[var(--colors-gray-700)]`}
`;

const FooterLinks = styled.div`
  ${tw`flex flex-col gap-4 justify-center`}
`;

const FooterLink = styled(Link).attrs({ className: 'group' })`
  ${tw`flex items-center gap-3 text-sm font-medium text-gray-600`}
  ${tw`dark:!text-[var(--colors-gray-700)]`}
`;

export const Background = () => (
  <div tw="opacity-50 md:opacity-100 absolute inset-0 pointer-events-none">
  </div>
);

const FrameworkLinkText = styled.div`${tw`font-normal text-base text-gray-600`}`;

const DeployCard = styled.div`
  border-radius: 0.5rem;
  border: 1px solid var(--colors-gray-100);
  background: rgba(244, 244, 246, 0.4);
  transition: background 0.2s, border-color 0.2s;
  &:hover {
    background: rgba(244, 244, 246, 1);
  }
  .dark & {
    background: rgba(32, 31, 45, 0.2);
    border-color: var(--colors-gray-200);
  }
  .dark &:hover {
    background: rgba(32, 31, 45, 0.6);
  }
`;






================================================
FILE: src/pages/api/export.ts
================================================
import { allPages } from "contentlayer/generated";
import { NextApiRequest, NextApiResponse } from "next";
import { randomBytes } from "crypto";

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method == "GET") {
    const secret =
      process.env.EXPORT_ENDPOINT_PASSWORD ?? randomBytes(16).toString('hex');
    if (req.headers.authorization !== secret) {
      res.status(401).json({ error: "Unauthorized" });
      return;
    }
    res.status(200).json(
      allPages.map(page => ({
        ...page,
        body: page.body.raw,
      })),
    );
  }
};



================================================
FILE: src/pages/api/feedback.ts
================================================
import { Sentiment } from "@prisma/client";
import type { NextApiRequest, NextApiResponse } from "next";
import { prisma } from "../../clients/prisma";

export interface FeedbackBody {
  topic: string;
  helpful: boolean;
  feedback?: string;
}

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method == "POST") {
    const body: FeedbackBody = JSON.parse(req.body);
    const feedbackMessage =
      body.feedback?.trim() === "" ? null : body.feedback?.trim();

    // Save result in prisma
    await prisma.feedback.create({
      data: {
        sentiment: body.helpful ? Sentiment.POSITIVE : Sentiment.NEGATIVE,
        topic: body.topic,
        message: feedbackMessage,
      },
    });

    // Only send Discord message if negative
    if (!body.helpful) {
      const discordBody = {
        content: `:speaking_head:
      Topic: ${body.topic}
      Was it helpful?: ${body.helpful ? "Yes" : "No"}
      Feedback: ${
        feedbackMessage != null && feedbackMessage.length === 0
          ? "N/A"
          : feedbackMessage
      }`,
      };

      await fetch(`${process.env.DISCORD_WEBHOOK}`, {
        body: JSON.stringify(discordBody),
        method: "POST",
        headers: {
          "content-type": "application/json",
        },
      });
    }
  }

  res.status(200).json({ status: "Success" });
};



================================================
FILE: src/pages/api/llms-docs.md.ts
================================================
import { NextApiRequest, NextApiResponse } from 'next';
import { sidebarContent } from '@/data/sidebar';
import { flattenSidebarContent } from '@/layouts/DocsLayout';
import { IPage } from '@/types';
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  // Set the content type to text/plain
  res.setHeader('Content-Type', 'text/plain');
  
  // Get all pages from the sidebar content
  const allPages = flattenSidebarContent(sidebarContent);
  
  // Generate the llms.txt content
  let content = '# Railway Documentation\n\n';
  content += 'This file contains the complete Railway documentation structure and content for LLM consumption.\n\n';
  
  // Group pages by their top-level section
  const groupedPages = sidebarContent.reduce((acc, section) => {
    if (section.title) {
      acc[section.title] = [];
    }
    return acc;
  }, {} as Record<string, IPage[]>);

  // Populate the groups
  allPages.forEach((page: IPage) => {
    if ('url' in page || !page.slug) return;
    
    // Find which section this page belongs to
    for (const section of sidebarContent) {
      if (section.content.some(item => {
        if ('slug' in item && item.slug === page.slug) return true;
        if ('subTitle' in item && item.pages.some(p => 'slug' in p && p.slug === page.slug)) return true;
        return false;
      })) {
        if (section.title) {
          groupedPages[section.title].push(page);
        }
        break;
      }
    }
  });

  // Generate content for each section
  for (const [sectionTitle, pages] of Object.entries(groupedPages)) {
    if (pages.length === 0) continue;
    
    content += `# ${sectionTitle}\n`;
    content += `Source: https://docs.railway.com/${sectionTitle.toLowerCase()}\n\n`;
    
    pages.forEach((page: IPage) => {
      try {
        // Read the markdown file content
        const filePath = path.join(process.cwd(), 'src/docs', page.slug.replace(/^\//, '') + '.md');
        const fileContent = fs.readFileSync(filePath, 'utf8');
        const { data: frontMatter, content: markdownContent } = matter(fileContent);

        content += `# ${page.title}\n`;
        content += `Source: https://docs.railway.com${page.slug}\n\n`;
        
        if (frontMatter.description) {
          content += `${frontMatter.description}\n\n`;
        }

        // Extract main content sections
        const sections = markdownContent
          .split(/\n##\s+/)
          .filter(Boolean)
          .map(section => section.trim());

        if (sections.length > 0) {
          // Handle the first section (description/intro) without a heading
          const firstSection = sections[0];
          const firstContent = firstSection.split('\n').slice(1).join('\n').trim();
          
          // Process the first section content
          const cleanFirstContent = firstContent
            .replace(/```[\s\S]*?```/g, '') // Remove code blocks
            .replace(/`([^`]+)`/g, '$1') // Remove inline code
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1') // Remove markdown links
            .split('\n\n')
            .filter(para => para.trim().length > 0)
            .join('\n\n');
          
          content += `${cleanFirstContent}\n\n`;

          // Handle remaining sections with headings
          sections.slice(1).forEach(section => {
            const title = section.split('\n')[0].trim();
            const sectionContent = section.split('\n').slice(1).join('\n').trim();
            
            content += `## ${title}\n\n`;
            
            // Process the content, removing code blocks and keeping only the text
            const cleanContent = sectionContent
              .replace(/```[\s\S]*?```/g, '') // Remove code blocks
              .replace(/`([^`]+)`/g, '$1') // Remove inline code
              .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1') // Remove markdown links
              .split('\n\n')
              .filter(para => para.trim().length > 0)
              .join('\n\n');
            
            content += `${cleanContent}\n\n`;
          });
        }

        // Add code examples if they exist
        const codeBlocks = markdownContent.match(/```[\s\S]*?```/g);
        if (codeBlocks && codeBlocks.length > 0) {
          content += '## Code Examples\n\n';
          codeBlocks.forEach(block => {
            const cleanBlock = block
              .replace(/```\w*\n/, '') // Remove language identifier
              .replace(/```$/, '') // Remove closing backticks
              .trim();
            content += `${cleanBlock}\n\n`;
          });
        }

        content += '\n';
      } catch (error) {
        console.error(`Error processing ${page.slug}:`, error);
        // Still include basic information even if we can't read the file
        content += `# ${page.title}\n`;
        content += `Source: https://docs.railway.com${page.slug}\n\n`;
        content += '\n';
      }
    });
    
    content += '\n';
  }
  
  // Send the response
  res.status(200).send(content);
} 


================================================
FILE: src/pages/dynamic/[...slug].tsx
================================================
import { Banner, PriorityBoardingBanner } from "@/components/Banner";
import { Collapse } from "@/components/Collapse";
import { CodeBlock } from "@/components/CodeBlock";
import Layout from "@/mdxLayouts/index";
import { allPages, Page } from "contentlayer/generated";
import { useMDXComponent } from "next-contentlayer/hooks";
import Link from "next/link";
import { Image } from "@/components/Image";
import { InlineCode } from "@/components/InlineCode";
import { H2, H3, H4 } from "@/components/Header";
import { Anchor } from "@/components/Anchor";
import { GetServerSidePropsContext } from "next";
import { getCookie } from "cookies-next";
import { Props as CodeBlockProps } from "@/components/CodeBlock";
import { Props as InlineCodeProps } from "@/components/InlineCode";
import { TallyButton } from "@/components/TallyButton";

const components: Record<string, React.ElementType> = {
  Collapse,
  Image,
  Banner,
  Link,
  PriorityBoardingBanner,
  a: Anchor,
  h2: H2,
  h3: H3,
  h4: H4,
  TallyButton,
};

export default function PostPage({
  page,
  colorModeSSR,
}: {
  page: Page;
  colorModeSSR: string | null;
}) {
  const MDXContent = useMDXComponent(page.body.code);

  // Create a new components object with the extra props
  const componentsWithProps = {
    ...components,
    pre: (props: CodeBlockProps) => (
      <CodeBlock {...props} colorModeSSR={colorModeSSR} />
    ),
    code: (props: InlineCodeProps) => (
      <InlineCode {...props} colorModeSSR={colorModeSSR} />
    ),
  };

  return (
    <Layout
      frontMatter={{
        title: page.title,
        description: page.description,
        url: page.url
      }}
    >
      <MDXContent components={componentsWithProps} />
    </Layout>
  );
}

export const getServerSideProps = async (
  context: GetServerSidePropsContext,
) => {
  const { slug } = context.params as { slug: string[] };
  const page = allPages.find(p => p.url === `/${slug.join("/")}`);
  const themeCookie = getCookie("theme", { req: context.req }) as
    | string
    | undefined;

  if (!page) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      page,
      colorModeSSR: themeCookie ?? null,
    },
  };
};



================================================
FILE: src/scripts/toml-reference.mjs
================================================
import fs from "fs/promises";

const startComment = "{/* codegen:start do not edit this comment */}";
const endComment = "{/* codegen:end do not edit this comment */}";

async function main() {
  const path = "./src/docs/reference/config-as-code.md";
  let content = await fs.readFile(path, "utf-8");
  const startIndex = content.indexOf(startComment);
  const endIndex = content.indexOf(endComment);

  if (startIndex === -1 || endIndex === -1) {
    throw new Error("Could not find start or end comment");
  }

  const response = await fetch(
    "https://backboard.railway.com/railway.schema.json",
  );
  if (!response.ok) {
    throw new Error("Could not fetch JSON schema");
  }

  const jsonSchema = await response.json();
  let newContent = "";

  const { build, deploy } = jsonSchema.properties;

  newContent += generateDocsForProperties("build", build.properties);

  newContent += generateDocsForProperties("deploy", deploy.properties);

  content = [
    content.substring(0, startIndex + startComment.length),
    newContent,
    content.substring(endIndex),
  ].join("\n");

  await fs.writeFile(path, content);
}

function generateDocsForProperties(section, properties) {
  let content = "";

  for (const [key, value] of Object.entries(properties)) {
    const { nullable, value: unwrappedValue } = unwrap(value);
    const propertyPath = `${section}.${key}`;
    const title = titelize(key);
    const link = links[propertyPath];
    if (link) {
      content += `### [${title}](${link})\n\n`;
    } else {
      content += `### ${title}\n\n`;
    }

    const description =
      unwrappedValue.description ?? unwrappedValue.items?.description;
    if (description) {
      content += `${description}.\n\n`;
    }

    const example = examples[propertyPath] ?? value.enum?.[0];

    if (example) {
      content += `\`\`\`toml
[${section}]
${key} = ${
        typeof example === "string" ? `"${example}"` : JSON.stringify(example)
      }
\`\`\`

`;
    } else {
      console.warn(`No example for ${propertyPath}`);
    }

    if (unwrappedValue.enum) {
      content += `Possible values are:\n${unwrappedValue.enum
        .filter(v => !ignoredEnumValues.includes(v))
        .map(v => `- \`${v}\``)
        .join("\n")}\n\n`;
    }

    const note = notes[propertyPath];

    if (note) {
      content += `Note: ${note}.\n\n`;
    }

    if (nullable) {
      content += `This field can be set to \`null\`.\n\n`;
    }
  }

  return content;
}

function unwrap(value) {
  let nullable = false;
  if (!value.anyOf) return { value, nullable };
  if (value.anyOf.length === 2) {
    nullable = value.anyOf.find(v => v.type === "null");
    if (nullable) {
      value = value.anyOf.find(v => v.type !== "null");
    }
  }
  if (value.anyOf.length === 2) {
    const not = value.anyOf.find(v => v.not);
    if (not) {
      value = value.anyOf.find(v => !v.not);
    }
  }
  return { value, nullable };
}

function titelize(key) {
  const s = key.replace(/([A-Z])/g, " $1");
  return s.charAt(0).toUpperCase() + s.substring(1);
}

// Although json-schema supports examples, we build the schema from zod and it doesn't support examples.
// So a solution is to have them here.
const examples = {
  "build.watchPatterns": ["src/**"],
  "build.buildCommand": "yarn run build",
  "build.dockerfilePath": "Dockerfile.backend",
  "build.nixpacksConfigPath": "nixpacks.toml",
  "build.nixpacksPlan": "examples/node",
  "build.nixpacksVersion": "1.13.0",
  "deploy.startCommand": "echo starting",
  "deploy.numReplicas": 2,
  "deploy.healthcheckPath": "/health",
  "deploy.healthcheckTimeout": 300,
  "deploy.restartPolicyMaxRetries": 5,
  "deploy.restartPolicyType": "ON_FAILURE",
  "deploy.cronSchedule": "0 0 * * *",
};

const notes = {
  "build.builder":
    "Railway will always build with a Dockerfile if it finds one. To build with nixpacks, you can remove or rename the Dockerfile.",
};

const links = {
  "build.builder": "/deploy/builds",
  "build.buildCommand": "/deploy/builds#build-command",
  "build.watchPatterns": "/deploy/builds#watch-paths",
  "build.dockerfilePath": "/deploy/dockerfiles",
  "deploy.startCommand": "/deploy/deployments#start-command",
  "deploy.numReplicas": "/develop/services#horizontal-scaling-with-replicas",
  "deploy.healthcheckPath": "/deploy/healthchecks",
  "deploy.healthcheckTimeout": "/deploy/healthchecks#timeout",
  "deploy.restartPolicyType": "/deploy/deployments#configurable-restart-policy",
  "deploy.cronSchedule": "/reference/cron-jobs",
};

const ignoredEnumValues = ["HEROKU", "PAKETO"];

main().catch(console.error);



================================================
FILE: src/store/index.ts
================================================
import { atom } from "nanostores";

export const searchStore = atom<boolean>(false);



================================================
FILE: src/styles/codeThemes.ts
================================================
import oneLight from "react-syntax-highlighter/dist/cjs/styles/prism/one-light";
import oneDark from "react-syntax-highlighter/dist/cjs/styles/prism/one-dark";

export const lightCodeTheme = oneLight;
export const darkCodeTheme = oneDark;



================================================
FILE: src/styles/colors.ts
================================================
export type ColorMode = "light" | "dark";
export const defaultColorMode: ColorMode = "dark";

const lightColors: Record<string, Record<number, string>> = {
  foreground: "#181622",
  background: "#ffffff",
  gray: {
    100: "#f4f4f6",
    200: "#D6D8DC",
    300: "#B1B6BE",
    400: "#8D94A0",
    500: "#6B7280",
    600: "#565C67",
    700: "#41454E",
    800: "#2C2F35",
    900: "#1D1B22",
  },
  pink: {
    100: "#F8ECFF",
    200: "#EAC3FF",
    300: "#DC9BFF",
    400: "#CE72FF",
    500: "#C049FF",
    600: "#AE16FF",
    700: "#9400E2",
    800: "#7200AF",
    900: "#51007C",
  },
  yellow: {
    100: "#FFFCE5",
    200: "#FFF7B2",
    300: "#FFF27F",
    400: "#FFED4C",
    500: "#FFE819",
    600: "#DBC500",
    700: "#9E8E00",
    800: "#605700",
    900: "#232000",
  },
  red: {
    100: "#F2C5C8",
    200: "#E89CA1",
    300: "#DF7279",
    400: "#D54952",
    500: "#BF2C35",
    600: "#962229",
    700: "#6C191E",
    800: "#430F12",
    900: "#190607",
  },
  green: {
    100: "#DDF2E6",
    200: "#B8E4CA",
    300: "#92D7AF",
    400: "#6DC993",
    500: "#48BB78",
    600: "#389860",
    700: "#2B7249",
    800: "#1D4D31",
    900: "#0F2819",
  },
  blue: {
    100: "#F0F4FF",
    200: "#CCDAFF",
    300: "#A8C1FF",
    400: "#85A7FF",
    500: "#618DFF",
    600: "#2E68FF",
    700: "#0046FA",
    800: "#0037C7",
    900: "#002994",
  },
};

const invertMap: Record<string, number> = {
  "100": 900,
  "200": 800,
  "300": 700,
  "400": 600,
  "500": 500,
  "600": 400,
  "700": 300,
  "800": 200,
  "900": 100,
};

let darkColors = {} as typeof lightColors;
for (const [name, colors] of Object.entries(lightColors)) {
  darkColors[name] = {};
  for (const [lightScale, value] of Object.entries(colors)) {
    darkColors[name][invertMap[lightScale]] = value;
  }
}

darkColors = {
  ...darkColors,
  foreground: "#fafbfc",
  background: "#131415",
};

export const colorThemes: Record<ColorMode, any> = {
  light: lightColors,
  dark: darkColors,
};



================================================
FILE: src/styles/fonts.css
================================================
/* latin */
@font-face {
  font-family: "Fira Mono";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url(/fonts/FireMono-latin.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}

/* latin */
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url(/fonts/Inter-latin.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}

/* latin */
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url(/fonts/Inter-latin.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}

/* latin */
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 600;
  font-display: swap;
  src: url(/fonts/Inter-latin.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}

/* latin */
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url(/fonts/Inter-latin.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}

/* latin */
@font-face {
  font-family: "Inter";
  font-style: normal;
  font-weight: 800;
  font-display: swap;
  src: url(/fonts/Inter-latin.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}



================================================
FILE: src/styles/GlobalStyles.ts
================================================
import { createGlobalStyle } from "styled-components";
import tw from "twin.macro";

export const GlobalStyles = createGlobalStyle`
  body {
    ${tw`antialiased`}
    ${tw`text-foreground bg-background leading-relaxed`}
    ${tw`font-sans`}
  }

  html {
    ::selection {
      ${tw`bg-pink-200 dark:bg-pink-900`}
    }

    ::-moz-selection {
      ${tw`bg-pink-200 dark:bg-pink-900`}
    }
  }

  .sidebar ::-webkit-scrollbar {
    display: none;
  }

  .sidebar * {
    scrollbar-width: none;
  }

  * {
    box-sizing: border-box;
  }

  .docs-content td {
    vertical-align: middle;
  }
  
  td {
    white-space: break-spaces;
  }
`;



================================================
FILE: src/styles/theme.tsx
================================================
import {
  ThemeProvider as NextThemeProvider,
  useTheme as useNextTheme,
} from "next-themes";
import Head from "next/head";
import React, {
  createContext,
  PropsWithChildren,
  useContext,
  useEffect,
  useMemo,
} from "react";
import { transformThemeToCustomProperties } from "theme-custom-properties";
import { GlobalStyles as TwinGlobalStyles } from "twin.macro";
import { ColorMode, colorThemes, defaultColorMode } from "./colors";
import { GlobalStyles } from "./GlobalStyles";
import { setCookie } from "cookies-next";

const themes = {
  light: { colors: colorThemes.light },
  dark: { colors: colorThemes.dark },
};

interface ThemeState {
  colorMode: ColorMode;
  setColorMode: (mode: string) => void;
}

const ThemeContext = createContext<ThemeState>({} as ThemeState);

export const useTheme = () => useContext(ThemeContext);

export const WrappedThemeProvider: React.FC<PropsWithChildren> = ({
  children,
}) => {
  const { bodyCSS } = useMemo(
    () =>
      transformThemeToCustomProperties(themes, {
        defaultTheme: defaultColorMode,
        attribute: "class",
      }),
    [defaultColorMode, themes],
  );

  const { resolvedTheme, setTheme } = useNextTheme();
  const colorMode = resolvedTheme as ColorMode;

  const themeState: ThemeState = {
    colorMode,
    setColorMode: value => {
      setCookie("theme", value, { maxAge: 60 * 60 * 24 * 365 * 100 });
      setTheme(value);
    },
  };

  useEffect(() => {
    setCookie("theme", colorMode, { maxAge: 60 * 60 * 24 * 365 * 100 });
  }, [colorMode]);

  return (
    <ThemeContext.Provider value={themeState}>
      <Head>
        <style>{bodyCSS}</style>
      </Head>
      <TwinGlobalStyles />
      <GlobalStyles />

      {children}
    </ThemeContext.Provider>
  );
};

export const ThemeProvider: React.FC<PropsWithChildren> = props => (
  <NextThemeProvider
    defaultTheme="light"
    enableSystem={true}
    disableTransitionOnChange={true}
    attribute="class"
  >
    <WrappedThemeProvider {...props} />
  </NextThemeProvider>
);



================================================
FILE: src/utils/icon.ts
================================================
import { ComponentType } from "react";
import { Star } from "react-feather";

export const ICON_FROM_NAME: Record<string, ComponentType> = {
  star: Star,
};

export const iconFromName = (
  name: string | undefined | null,
): ComponentType | undefined => {
  return name ? ICON_FROM_NAME[name] : undefined;
};



================================================
FILE: src/utils/mdxUtils.ts
================================================
import { readdirSync } from "node:fs";
import { join } from "node:path";

const deepReadDir = (dirPath: string): unknown[] =>
  readdirSync(dirPath, { withFileTypes: true }).map(dirent => {
    const path = join(dirPath, dirent.name);
    return dirent.isDirectory() ? deepReadDir(path) : path;
  });

// POSTS_PATH is useful when you want to get the path to a specific file
export const POSTS_PATH = join(process.cwd(), "src/docs");

// postFilePaths is the list of all mdx files inside the POSTS_PATH directory
export const postFilePaths = (deepReadDir(POSTS_PATH).flat() as string[])
  .map(path => path.replace(POSTS_PATH, ""))
  // Only include md(x) files
  .filter(path => /\.mdx?$/.test(path));



================================================
FILE: src/utils/scroll.ts
================================================
export const scrollToID =
  (input: string, skipScroll: boolean = false) =>
  (event: React.MouseEvent) => {
    // if input is a string with #, then split it and take the last element
    // if input is not a string with #, then take the input
    // this is needed because the input can be a relative path such as "/quick-start#deploying-your-project---from-github"
    const splitInput = input.split("#");

    // if input links to a different page, then don't scroll, let the browser navigate to the path
    if (splitInput.length == 2 && splitInput[0] && splitInput[0] != window.location.pathname) {
      return;
    }

    const slug = splitInput[1] || input;

    if (!slug) return;

    const element = document.getElementById(slug);

    if (!element) return;

    event.preventDefault();

    history.pushState(null, "", `#${slug}`);

    if (skipScroll) return;

    element.scrollIntoView({ behavior: "smooth" });
  };



================================================
FILE: src/utils/slugify.ts
================================================
export function slugify(str: string): string {
  return str
    .toLowerCase()
    .replace(/!/g, "")
    .replace(/[\s/]+/g, "-")
    .replace(/[^a-z0-9-]/g, "")
    .replace(/-+/g, "-")
    .replace(/^-|-$/g, "");
}



================================================
FILE: typings/twin.d.ts
================================================
// twin.d.ts
import "twin.macro";
import styledImport, { CSSProp, css as cssImport } from "styled-components";
import {} from "styled-components/cssprop";

declare module "twin.macro" {
  // The styled and css imports
  const styled: typeof styledImport;
  const css: typeof cssImport;
}

declare module "react" {
  // The css prop
  interface HTMLAttributes<T> extends DOMAttributes<T> {
    css?: CSSProp;
    tw?: string;
  }

  // The inline svg css prop
  interface SVGProps<T> extends SVGProps<SVGSVGElement> {
    css?: CSSProp;
  }

  // <style jsx> and <style jsx global> support for styled-jsx
  interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {
    jsx?: boolean;
    global?: boolean;
  }
}

// The 'as' prop on styled components
declare global {
  namespace JSX {
    interface IntrinsicAttributes<T> extends DOMAttributes<T> {
      as?: string | React.ComponentType;
    }
  }
}



================================================
FILE: .github/workflows/build-search-index.yml
================================================
name: Build Search Index

on:
  workflow_dispatch:
    # Manually hit button. Ideally this should be triggered automatically,
    # after a build/deploy step, but it's not worth it to make a custom build
    # right now.

jobs:
  build-index:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Scrape and index docs
        env:
          HOST_URL: ${{ secrets.MEILISEARCH_HOST_URL }}
          API_KEY: ${{ secrets.MEILISEARCH_WRITE_API_KEY }}
          CONFIG_FILE_PATH: ${{ github.workspace }}/meilisearch-docs-scraper.config.json
        run: |
          docker run -t --rm \
            -e MEILISEARCH_HOST_URL=$HOST_URL \
            -e MEILISEARCH_API_KEY=$API_KEY \
            -v $CONFIG_FILE_PATH:/docs-scraper/config.json \
            getmeili/docs-scraper:latest pipenv run ./docs_scraper config.json



================================================
FILE: .github/workflows/ci.yml
================================================
name: CI

on:
  pull_request:

env:
  CI: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "yarn"

      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: Build Contentlayer
        run: |
          yarn contentlayer build 2>&1 | tee build.log
          if grep -q "Warning: Found .* problems" build.log; then
            echo "Contentlayer build produced warnings. Failing build."
            exit 1
          fi

      - name: Build Next.js
        run: yarn next build


